{
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.html",
    "title": "Struct D3D11BufferDesc",
    "keywords": "Struct D3D11BufferDesc Describes a buffer resource. Implements IEquatable < D3D11BufferDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BufferDesc : IEquatable<D3D11BufferDesc> Constructors | Improve this Doc View Source D3D11BufferDesc(UInt32, D3D11BindOptions) Initializes a new instance of the D3D11BufferDesc struct. Declaration public D3D11BufferDesc(uint byteWidth, D3D11BindOptions bindOptions) Parameters Type Name Description UInt32 byteWidth Size of the buffer in bytes. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. | Improve this Doc View Source D3D11BufferDesc(UInt32, D3D11BindOptions, D3D11Usage) Initializes a new instance of the D3D11BufferDesc struct. Declaration public D3D11BufferDesc(uint byteWidth, D3D11BindOptions bindOptions, D3D11Usage usage) Parameters Type Name Description UInt32 byteWidth Size of the buffer in bytes. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. D3D11Usage usage Identify how the buffer is expected to be read from and written to. | Improve this Doc View Source D3D11BufferDesc(UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions) Initializes a new instance of the D3D11BufferDesc struct. Declaration public D3D11BufferDesc(uint byteWidth, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions) Parameters Type Name Description UInt32 byteWidth Size of the buffer in bytes. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. D3D11Usage usage Identify how the buffer is expected to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions CPU access flags or 0 if no CPU access is necessary. | Improve this Doc View Source D3D11BufferDesc(UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, D3D11ResourceMiscOptions) Initializes a new instance of the D3D11BufferDesc struct. Declaration public D3D11BufferDesc(uint byteWidth, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, D3D11ResourceMiscOptions miscOptions) Parameters Type Name Description UInt32 byteWidth Size of the buffer in bytes. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. D3D11Usage usage Identify how the buffer is expected to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions CPU access flags or 0 if no CPU access is necessary. D3D11ResourceMiscOptions miscOptions Miscellaneous flags or 0 if unused. | Improve this Doc View Source D3D11BufferDesc(UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, D3D11ResourceMiscOptions, UInt32) Initializes a new instance of the D3D11BufferDesc struct. Declaration public D3D11BufferDesc(uint byteWidth, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, D3D11ResourceMiscOptions miscOptions, uint structureByteStride) Parameters Type Name Description UInt32 byteWidth Size of the buffer in bytes. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. D3D11Usage usage Identify how the buffer is expected to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions CPU access flags or 0 if no CPU access is necessary. D3D11ResourceMiscOptions miscOptions Miscellaneous flags or 0 if unused. UInt32 structureByteStride The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer. Properties | Improve this Doc View Source BindOptions Gets or sets a value indicating how the buffer will be bound to the pipeline. Declaration public D3D11BindOptions BindOptions { get; set; } Property Value Type Description D3D11BindOptions | Improve this Doc View Source ByteWidth Gets or sets the size of the buffer in bytes. Declaration public uint ByteWidth { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source CpuAccessOptions Gets or sets the CPU access flags or 0 if no CPU access is necessary. Declaration public D3D11CpuAccessOptions CpuAccessOptions { get; set; } Property Value Type Description D3D11CpuAccessOptions | Improve this Doc View Source MiscOptions Gets or sets the miscellaneous flags or 0 if unused. Declaration public D3D11ResourceMiscOptions MiscOptions { get; set; } Property Value Type Description D3D11ResourceMiscOptions | Improve this Doc View Source StructureByteStride Gets or sets the size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer. Declaration public uint StructureByteStride { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Usage Gets or sets a value indicating how the buffer is expected to be read from and written to. Declaration public D3D11Usage Usage { get; set; } Property Value Type Description D3D11Usage Methods | Improve this Doc View Source Equals(D3D11BufferDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BufferDesc other) Parameters Type Name Description D3D11BufferDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source From<T>(T[], D3D11BindOptions) Creates a D3D11BufferDesc struct from a struct. Declaration public static D3D11BufferDesc From<T>(T[] data, D3D11BindOptions bindOptions) where T : struct Parameters Type Name Description T[] data The data. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. Returns Type Description D3D11BufferDesc A D3D11BufferDesc struct. Type Parameters Name Description T A struct. | Improve this Doc View Source From<T>(T[], D3D11BindOptions, D3D11Usage) Creates a D3D11BufferDesc struct from a struct. Declaration public static D3D11BufferDesc From<T>(T[] data, D3D11BindOptions bindOptions, D3D11Usage usage) where T : struct Parameters Type Name Description T[] data The data. D3D11BindOptions bindOptions Identify how the buffer will be bound to the pipeline. D3D11Usage usage Identify how the buffer is expected to be read from and written to. Returns Type Description D3D11BufferDesc A D3D11BufferDesc struct. Type Parameters Name Description T A struct. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11BufferDesc, D3D11BufferDesc) Compares two D3D11BufferDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BufferDesc left, D3D11BufferDesc right) Parameters Type Name Description D3D11BufferDesc left The left D3D11BufferDesc to compare. D3D11BufferDesc right The right D3D11BufferDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BufferDesc, D3D11BufferDesc) Compares two D3D11BufferDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BufferDesc left, D3D11BufferDesc right) Parameters Type Name Description D3D11BufferDesc left The left D3D11BufferDesc to compare. D3D11BufferDesc right The right D3D11BufferDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Buffer.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Buffer.html",
    "title": "Class D3D11Buffer",
    "keywords": "Class D3D11Buffer A buffer interface accesses a buffer resource, which is unstructured memory. Inheritance Object D3D11DeviceChild D3D11Resource D3D11Buffer Implements IDisposable ID3D11Releasable Inherited Members D3D11Resource.Dimension D3D11Resource.EvictionPriority D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Buffer : D3D11Resource, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the properties of a buffer resource. Declaration public D3D11BufferDesc Description { get; } Property Value Type Description D3D11BufferDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Box.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Box.html",
    "title": "Struct D3D11Box",
    "keywords": "Struct D3D11Box Defines a 3D box. Implements IEquatable < D3D11Box > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Box : IEquatable<D3D11Box> Constructors | Improve this Doc View Source D3D11Box(UInt32, UInt32, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Box struct. Declaration public D3D11Box(uint left, uint top, uint front, uint right, uint bottom, uint back) Parameters Type Name Description UInt32 left The x position of the left hand side of the box. UInt32 top The y position of the top of the box. UInt32 front The z position of the front of the box. UInt32 right The x position of the right hand side of the box. UInt32 bottom The y position of the bottom of the box. UInt32 back The z position of the back of the box. Properties | Improve this Doc View Source Back Gets or sets the z position of the back of the box. Declaration public uint Back { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Bottom Gets or sets the y position of the bottom of the box. Declaration public uint Bottom { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Front Gets or sets the z position of the front of the box. Declaration public uint Front { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Left Gets or sets the x position of the left hand side of the box. Declaration public uint Left { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Right Gets or sets the x position of the right hand side of the box. Declaration public uint Right { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Top Gets or sets the y position of the top of the box. Declaration public uint Top { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Box) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Box other) Parameters Type Name Description D3D11Box other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Box, D3D11Box) Compares two D3D11Box objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Box left, D3D11Box right) Parameters Type Name Description D3D11Box left The left D3D11Box to compare. D3D11Box right The right D3D11Box to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Box, D3D11Box) Compares two D3D11Box objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Box left, D3D11Box right) Parameters Type Name Description D3D11Box left The left D3D11Box to compare. D3D11Box right The right D3D11Box to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BlendValue.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BlendValue.html",
    "title": "Enum D3D11BlendValue",
    "keywords": "Enum D3D11BlendValue Blend factors, which modulate values for the pixel shader and render target. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11BlendValue Fields Name Description BlendFactor The blend factor is the blend factor set with OutputMergerSetBlendState(D3D11BlendState, Single[], UInt32) . No pre-blend operation. DestinationAlpha The blend factor is (Ad, Ad, Ad, Ad) , that is alpha data from a render target. No pre-blend operation. DestinationColor The blend factor is (Rd, Gd, Bd, Ad) , that is color data from a render target. No pre-blend operation. InverseBlendFactor The blend factor is the blend factor set with OutputMergerSetBlendState(D3D11BlendState, Single[], UInt32) . The pre-blend operation inverts the blend factor, generating 1 - blend_factor . InverseDestinationAlpha The blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad) , that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A . InverseDestinationColor The blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad) , that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB . InverseSource1Alpha The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A . This blend factor supports dual-source color blending. InverseSource1Color The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB . This blend factor supports dual-source color blending. InverseSourceAlpha The blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As) , that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A . InverseSourceColor The blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As) , that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB . None No value. One The blend factor is (1, 1, 1, 1) . No pre-blend operation. Source1Alpha The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending. Source1Color The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending. SourceAlpha The blend factor is (As, As, As, As) , that is alpha data (A) from a pixel shader. No pre-blend operation. SourceAlphaSaturate The blend factor is (f, f, f, 1) , where f = min(As, 1 - Ad) . The pre-blend operation clamps the data to 1 or less. SourceColor The blend factor is (Rs, Gs, Bs, As) , that is color data (RGB) from a pixel shader. No pre-blend operation. Zero The blend factor is (0, 0, 0, 0) . No pre-blend operation."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BlendState.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BlendState.html",
    "title": "Class D3D11BlendState",
    "keywords": "Class D3D11BlendState The blend-state interface holds a description for blending state that you can bind to the output-merger stage. Inheritance Object D3D11DeviceChild D3D11BlendState Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11BlendState : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the description for blending state that you used to create the blend-state object. Declaration public D3D11BlendDesc Description { get; } Property Value Type Description D3D11BlendDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMKnownColor.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMKnownColor.html",
    "title": "Class XMKnownColor",
    "keywords": "Class XMKnownColor Constants for the standard color definitions. Inheritance Object XMKnownColor Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMKnownColor Fields | Improve this Doc View Source AliceBlue The alice blue color. Declaration public static readonly XMVector AliceBlue Field Value Type Description XMVector | Improve this Doc View Source AntiqueWhite The antique white color. Declaration public static readonly XMVector AntiqueWhite Field Value Type Description XMVector | Improve this Doc View Source Aqua The aqua color. Declaration public static readonly XMVector Aqua Field Value Type Description XMVector | Improve this Doc View Source Aquamarine The aquamarine color. Declaration public static readonly XMVector Aquamarine Field Value Type Description XMVector | Improve this Doc View Source Azure The azure color. Declaration public static readonly XMVector Azure Field Value Type Description XMVector | Improve this Doc View Source Beige The beige color. Declaration public static readonly XMVector Beige Field Value Type Description XMVector | Improve this Doc View Source Bisque The bisque color. Declaration public static readonly XMVector Bisque Field Value Type Description XMVector | Improve this Doc View Source Black The black color. Declaration public static readonly XMVector Black Field Value Type Description XMVector | Improve this Doc View Source BlanchedAlmond The blanched almond color. Declaration public static readonly XMVector BlanchedAlmond Field Value Type Description XMVector | Improve this Doc View Source Blue The blue color. Declaration public static readonly XMVector Blue Field Value Type Description XMVector | Improve this Doc View Source BlueViolet The blue violet color. Declaration public static readonly XMVector BlueViolet Field Value Type Description XMVector | Improve this Doc View Source Brown The brown color. Declaration public static readonly XMVector Brown Field Value Type Description XMVector | Improve this Doc View Source BurlyWood The burly wood color. Declaration public static readonly XMVector BurlyWood Field Value Type Description XMVector | Improve this Doc View Source CadetBlue The cadet blue color. Declaration public static readonly XMVector CadetBlue Field Value Type Description XMVector | Improve this Doc View Source Chartreuse The chartreuse color. Declaration public static readonly XMVector Chartreuse Field Value Type Description XMVector | Improve this Doc View Source Chocolate The chocolate color. Declaration public static readonly XMVector Chocolate Field Value Type Description XMVector | Improve this Doc View Source Coral The coral color. Declaration public static readonly XMVector Coral Field Value Type Description XMVector | Improve this Doc View Source CornflowerBlue The cornflower blue color. Declaration public static readonly XMVector CornflowerBlue Field Value Type Description XMVector | Improve this Doc View Source Cornsilk The cornsilk color. Declaration public static readonly XMVector Cornsilk Field Value Type Description XMVector | Improve this Doc View Source Crimson The crimson color. Declaration public static readonly XMVector Crimson Field Value Type Description XMVector | Improve this Doc View Source Cyan The cyan color. Declaration public static readonly XMVector Cyan Field Value Type Description XMVector | Improve this Doc View Source DarkBlue The dark blue color. Declaration public static readonly XMVector DarkBlue Field Value Type Description XMVector | Improve this Doc View Source DarkCyan The dark cyan color. Declaration public static readonly XMVector DarkCyan Field Value Type Description XMVector | Improve this Doc View Source DarkGoldenrod The dark goldenrod color. Declaration public static readonly XMVector DarkGoldenrod Field Value Type Description XMVector | Improve this Doc View Source DarkGray The dark gray color. Declaration public static readonly XMVector DarkGray Field Value Type Description XMVector | Improve this Doc View Source DarkGreen The dark green color. Declaration public static readonly XMVector DarkGreen Field Value Type Description XMVector | Improve this Doc View Source DarkKhaki The dark khaki color. Declaration public static readonly XMVector DarkKhaki Field Value Type Description XMVector | Improve this Doc View Source DarkMagenta The dark magenta color. Declaration public static readonly XMVector DarkMagenta Field Value Type Description XMVector | Improve this Doc View Source DarkOliveGreen The dark olive green color. Declaration public static readonly XMVector DarkOliveGreen Field Value Type Description XMVector | Improve this Doc View Source DarkOrange The dark orange color. Declaration public static readonly XMVector DarkOrange Field Value Type Description XMVector | Improve this Doc View Source DarkOrchid The dark orchid color. Declaration public static readonly XMVector DarkOrchid Field Value Type Description XMVector | Improve this Doc View Source DarkRed The dark red color. Declaration public static readonly XMVector DarkRed Field Value Type Description XMVector | Improve this Doc View Source DarkSalmon The dark salmon color. Declaration public static readonly XMVector DarkSalmon Field Value Type Description XMVector | Improve this Doc View Source DarkSeaGreen The dark sea green color. Declaration public static readonly XMVector DarkSeaGreen Field Value Type Description XMVector | Improve this Doc View Source DarkSlateBlue The dark slate blue color. Declaration public static readonly XMVector DarkSlateBlue Field Value Type Description XMVector | Improve this Doc View Source DarkSlateGray The dark slate gray color. Declaration public static readonly XMVector DarkSlateGray Field Value Type Description XMVector | Improve this Doc View Source DarkTurquoise The dark turquoise color. Declaration public static readonly XMVector DarkTurquoise Field Value Type Description XMVector | Improve this Doc View Source DarkViolet The dark violet color. Declaration public static readonly XMVector DarkViolet Field Value Type Description XMVector | Improve this Doc View Source DeepPink The deep pink color. Declaration public static readonly XMVector DeepPink Field Value Type Description XMVector | Improve this Doc View Source DeepSkyBlue The deep sky blue color. Declaration public static readonly XMVector DeepSkyBlue Field Value Type Description XMVector | Improve this Doc View Source DimGray The dim gray color. Declaration public static readonly XMVector DimGray Field Value Type Description XMVector | Improve this Doc View Source DodgerBlue The dodger blue color. Declaration public static readonly XMVector DodgerBlue Field Value Type Description XMVector | Improve this Doc View Source Firebrick The firebrick color. Declaration public static readonly XMVector Firebrick Field Value Type Description XMVector | Improve this Doc View Source FloralWhite The floral white color. Declaration public static readonly XMVector FloralWhite Field Value Type Description XMVector | Improve this Doc View Source ForestGreen The forest green color. Declaration public static readonly XMVector ForestGreen Field Value Type Description XMVector | Improve this Doc View Source Fuchsia The fuchsia color. Declaration public static readonly XMVector Fuchsia Field Value Type Description XMVector | Improve this Doc View Source Gainsboro The gainsboro color. Declaration public static readonly XMVector Gainsboro Field Value Type Description XMVector | Improve this Doc View Source GhostWhite The ghost white color. Declaration public static readonly XMVector GhostWhite Field Value Type Description XMVector | Improve this Doc View Source Gold The gold color. Declaration public static readonly XMVector Gold Field Value Type Description XMVector | Improve this Doc View Source Goldenrod The goldenrod color. Declaration public static readonly XMVector Goldenrod Field Value Type Description XMVector | Improve this Doc View Source Gray The gray color. Declaration public static readonly XMVector Gray Field Value Type Description XMVector | Improve this Doc View Source Green The green color. Declaration public static readonly XMVector Green Field Value Type Description XMVector | Improve this Doc View Source GreenYellow The green yellow color. Declaration public static readonly XMVector GreenYellow Field Value Type Description XMVector | Improve this Doc View Source Honeydew The honeydew color. Declaration public static readonly XMVector Honeydew Field Value Type Description XMVector | Improve this Doc View Source HotPink The hot pink color. Declaration public static readonly XMVector HotPink Field Value Type Description XMVector | Improve this Doc View Source IndianRed The indian red color. Declaration public static readonly XMVector IndianRed Field Value Type Description XMVector | Improve this Doc View Source Indigo The indigo color. Declaration public static readonly XMVector Indigo Field Value Type Description XMVector | Improve this Doc View Source Ivory The ivory color. Declaration public static readonly XMVector Ivory Field Value Type Description XMVector | Improve this Doc View Source Khaki The khaki color. Declaration public static readonly XMVector Khaki Field Value Type Description XMVector | Improve this Doc View Source Lavender The lavender color. Declaration public static readonly XMVector Lavender Field Value Type Description XMVector | Improve this Doc View Source LavenderBlush The lavender blush color. Declaration public static readonly XMVector LavenderBlush Field Value Type Description XMVector | Improve this Doc View Source LawnGreen The lawn green color. Declaration public static readonly XMVector LawnGreen Field Value Type Description XMVector | Improve this Doc View Source LemonChiffon The lemon chiffon color. Declaration public static readonly XMVector LemonChiffon Field Value Type Description XMVector | Improve this Doc View Source LightBlue The light blue color. Declaration public static readonly XMVector LightBlue Field Value Type Description XMVector | Improve this Doc View Source LightCoral The light coral color. Declaration public static readonly XMVector LightCoral Field Value Type Description XMVector | Improve this Doc View Source LightCyan The light cyan color. Declaration public static readonly XMVector LightCyan Field Value Type Description XMVector | Improve this Doc View Source LightGoldenrodYellow The light goldenrod yellow color. Declaration public static readonly XMVector LightGoldenrodYellow Field Value Type Description XMVector | Improve this Doc View Source LightGray The light gray color. Declaration public static readonly XMVector LightGray Field Value Type Description XMVector | Improve this Doc View Source LightGreen The light green color. Declaration public static readonly XMVector LightGreen Field Value Type Description XMVector | Improve this Doc View Source LightPink The light pink color. Declaration public static readonly XMVector LightPink Field Value Type Description XMVector | Improve this Doc View Source LightSalmon The light salmon color. Declaration public static readonly XMVector LightSalmon Field Value Type Description XMVector | Improve this Doc View Source LightSeaGreen The light sea green color. Declaration public static readonly XMVector LightSeaGreen Field Value Type Description XMVector | Improve this Doc View Source LightSkyBlue The light sky blue color. Declaration public static readonly XMVector LightSkyBlue Field Value Type Description XMVector | Improve this Doc View Source LightSlateGray The light slate gray color. Declaration public static readonly XMVector LightSlateGray Field Value Type Description XMVector | Improve this Doc View Source LightSteelBlue The light steel blue color. Declaration public static readonly XMVector LightSteelBlue Field Value Type Description XMVector | Improve this Doc View Source LightYellow The light yellow color. Declaration public static readonly XMVector LightYellow Field Value Type Description XMVector | Improve this Doc View Source Lime The lime color. Declaration public static readonly XMVector Lime Field Value Type Description XMVector | Improve this Doc View Source LimeGreen The lime green color. Declaration public static readonly XMVector LimeGreen Field Value Type Description XMVector | Improve this Doc View Source Linen The linen color. Declaration public static readonly XMVector Linen Field Value Type Description XMVector | Improve this Doc View Source Magenta The magenta color. Declaration public static readonly XMVector Magenta Field Value Type Description XMVector | Improve this Doc View Source Maroon The maroon color. Declaration public static readonly XMVector Maroon Field Value Type Description XMVector | Improve this Doc View Source MediumAquamarine The medium aquamarine color. Declaration public static readonly XMVector MediumAquamarine Field Value Type Description XMVector | Improve this Doc View Source MediumBlue The medium blue color. Declaration public static readonly XMVector MediumBlue Field Value Type Description XMVector | Improve this Doc View Source MediumOrchid The medium orchid color. Declaration public static readonly XMVector MediumOrchid Field Value Type Description XMVector | Improve this Doc View Source MediumPurple The medium purple color. Declaration public static readonly XMVector MediumPurple Field Value Type Description XMVector | Improve this Doc View Source MediumSeaGreen The medium sea green color. Declaration public static readonly XMVector MediumSeaGreen Field Value Type Description XMVector | Improve this Doc View Source MediumSlateBlue The medium slate blue color. Declaration public static readonly XMVector MediumSlateBlue Field Value Type Description XMVector | Improve this Doc View Source MediumSpringGreen The medium spring green color. Declaration public static readonly XMVector MediumSpringGreen Field Value Type Description XMVector | Improve this Doc View Source MediumTurquoise The medium turquoise color. Declaration public static readonly XMVector MediumTurquoise Field Value Type Description XMVector | Improve this Doc View Source MediumVioletRed The medium violet red color. Declaration public static readonly XMVector MediumVioletRed Field Value Type Description XMVector | Improve this Doc View Source MidnightBlue The midnight blue color. Declaration public static readonly XMVector MidnightBlue Field Value Type Description XMVector | Improve this Doc View Source MintCream The mint cream color. Declaration public static readonly XMVector MintCream Field Value Type Description XMVector | Improve this Doc View Source MistyRose The misty rose color. Declaration public static readonly XMVector MistyRose Field Value Type Description XMVector | Improve this Doc View Source Moccasin The moccasin color. Declaration public static readonly XMVector Moccasin Field Value Type Description XMVector | Improve this Doc View Source NavajoWhite The navajo white color. Declaration public static readonly XMVector NavajoWhite Field Value Type Description XMVector | Improve this Doc View Source Navy The navy color. Declaration public static readonly XMVector Navy Field Value Type Description XMVector | Improve this Doc View Source OldLace The old lace color. Declaration public static readonly XMVector OldLace Field Value Type Description XMVector | Improve this Doc View Source Olive The olive color. Declaration public static readonly XMVector Olive Field Value Type Description XMVector | Improve this Doc View Source OliveDrab The olive drab color. Declaration public static readonly XMVector OliveDrab Field Value Type Description XMVector | Improve this Doc View Source Orange The orange color. Declaration public static readonly XMVector Orange Field Value Type Description XMVector | Improve this Doc View Source OrangeRed The orange red color. Declaration public static readonly XMVector OrangeRed Field Value Type Description XMVector | Improve this Doc View Source Orchid The orchid color. Declaration public static readonly XMVector Orchid Field Value Type Description XMVector | Improve this Doc View Source PaleGoldenrod The pale goldenrod color. Declaration public static readonly XMVector PaleGoldenrod Field Value Type Description XMVector | Improve this Doc View Source PaleGreen The pale green color. Declaration public static readonly XMVector PaleGreen Field Value Type Description XMVector | Improve this Doc View Source PaleTurquoise The pale turquoise color. Declaration public static readonly XMVector PaleTurquoise Field Value Type Description XMVector | Improve this Doc View Source PaleVioletRed The pale violet red color. Declaration public static readonly XMVector PaleVioletRed Field Value Type Description XMVector | Improve this Doc View Source PapayaWhip The papaya whip color. Declaration public static readonly XMVector PapayaWhip Field Value Type Description XMVector | Improve this Doc View Source PeachPuff The peach puff color. Declaration public static readonly XMVector PeachPuff Field Value Type Description XMVector | Improve this Doc View Source Peru The peru color. Declaration public static readonly XMVector Peru Field Value Type Description XMVector | Improve this Doc View Source Pink The pink color. Declaration public static readonly XMVector Pink Field Value Type Description XMVector | Improve this Doc View Source Plum The plum color. Declaration public static readonly XMVector Plum Field Value Type Description XMVector | Improve this Doc View Source PowderBlue The powder blue color. Declaration public static readonly XMVector PowderBlue Field Value Type Description XMVector | Improve this Doc View Source Purple The purple color. Declaration public static readonly XMVector Purple Field Value Type Description XMVector | Improve this Doc View Source Red The red color. Declaration public static readonly XMVector Red Field Value Type Description XMVector | Improve this Doc View Source RosyBrown The rosy brown color. Declaration public static readonly XMVector RosyBrown Field Value Type Description XMVector | Improve this Doc View Source RoyalBlue The royal blue color. Declaration public static readonly XMVector RoyalBlue Field Value Type Description XMVector | Improve this Doc View Source SaddleBrown The saddle brown color. Declaration public static readonly XMVector SaddleBrown Field Value Type Description XMVector | Improve this Doc View Source Salmon The salmon color. Declaration public static readonly XMVector Salmon Field Value Type Description XMVector | Improve this Doc View Source SandyBrown The sandy brown color. Declaration public static readonly XMVector SandyBrown Field Value Type Description XMVector | Improve this Doc View Source SeaGreen The sea green color. Declaration public static readonly XMVector SeaGreen Field Value Type Description XMVector | Improve this Doc View Source SeaShell The sea shell color. Declaration public static readonly XMVector SeaShell Field Value Type Description XMVector | Improve this Doc View Source Sienna The sienna color. Declaration public static readonly XMVector Sienna Field Value Type Description XMVector | Improve this Doc View Source Silver The silver color. Declaration public static readonly XMVector Silver Field Value Type Description XMVector | Improve this Doc View Source SkyBlue The sky blue color. Declaration public static readonly XMVector SkyBlue Field Value Type Description XMVector | Improve this Doc View Source SlateBlue The slate blue color. Declaration public static readonly XMVector SlateBlue Field Value Type Description XMVector | Improve this Doc View Source SlateGray The slate gray color. Declaration public static readonly XMVector SlateGray Field Value Type Description XMVector | Improve this Doc View Source Snow The snow color. Declaration public static readonly XMVector Snow Field Value Type Description XMVector | Improve this Doc View Source SpringGreen The spring green color. Declaration public static readonly XMVector SpringGreen Field Value Type Description XMVector | Improve this Doc View Source SteelBlue The steel blue color. Declaration public static readonly XMVector SteelBlue Field Value Type Description XMVector | Improve this Doc View Source Tan The tan color. Declaration public static readonly XMVector Tan Field Value Type Description XMVector | Improve this Doc View Source Teal The teal color. Declaration public static readonly XMVector Teal Field Value Type Description XMVector | Improve this Doc View Source Thistle The thistle color. Declaration public static readonly XMVector Thistle Field Value Type Description XMVector | Improve this Doc View Source Tomato The tomato color. Declaration public static readonly XMVector Tomato Field Value Type Description XMVector | Improve this Doc View Source Transparent The transparent color. Declaration public static readonly XMVector Transparent Field Value Type Description XMVector | Improve this Doc View Source Turquoise The turquoise color. Declaration public static readonly XMVector Turquoise Field Value Type Description XMVector | Improve this Doc View Source Violet The violet color. Declaration public static readonly XMVector Violet Field Value Type Description XMVector | Improve this Doc View Source Wheat The wheat color. Declaration public static readonly XMVector Wheat Field Value Type Description XMVector | Improve this Doc View Source White The white color. Declaration public static readonly XMVector White Field Value Type Description XMVector | Improve this Doc View Source WhiteSmoke The white smoke color. Declaration public static readonly XMVector WhiteSmoke Field Value Type Description XMVector | Improve this Doc View Source Yellow The yellow color. Declaration public static readonly XMVector Yellow Field Value Type Description XMVector | Improve this Doc View Source YellowGreen The yellow green color. Declaration public static readonly XMVector YellowGreen Field Value Type Description XMVector"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMInt4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMInt4.html",
    "title": "Struct XMInt4",
    "keywords": "Struct XMInt4 A 4D vector where each component is a signed integer. Implements IEquatable < XMInt4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMInt4 : IEquatable<XMInt4> Constructors | Improve this Doc View Source XMInt4(Int32, Int32, Int32, Int32) Initializes a new instance of the XMInt4 struct. Declaration public XMInt4(int x, int y, int z, int w) Parameters Type Name Description Int32 x The x-coordinate of the vector. Int32 y The y-coordinate of the vector. Int32 z The z-coordinate of the vector. Int32 w The w-coordinate of the vector. | Improve this Doc View Source XMInt4(Int32[]) Initializes a new instance of the XMInt4 struct. Declaration public XMInt4(int[] array) Parameters Type Name Description Int32 [] array The components of the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public int W { get; set; } Property Value Type Description Int32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMInt4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMInt4 other) Parameters Type Name Description XMInt4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMInt4 . Declaration public static XMInt4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt4 A XMInt4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMInt4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMInt4, XMInt4) Compares two XMInt4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMInt4 left, XMInt4 right) Parameters Type Name Description XMInt4 left The left XMInt4 to compare. XMInt4 right The right XMInt4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMInt4 to XMVector) Converts a XMInt4 to a XMVector . Declaration public static implicit operator XMVector(XMInt4 value) Parameters Type Name Description XMInt4 value A XMInt4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMInt4) Converts a XMVector to a XMInt4 . Declaration public static implicit operator XMInt4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt4 A XMInt4 . | Improve this Doc View Source Inequality(XMInt4, XMInt4) Compares two XMInt4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMInt4 left, XMInt4 right) Parameters Type Name Description XMInt4 left The left XMInt4 to compare. XMInt4 right The right XMInt4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMInt3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMInt3.html",
    "title": "Struct XMInt3",
    "keywords": "Struct XMInt3 A 3D vector where each component is a signed integer. Implements IEquatable < XMInt3 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMInt3 : IEquatable<XMInt3> Constructors | Improve this Doc View Source XMInt3(Int32, Int32, Int32) Initializes a new instance of the XMInt3 struct. Declaration public XMInt3(int x, int y, int z) Parameters Type Name Description Int32 x The x-coordinate of the vector. Int32 y The y-coordinate of the vector. Int32 z The z-coordinate of the vector. | Improve this Doc View Source XMInt3(Int32[]) Initializes a new instance of the XMInt3 struct. Declaration public XMInt3(int[] array) Parameters Type Name Description Int32 [] array The components of the array. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMInt3) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMInt3 other) Parameters Type Name Description XMInt3 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMInt3 . Declaration public static XMInt3 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt3 A XMInt3 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMInt3 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMInt3, XMInt3) Compares two XMInt3 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMInt3 left, XMInt3 right) Parameters Type Name Description XMInt3 left The left XMInt3 to compare. XMInt3 right The right XMInt3 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMInt3 to XMVector) Converts a XMInt3 to a XMVector . Declaration public static implicit operator XMVector(XMInt3 value) Parameters Type Name Description XMInt3 value A XMInt3 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMInt3) Converts a XMVector to a XMInt3 . Declaration public static implicit operator XMInt3(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt3 A XMInt3 . | Improve this Doc View Source Inequality(XMInt3, XMInt3) Compares two XMInt3 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMInt3 left, XMInt3 right) Parameters Type Name Description XMInt3 left The left XMInt3 to compare. XMInt3 right The right XMInt3 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMInt2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMInt2.html",
    "title": "Struct XMInt2",
    "keywords": "Struct XMInt2 A 2D vector where each component is a signed integer. Implements IEquatable < XMInt2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMInt2 : IEquatable<XMInt2> Constructors | Improve this Doc View Source XMInt2(Int32, Int32) Initializes a new instance of the XMInt2 struct. Declaration public XMInt2(int x, int y) Parameters Type Name Description Int32 x The x-coordinate of the vector. Int32 y The y-coordinate of the vector. | Improve this Doc View Source XMInt2(Int32[]) Initializes a new instance of the XMInt2 struct. Declaration public XMInt2(int[] array) Parameters Type Name Description Int32 [] array The components of the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMInt2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMInt2 other) Parameters Type Name Description XMInt2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMInt2 . Declaration public static XMInt2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt2 A XMInt2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMInt2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMInt2, XMInt2) Compares two XMInt2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMInt2 left, XMInt2 right) Parameters Type Name Description XMInt2 left The left XMInt2 to compare. XMInt2 right The right XMInt2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMInt2 to XMVector) Converts a XMInt2 to a XMVector . Declaration public static implicit operator XMVector(XMInt2 value) Parameters Type Name Description XMInt2 value A XMInt2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMInt2) Converts a XMVector to a XMInt2 . Declaration public static implicit operator XMInt2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMInt2 A XMInt2 . | Improve this Doc View Source Inequality(XMInt2, XMInt2) Compares two XMInt2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMInt2 left, XMInt2 right) Parameters Type Name Description XMInt2 left The left XMInt2 to compare. XMInt2 right The right XMInt2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat4X4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat4X4.html",
    "title": "Struct XMFloat4X4",
    "keywords": "Struct XMFloat4X4 A 4*4 floating point matrix. Implements IEquatable < XMFloat4X4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat4X4 : IEquatable<XMFloat4X4> Constructors | Improve this Doc View Source XMFloat4X4(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the XMFloat4X4 struct. Declaration public XMFloat4X4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) Parameters Type Name Description Single m11 The value in the first row and first column. Single m12 The value in the first row and second column. Single m13 The value in the first row and third column. Single m14 The value in the first row and fourth column. Single m21 The value in the second row and first column. Single m22 The value in the second row and second column. Single m23 The value in the second row and third column. Single m24 The value in the second row and fourth column. Single m31 The value in the third row and first column. Single m32 The value in the third row and second column. Single m33 The value in the third row and third column. Single m34 The value in the third row and fourth column. Single m41 The value in the fourth row and first column. Single m42 The value in the fourth row and second column. Single m43 The value in the fourth row and third column. Single m44 The value in the fourth row and fourth column. | Improve this Doc View Source XMFloat4X4(Single[]) Initializes a new instance of the XMFloat4X4 struct. Declaration public XMFloat4X4(float[] array) Parameters Type Name Description Single [] array The values of the matrix. Properties | Improve this Doc View Source Item[Int32, Int32] Gets or sets an element specified by row and column. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description Int32 row The row containing the matrix element. Int32 column The column containing the matrix element. Property Value Type Description Single A float value. | Improve this Doc View Source M11 Gets or sets the value in the first row and first column. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M14 Gets or sets the value in the first row and fourth column. Declaration public float M14 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M24 Gets or sets the value in the second row and fourth column. Declaration public float M24 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M34 Gets or sets the value in the third row and fourth column. Declaration public float M34 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column. Declaration public float M43 { get; set; } Property Value Type Description Single | Improve this Doc View Source M44 Gets or sets the value in the fourth row and fourth column. Declaration public float M44 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat4X4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat4X4 other) Parameters Type Name Description XMFloat4X4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromMatrix(XMMatrix) Converts a XMMatrix to a XMFloat4X4 . Declaration public static XMFloat4X4 FromMatrix(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat4X4 A XMFloat4X4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToMatrix() Converts a XMFloat4X4 to a XMMatrix . Declaration public XMMatrix ToMatrix() Returns Type Description XMMatrix A XMMatrix . Operators | Improve this Doc View Source Equality(XMFloat4X4, XMFloat4X4) Compares two XMFloat4X4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat4X4 left, XMFloat4X4 right) Parameters Type Name Description XMFloat4X4 left The left XMFloat4X4 to compare. XMFloat4X4 right The right XMFloat4X4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat4X4 to XMMatrix) Converts a XMFloat4X4 to a XMMatrix . Declaration public static implicit operator XMMatrix(XMFloat4X4 value) Parameters Type Name Description XMFloat4X4 value A XMFloat4X4 . Returns Type Description XMMatrix A XMMatrix . | Improve this Doc View Source Implicit(XMMatrix to XMFloat4X4) Converts a XMMatrix to a XMFloat4X4 . Declaration public static implicit operator XMFloat4X4(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat4X4 A XMFloat4X4 . | Improve this Doc View Source Inequality(XMFloat4X4, XMFloat4X4) Compares two XMFloat4X4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat4X4 left, XMFloat4X4 right) Parameters Type Name Description XMFloat4X4 left The left XMFloat4X4 to compare. XMFloat4X4 right The right XMFloat4X4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat4X3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat4X3.html",
    "title": "Struct XMFloat4X3",
    "keywords": "Struct XMFloat4X3 A 4*3 floating point matrix. Implements IEquatable < XMFloat4X3 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat4X3 : IEquatable<XMFloat4X3> Constructors | Improve this Doc View Source XMFloat4X3(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the XMFloat4X3 struct. Declaration public XMFloat4X3(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33, float m41, float m42, float m43) Parameters Type Name Description Single m11 The value in the first row and first column. Single m12 The value in the first row and second column. Single m13 The value in the first row and third column. Single m21 The value in the second row and first column. Single m22 The value in the second row and second column. Single m23 The value in the second row and third column. Single m31 The value in the third row and first column. Single m32 The value in the third row and second column. Single m33 The value in the third row and third column. Single m41 The value in the fourth row and first column. Single m42 The value in the fourth row and second column. Single m43 The value in the fourth row and third column. | Improve this Doc View Source XMFloat4X3(Single[]) Initializes a new instance of the XMFloat4X3 struct. Declaration public XMFloat4X3(float[] array) Parameters Type Name Description Single [] array the values of the matrix. Properties | Improve this Doc View Source Item[Int32, Int32] Gets or sets an element specified by row and column. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description Int32 row The row containing the matrix element. Int32 column The column containing the matrix element. Property Value Type Description Single A float value. | Improve this Doc View Source M11 Gets or sets the value in the first row and first column. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column. Declaration public float M43 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat4X3) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat4X3 other) Parameters Type Name Description XMFloat4X3 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromMatrix(XMMatrix) Converts a XMMatrix to a XMFloat4X3 . Declaration public static XMFloat4X3 FromMatrix(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat4X3 A XMFloat4X3 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToMatrix() Converts a XMFloat4X3 to a XMMatrix . Declaration public XMMatrix ToMatrix() Returns Type Description XMMatrix A XMMatrix . Operators | Improve this Doc View Source Equality(XMFloat4X3, XMFloat4X3) Compares two XMFloat4X3 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat4X3 left, XMFloat4X3 right) Parameters Type Name Description XMFloat4X3 left The left XMFloat4X3 to compare. XMFloat4X3 right The right XMFloat4X3 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat4X3 to XMMatrix) Converts a XMFloat4X3 to a XMMatrix . Declaration public static implicit operator XMMatrix(XMFloat4X3 value) Parameters Type Name Description XMFloat4X3 value A XMFloat4X3 . Returns Type Description XMMatrix A XMMatrix . | Improve this Doc View Source Implicit(XMMatrix to XMFloat4X3) Converts a XMMatrix to a XMFloat4X3 . Declaration public static implicit operator XMFloat4X3(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat4X3 A XMFloat4X3 . | Improve this Doc View Source Inequality(XMFloat4X3, XMFloat4X3) Compares two XMFloat4X3 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat4X3 left, XMFloat4X3 right) Parameters Type Name Description XMFloat4X3 left The left XMFloat4X3 to compare. XMFloat4X3 right The right XMFloat4X3 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat4.html",
    "title": "Struct XMFloat4",
    "keywords": "Struct XMFloat4 A 4D vector consisting of four single-precision floating-point values. Implements IEquatable < XMFloat4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat4 : IEquatable<XMFloat4> Constructors | Improve this Doc View Source XMFloat4(Single, Single, Single, Single) Initializes a new instance of the XMFloat4 struct. Declaration public XMFloat4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMFloat4(Single[]) Initializes a new instance of the XMFloat4 struct. Declaration public XMFloat4(float[] array) Parameters Type Name Description Single [] array The components of the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public float W { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat4 other) Parameters Type Name Description XMFloat4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMFloat4 . Declaration public static XMFloat4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat4 A XMFloat4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMFloat4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMFloat4, XMFloat4) Compares two XMFloat4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat4 left, XMFloat4 right) Parameters Type Name Description XMFloat4 left The left XMFloat4 to compare. XMFloat4 right The right XMFloat4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat4 to XMVector) Converts a XMFloat4 to a XMVector . Declaration public static implicit operator XMVector(XMFloat4 value) Parameters Type Name Description XMFloat4 value A XMFloat4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMFloat4) Converts a XMVector to a XMFloat4 . Declaration public static implicit operator XMFloat4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat4 A XMFloat4 . | Improve this Doc View Source Inequality(XMFloat4, XMFloat4) Compares two XMFloat4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat4 left, XMFloat4 right) Parameters Type Name Description XMFloat4 left The left XMFloat4 to compare. XMFloat4 right The right XMFloat4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat3X3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat3X3.html",
    "title": "Struct XMFloat3X3",
    "keywords": "Struct XMFloat3X3 A 3*3 floating point matrix. Implements IEquatable < XMFloat3X3 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat3X3 : IEquatable<XMFloat3X3> Constructors | Improve this Doc View Source XMFloat3X3(Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the XMFloat3X3 struct. Declaration public XMFloat3X3(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33) Parameters Type Name Description Single m11 The value in the first row and first column. Single m12 The value in the first row and second column. Single m13 The value in the first row and third column. Single m21 The value in the second row and first column. Single m22 The value in the second row and second column. Single m23 The value in the second row and third column. Single m31 The value in the third row and first column. Single m32 The value in the third row and second column. Single m33 The value in the third row and third column. | Improve this Doc View Source XMFloat3X3(Single[]) Initializes a new instance of the XMFloat3X3 struct. Declaration public XMFloat3X3(float[] array) Parameters Type Name Description Single [] array The values of the matrix. Properties | Improve this Doc View Source Item[Int32, Int32] Gets or sets an element specified by row and column. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description Int32 row The row containing the matrix element. Int32 column The column containing the matrix element. Property Value Type Description Single A float value. | Improve this Doc View Source M11 Gets or sets the value in the first row and first column. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column. Declaration public float M33 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat3X3) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat3X3 other) Parameters Type Name Description XMFloat3X3 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromMatrix(XMMatrix) Converts a XMMatrix to a XMFloat3X3 . Declaration public static XMFloat3X3 FromMatrix(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat3X3 A XMFloat3X3 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToMatrix() Converts a XMFloat3X3 to a XMMatrix . Declaration public XMMatrix ToMatrix() Returns Type Description XMMatrix A XMMatrix . Operators | Improve this Doc View Source Equality(XMFloat3X3, XMFloat3X3) Compares two XMFloat3X3 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat3X3 left, XMFloat3X3 right) Parameters Type Name Description XMFloat3X3 left The left XMFloat3X3 to compare. XMFloat3X3 right The right XMFloat3X3 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat3X3 to XMMatrix) Converts a XMFloat3X3 to a XMMatrix . Declaration public static implicit operator XMMatrix(XMFloat3X3 value) Parameters Type Name Description XMFloat3X3 value A XMFloat3X3 . Returns Type Description XMMatrix A XMMatrix . | Improve this Doc View Source Implicit(XMMatrix to XMFloat3X3) Converts a XMMatrix to a XMFloat3X3 . Declaration public static implicit operator XMFloat3X3(XMMatrix value) Parameters Type Name Description XMMatrix value A XMMatrix . Returns Type Description XMFloat3X3 A XMFloat3X3 . | Improve this Doc View Source Inequality(XMFloat3X3, XMFloat3X3) Compares two XMFloat3X3 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat3X3 left, XMFloat3X3 right) Parameters Type Name Description XMFloat3X3 left The left XMFloat3X3 to compare. XMFloat3X3 right The right XMFloat3X3 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat3.html",
    "title": "Struct XMFloat3",
    "keywords": "Struct XMFloat3 A 3D vector consisting of three single-precision floating-point values. Implements IEquatable < XMFloat3 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat3 : IEquatable<XMFloat3> Constructors | Improve this Doc View Source XMFloat3(Single, Single, Single) Initializes a new instance of the XMFloat3 struct. Declaration public XMFloat3(float x, float y, float z) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. | Improve this Doc View Source XMFloat3(Single[]) Initializes a new instance of the XMFloat3 struct. Declaration public XMFloat3(float[] array) Parameters Type Name Description Single [] array The components of the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat3) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat3 other) Parameters Type Name Description XMFloat3 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMFloat3 . Declaration public static XMFloat3 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3 A XMFloat3 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMFloat3 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMFloat3, XMFloat3) Compares two XMFloat3 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat3 left, XMFloat3 right) Parameters Type Name Description XMFloat3 left The left XMFloat3 to compare. XMFloat3 right The right XMFloat3 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat3 to XMVector) Converts a XMFloat3 to a XMVector . Declaration public static implicit operator XMVector(XMFloat3 value) Parameters Type Name Description XMFloat3 value A XMFloat3 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMFloat3) Converts a XMVector to a XMFloat3 . Declaration public static implicit operator XMFloat3(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3 A XMFloat3 . | Improve this Doc View Source Inequality(XMFloat3, XMFloat3) Compares two XMFloat3 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat3 left, XMFloat3 right) Parameters Type Name Description XMFloat3 left The left XMFloat3 to compare. XMFloat3 right The right XMFloat3 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface2.html",
    "title": "Class DxgiSurface2",
    "keywords": "Class DxgiSurface2 The IDXGISurface2 interface extends the IDXGISurface1 interface by adding support for sub-resource surfaces and getting a handle to a shared resource. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSurface2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSurface2 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiSurface2(Object) Initializes a new instance of the DxgiSurface2 class. Declaration public DxgiSurface2(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDXGISurface2 interface. Fields | Improve this Doc View Source InterfaceGuid The interface GUID. Declaration public static readonly Guid InterfaceGuid Field Value Type Description Guid Properties | Improve this Doc View Source Description Gets a description of the surface. Declaration public DxgiSurfaceDesc Description { get; } Property Value Type Description DxgiSurfaceDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source GetDC(Boolean) Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI). Declaration public IntPtr GetDC(bool discard) Parameters Type Name Description Boolean discard A value indicating whether to preserve Direct3D contents in the GDI DC. Returns Type Description IntPtr An HDC handle that represents the current device context for GDI rendering. | Improve this Doc View Source Map(DxgiMapOptions) Get a pointer to the data contained in the surface, and deny GPU access to the surface. Declaration public DxgiMappedRect Map(DxgiMapOptions options) Parameters Type Name Description DxgiMapOptions options CPU read-write flags. These flags can be combined with a logical OR. Returns Type Description DxgiMappedRect The surface data. | Improve this Doc View Source ReleaseDC(DxgiRect) Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render. Declaration public void ReleaseDC(DxgiRect dirtyRect) Parameters Type Name Description DxgiRect dirtyRect A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region. | Improve this Doc View Source Unmap() Invalidate the pointer to the surface retrieved by IDXGISurface::Map and re-enable GPU access to the resource. Declaration public void Unmap() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface1.html",
    "title": "Class DxgiSurface1",
    "keywords": "Class DxgiSurface1 The IDXGISurface1 interface extends the IDXGISurface by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSurface1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSurface1 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiSurface1(Object) Initializes a new instance of the DxgiSurface1 class. Declaration public DxgiSurface1(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDXGISurface1 interface. Fields | Improve this Doc View Source InterfaceGuid The interface GUID. Declaration public static readonly Guid InterfaceGuid Field Value Type Description Guid Properties | Improve this Doc View Source Description Gets a description of the surface. Declaration public DxgiSurfaceDesc Description { get; } Property Value Type Description DxgiSurfaceDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source GetDC(Boolean) Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI). Declaration public IntPtr GetDC(bool discard) Parameters Type Name Description Boolean discard A value indicating whether to preserve Direct3D contents in the GDI DC. Returns Type Description IntPtr An HDC handle that represents the current device context for GDI rendering. | Improve this Doc View Source Map(DxgiMapOptions) Get a pointer to the data contained in the surface, and deny GPU access to the surface. Declaration public DxgiMappedRect Map(DxgiMapOptions options) Parameters Type Name Description DxgiMapOptions options CPU read-write flags. These flags can be combined with a logical OR. Returns Type Description DxgiMappedRect The surface data. | Improve this Doc View Source ReleaseDC(DxgiRect) Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render. Declaration public void ReleaseDC(DxgiRect dirtyRect) Parameters Type Name Description DxgiRect dirtyRect A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region. | Improve this Doc View Source Unmap() Invalidate the pointer to the surface retrieved by IDXGISurface::Map and re-enable GPU access to the resource. Declaration public void Unmap() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput1.html",
    "title": "Class DxgiOutput1",
    "keywords": "Class DxgiOutput1 An IDXGIOutput interface represents an adapter output (such as a monitor). Inheritance Object DxgiObject DxgiOutput1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiOutput1 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the output. Declaration public DxgiOutputDesc Description { get; } Property Value Type Description DxgiOutputDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source FindClosestMatchingMode(DxgiModeDesc, Object) Finds the display mode that most closely matches the requested display mode. Declaration public DxgiModeDesc FindClosestMatchingMode(DxgiModeDesc modeToMatch, object concernedDevice) Parameters Type Name Description DxgiModeDesc modeToMatch The desired display mode. Object concernedDevice The Direct3D device interface. If this parameter is null , only modes whose format matches that of modeToMatch will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. Returns Type Description DxgiModeDesc The mode that most closely matches modeToMatch . | Improve this Doc View Source GetDisplayModeList(DxgiFormat, DxgiEnumModes) Gets the display modes that match the requested format and other input options. Declaration public DxgiModeDesc[] GetDisplayModeList(DxgiFormat format, DxgiEnumModes modes) Parameters Type Name Description DxgiFormat format The color format. DxgiEnumModes modes Options for modes to include. Returns Type Description DxgiModeDesc [] An array of DxgiModeDesc structure. | Improve this Doc View Source GetDisplaySurfaceData(DxgiSurface1) Gets a copy of the current display surface. Declaration public void GetDisplaySurfaceData(DxgiSurface1 destination) Parameters Type Name Description DxgiSurface1 destination A destination surface. | Improve this Doc View Source GetFrameStatistics() Gets statistics about recently rendered frames. Declaration public DxgiFrameStatistics GetFrameStatistics() Returns Type Description DxgiFrameStatistics The frame statistics. | Improve this Doc View Source WaitForVBlank() Halt a thread until the next vertical blank occurs. Declaration public void WaitForVBlank() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput.html",
    "title": "Class DxgiOutput",
    "keywords": "Class DxgiOutput An IDXGIOutput interface represents an adapter output (such as a monitor). Inheritance Object DxgiObject DxgiOutput Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiOutput : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the output. Declaration public DxgiOutputDesc Description { get; } Property Value Type Description DxgiOutputDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source FindClosestMatchingMode(DxgiModeDesc, Object) Finds the display mode that most closely matches the requested display mode. Declaration public DxgiModeDesc FindClosestMatchingMode(DxgiModeDesc modeToMatch, object concernedDevice) Parameters Type Name Description DxgiModeDesc modeToMatch The desired display mode. Object concernedDevice The Direct3D device interface. If this parameter is null , only modes whose format matches that of modeToMatch will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. Returns Type Description DxgiModeDesc The mode that most closely matches modeToMatch . | Improve this Doc View Source GetDisplayModeList(DxgiFormat, DxgiEnumModes) Gets the display modes that match the requested format and other input options. Declaration public DxgiModeDesc[] GetDisplayModeList(DxgiFormat format, DxgiEnumModes modes) Parameters Type Name Description DxgiFormat format The color format. DxgiEnumModes modes Options for modes to include. Returns Type Description DxgiModeDesc [] An array of DxgiModeDesc structure. | Improve this Doc View Source GetDisplaySurfaceData(DxgiSurface) Gets a copy of the current display surface. Declaration public void GetDisplaySurfaceData(DxgiSurface destination) Parameters Type Name Description DxgiSurface destination A destination surface. | Improve this Doc View Source GetFrameStatistics() Gets statistics about recently rendered frames. Declaration public DxgiFrameStatistics GetFrameStatistics() Returns Type Description DxgiFrameStatistics The frame statistics. | Improve this Doc View Source WaitForVBlank() Halt a thread until the next vertical blank occurs. Declaration public void WaitForVBlank() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.html",
    "title": "Enum DxgiOfferResourcePriority",
    "keywords": "Enum DxgiOfferResourcePriority Identifies the importance of a resource’s content. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiOfferResourcePriority Fields Name Description High The resource is high priority. The operating system discards other offered resources with lower priority before it discards a high priority resource. You mark a resource as high priority if it has useful content that is difficult to regenerate. Low The resource is low priority. The operating system discards a low priority resource before other offered resources with higher priority. It is a good programming practice to mark a resource as low priority if it has no useful content. Normal The resource is normal priority. You mark a resource as normal priority if it has content that is easy to regenerate. Unspecified Unspecified priority."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GradientStop.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GradientStop.html",
    "title": "Struct D2D1GradientStop",
    "keywords": "Struct D2D1GradientStop Contains the position and color of a gradient stop. Implements IEquatable < D2D1GradientStop > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1GradientStop : IEquatable<D2D1GradientStop> Constructors | Improve this Doc View Source D2D1GradientStop(Single, D2D1ColorF) Initializes a new instance of the D2D1GradientStop struct. Declaration public D2D1GradientStop(float position, D2D1ColorF color) Parameters Type Name Description Single position A value that indicates the relative position of the gradient stop in the brush. This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen explicitly. D2D1ColorF color The color of the gradient stop. Properties | Improve this Doc View Source Color Gets or sets the color of the gradient stop. Declaration public D2D1ColorF Color { get; set; } Property Value Type Description D2D1ColorF | Improve this Doc View Source Position Gets or sets a value that indicates the relative position of the gradient stop in the brush. This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen explicitly. Declaration public float Position { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1GradientStop) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1GradientStop other) Parameters Type Name Description D2D1GradientStop other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1GradientStop, D2D1GradientStop) Compares two D2D1GradientStop objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1GradientStop left, D2D1GradientStop right) Parameters Type Name Description D2D1GradientStop left The left D2D1GradientStop to compare. D2D1GradientStop right The right D2D1GradientStop to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1GradientStop, D2D1GradientStop) Compares two D2D1GradientStop objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1GradientStop left, D2D1GradientStop right) Parameters Type Name Description D2D1GradientStop left The left D2D1GradientStop to compare. D2D1GradientStop right The right D2D1GradientStop to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GeometrySink.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GeometrySink.html",
    "title": "Class D2D1GeometrySink",
    "keywords": "Class D2D1GeometrySink Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves. Inheritance Object D2D1SimplifiedGeometrySink D2D1GeometrySink Implements IDisposable ID2D1Releasable Inherited Members D2D1SimplifiedGeometrySink.ToBoolean() D2D1SimplifiedGeometrySink.Dispose() D2D1SimplifiedGeometrySink.Release() D2D1SimplifiedGeometrySink.SetFillMode(D2D1FillMode) D2D1SimplifiedGeometrySink.SetSegmentOptions(D2D1PathSegmentOptions) D2D1SimplifiedGeometrySink.BeginFigure(D2D1Point2F, D2D1FigureBegin) D2D1SimplifiedGeometrySink.AddLines(D2D1Point2F[]) D2D1SimplifiedGeometrySink.AddBeziers(D2D1BezierSegment[]) D2D1SimplifiedGeometrySink.EndFigure(D2D1FigureEnd) D2D1SimplifiedGeometrySink.Close() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1GeometrySink : D2D1SimplifiedGeometrySink, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1SimplifiedGeometrySink.Handle Methods | Improve this Doc View Source AddArc(D2D1ArcSegment) Adds a single arc to the path geometry. Declaration public void AddArc(D2D1ArcSegment arc) Parameters Type Name Description D2D1ArcSegment arc The arc segment to add to the figure. | Improve this Doc View Source AddBezier(D2D1BezierSegment) Creates a cubic Bezier curve between the current point and the specified endpoint. Declaration public void AddBezier(D2D1BezierSegment bezier) Parameters Type Name Description D2D1BezierSegment bezier A structure that describes the control points and endpoint of the Bezier curve to add. | Improve this Doc View Source AddLine(D2D1Point2F) Creates a line segment between the current point and the specified end point and adds it to the geometry sink. Declaration public void AddLine(D2D1Point2F point) Parameters Type Name Description D2D1Point2F point The end point of the line to draw. | Improve this Doc View Source AddQuadraticBezier(D2D1QuadraticBezierSegment) Creates a quadratic Bezier curve between the current point and the specified endpoint. Declaration public void AddQuadraticBezier(D2D1QuadraticBezierSegment bezier) Parameters Type Name Description D2D1QuadraticBezierSegment bezier A structure that describes the control point and the endpoint of the quadratic Bezier curve to add. | Improve this Doc View Source AddQuadraticBeziers(D2D1QuadraticBezierSegment[]) Adds a sequence of quadratic Bezier segments as an array in a single call. Declaration public void AddQuadraticBeziers(D2D1QuadraticBezierSegment[] beziers) Parameters Type Name Description D2D1QuadraticBezierSegment [] beziers An array of a sequence of quadratic Bezier segments. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1ExtendMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1ExtendMode.html",
    "title": "Enum D2D1ExtendMode",
    "keywords": "Enum D2D1ExtendMode Specifies how a brush paints areas outside of its normal content area. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1ExtendMode Fields Name Description Clamp Repeat the edge pixels of the brush's content for all regions outside the normal content area. Mirror The same as wrap, but alternate tiles are flipped The base tile is drawn untransformed. Wrap Repeat the brush's content."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Error.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Error.html",
    "title": "Class D2D1Error",
    "keywords": "Class D2D1Error D2D1 error codes. Inheritance Object D2D1Error Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public static class D2D1Error Fields | Improve this Doc View Source BadNumber Invalid number. Declaration public const int BadNumber = -2003238895 Field Value Type Description Int32 | Improve this Doc View Source BitmapBoundAsTarget Cannot draw with a bitmap that is currently bound as the target bitmap. Declaration public const int BitmapBoundAsTarget = -2003238875 Field Value Type Description Int32 | Improve this Doc View Source BitmapCannotDraw Cannot draw with a bitmap that has the D2D1_BITMAP_OPTIONS_CANNOT_DRAW option. Declaration public const int BitmapCannotDraw = -2003238879 Field Value Type Description Int32 | Improve this Doc View Source CyclicGraph There was a cycle in the graph. Declaration public const int CyclicGraph = -2003238880 Field Value Type Description Int32 | Improve this Doc View Source DisplayFormatNotSupported The display format Direct2D needs to render is not supported by the hardware device. Declaration public const int DisplayFormatNotSupported = -2003238903 Field Value Type Description Int32 | Improve this Doc View Source DisplayStateInvalid A valid display state could not be determined. Declaration public const int DisplayStateInvalid = -2003238906 Field Value Type Description Int32 | Improve this Doc View Source EffectIsNotRegistered The CLSID provided to Unregister did not correspond to a registered effect. Declaration public const int EffectIsNotRegistered = -2003238872 Field Value Type Description Int32 | Improve this Doc View Source ExceedsMaxBitmapSize The requested size is larger than the guaranteed supported texture size at the Direct3D device's current feature level. Declaration public const int ExceedsMaxBitmapSize = -2003238883 Field Value Type Description Int32 | Improve this Doc View Source IncompatibleBrushTypes The brush types are incompatible for the call. Declaration public const int IncompatibleBrushTypes = -2003238888 Field Value Type Description Int32 | Improve this Doc View Source InsufficientDeviceCapabilities D3D Device does not have sufficient capabilities to perform the requested action. Declaration public const int InsufficientDeviceCapabilities = -2003238874 Field Value Type Description Int32 | Improve this Doc View Source IntermediateTooLarge The graph could not be rendered with the context's current tiling settings. Declaration public const int IntermediateTooLarge = -2003238873 Field Value Type Description Int32 | Improve this Doc View Source InternalError An internal error (Direct2D bug) occurred. On checked builds, we would assert. The application should close this instance of Direct2D and should consider restarting its process. Declaration public const int InternalError = -2003238904 Field Value Type Description Int32 | Improve this Doc View Source InvalidCall A call to this method is invalid. Declaration public const int InvalidCall = -2003238902 Field Value Type Description Int32 | Improve this Doc View Source InvalidGraphConfiguration There was a configuration error in the graph. Declaration public const int InvalidGraphConfiguration = -2003238882 Field Value Type Description Int32 | Improve this Doc View Source InvalidInternalGraphConfiguration There was a internal configuration error in the graph. Declaration public const int InvalidInternalGraphConfiguration = -2003238881 Field Value Type Description Int32 | Improve this Doc View Source InvalidProperty The specified property does not exist. Declaration public const int InvalidProperty = -2003238871 Field Value Type Description Int32 | Improve this Doc View Source InvalidTarget Cannot set the image as a target because it is either an effect or is a bitmap that does not have the D2D1_BITMAP_OPTIONS_TARGET flag set. Declaration public const int InvalidTarget = -2003238876 Field Value Type Description Int32 | Improve this Doc View Source LayerAlreadyInUse A layer resource can only be in use once at any point in time. Declaration public const int LayerAlreadyInUse = -2003238893 Field Value Type Description Int32 | Improve this Doc View Source MaxTextureSizeExceeded Requested DirectX surface size exceeded maximum texture size. Declaration public const int MaxTextureSizeExceeded = -2003238897 Field Value Type Description Int32 | Improve this Doc View Source NoHardwareDevice No hardware rendering device is available for this operation. Declaration public const int NoHardwareDevice = -2003238901 Field Value Type Description Int32 | Improve this Doc View Source NoSubproperties The specified sub-property does not exist. Declaration public const int NoSubproperties = -2003238870 Field Value Type Description Int32 | Improve this Doc View Source NotInitialized The object has not yet been initialized. Declaration public const int NotInitialized = -2003238910 Field Value Type Description Int32 | Improve this Doc View Source OriginalTargetNotBound The operation failed because the original target is not currently bound as a target. Declaration public const int OriginalTargetNotBound = -2003238877 Field Value Type Description Int32 | Improve this Doc View Source OutstandingBitmapReferences The operation cannot complete while there are outstanding references to the target bitmap. Declaration public const int OutstandingBitmapReferences = -2003238878 Field Value Type Description Int32 | Improve this Doc View Source PopCallDidNotMatchPush The pop call did not match the corresponding push call. Declaration public const int PopCallDidNotMatchPush = -2003238892 Field Value Type Description Int32 | Improve this Doc View Source PrintFormatNotSupported Error during print control creation. Indicates that none of the package target types (representing printer formats) are supported by Direct2D print control. Declaration public const int PrintFormatNotSupported = -2003238868 Field Value Type Description Int32 | Improve this Doc View Source PrintJobClosed AddPage or Close called after print job is already closed. Declaration public const int PrintJobClosed = -2003238869 Field Value Type Description Int32 | Improve this Doc View Source PushPopUnbalanced The push and pop calls were unbalanced. Declaration public const int PushPopUnbalanced = -2003238890 Field Value Type Description Int32 | Improve this Doc View Source RecreateTarget There has been a presentation error that may be recoverable. The caller needs to recreate, rerender the entire frame, and reattempt present. Declaration public const int RecreateTarget = -2003238900 Field Value Type Description Int32 | Improve this Doc View Source RenderTargetHasLayerOrClipRect Attempt to copy from a render target while a layer or clip rectangle is applied. Declaration public const int RenderTargetHasLayerOrClipRect = -2003238889 Field Value Type Description Int32 | Improve this Doc View Source ScannerFailed The geometry scanner failed to process the data. Declaration public const int ScannerFailed = -2003238908 Field Value Type Description Int32 | Improve this Doc View Source ScreenAccessDenied Direct2D could not access the screen. Declaration public const int ScreenAccessDenied = -2003238907 Field Value Type Description Int32 | Improve this Doc View Source ShaderCompileFailed Shader compilation failed. Declaration public const int ShaderCompileFailed = -2003238898 Field Value Type Description Int32 | Improve this Doc View Source TargetNotGdiCompatible The render target is not compatible with GDI. Declaration public const int TargetNotGdiCompatible = -2003238886 Field Value Type Description Int32 | Improve this Doc View Source TextEffectIsWrongType A text client drawing effect object is of the wrong type. Declaration public const int TextEffectIsWrongType = -2003238885 Field Value Type Description Int32 | Improve this Doc View Source TextRendererNotReleased The application is holding a reference to the IDWriteTextRenderer interface after the corresponding DrawText or DrawTextLayout call has returned. The IDWriteTextRenderer instance will be invalid. Declaration public const int TextRendererNotReleased = -2003238884 Field Value Type Description Int32 | Improve this Doc View Source TooManyShaderElements Shader construction failed because it was too complex. Declaration public const int TooManyShaderElements = -2003238899 Field Value Type Description Int32 | Improve this Doc View Source TooManyTransformInputs An effect attempted to use a transform with too many inputs. Declaration public const int TooManyTransformInputs = -2003238867 Field Value Type Description Int32 | Improve this Doc View Source UnsupportedOperation The requested operation is not supported. Declaration public const int UnsupportedOperation = -2003238909 Field Value Type Description Int32 | Improve this Doc View Source UnsupportedVersion The requested Direct2D version is not supported. Declaration public const int UnsupportedVersion = -2003238896 Field Value Type Description Int32 | Improve this Doc View Source Win32Error An unknown win32 failure occurred. Declaration public const int Win32Error = -2003238887 Field Value Type Description Int32 | Improve this Doc View Source WrongFactory Objects used together must be created from the same factory instance. Declaration public const int WrongFactory = -2003238894 Field Value Type Description Int32 | Improve this Doc View Source WrongResourceDomain The resource was realized on the wrong render target. Declaration public const int WrongResourceDomain = -2003238891 Field Value Type Description Int32 | Improve this Doc View Source WrongState The object was not in the correct state to process the method. Declaration public const int WrongState = -2003238911 Field Value Type Description Int32 | Improve this Doc View Source ZeroVector The supplied vector is zero. Declaration public const int ZeroVector = -2003238905 Field Value Type Description Int32"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1EllipseGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1EllipseGeometry.html",
    "title": "Class D2D1EllipseGeometry",
    "keywords": "Class D2D1EllipseGeometry Represents an ellipse. Inheritance Object D2D1Resource D2D1Geometry D2D1EllipseGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1EllipseGeometry : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Ellipse Gets the D2D1Ellipse structure that describes this ellipse geometry. Declaration public D2D1Ellipse Ellipse { get; } Property Value Type Description D2D1Ellipse | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Ellipse.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Ellipse.html",
    "title": "Struct D2D1Ellipse",
    "keywords": "Struct D2D1Ellipse Contains the center point, x-radius, and y-radius of an ellipse. Implements IEquatable < D2D1Ellipse > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Ellipse : IEquatable<D2D1Ellipse> Constructors | Improve this Doc View Source D2D1Ellipse(D2D1Point2F, Single, Single) Initializes a new instance of the D2D1Ellipse struct. Declaration public D2D1Ellipse(D2D1Point2F point, float radiusX, float radiusY) Parameters Type Name Description D2D1Point2F point The center point of the ellipse. Single radiusX The X-radius of the ellipse. Single radiusY The Y-radius of the ellipse. Properties | Improve this Doc View Source Point Gets or sets the center point of the ellipse. Declaration public D2D1Point2F Point { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source RadiusX Gets or sets the X-radius of the ellipse. Declaration public float RadiusX { get; set; } Property Value Type Description Single | Improve this Doc View Source RadiusY Gets or sets the Y-radius of the ellipse. Declaration public float RadiusY { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Ellipse) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Ellipse other) Parameters Type Name Description D2D1Ellipse other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Ellipse, D2D1Ellipse) Compares two D2D1Ellipse objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Ellipse left, D2D1Ellipse right) Parameters Type Name Description D2D1Ellipse left The left D2D1Ellipse to compare. D2D1Ellipse right The right D2D1Ellipse to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Ellipse, D2D1Ellipse) Compares two D2D1Ellipse objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Ellipse left, D2D1Ellipse right) Parameters Type Name Description D2D1Ellipse left The left D2D1Ellipse to compare. D2D1Ellipse right The right D2D1Ellipse to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DrawingStateBlock.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DrawingStateBlock.html",
    "title": "Class D2D1DrawingStateBlock",
    "keywords": "Class D2D1DrawingStateBlock Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options. Inheritance Object D2D1Resource D2D1DrawingStateBlock Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1DrawingStateBlock : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Description Gets or sets the antialiasing mode, transform, and tags portion of the drawing state. Declaration public D2D1DrawingStateDescription Description { get; set; } Property Value Type Description D2D1DrawingStateDescription | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source TextRenderingParams Gets or sets the text-rendering configuration of the drawing state. Declaration public DWriteRenderingParams TextRenderingParams { get; set; } Property Value Type Description DWriteRenderingParams Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DebugLevel.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DebugLevel.html",
    "title": "Enum D2D1DebugLevel",
    "keywords": "Enum D2D1DebugLevel Indicates the type of information provided by the Direct2D Debug Layer. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1DebugLevel Fields Name Description Error Direct2D sends error messages to the debug layer. Information Direct2D sends error messages, warnings, and additional diagnostic information that can help improve performance to the debug layer. None Direct2D does not produce any debugging output. Warning Direct2D sends error messages and warnings to the debug layer."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DashStyle.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DashStyle.html",
    "title": "Enum D2D1DashStyle",
    "keywords": "Enum D2D1DashStyle Describes the sequence of dashes and gaps in a stroke. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1DashStyle Fields Name Description Custom The dash pattern is specified by an array of floating-point values. Dash A dash followed by a gap of equal length. The dash and the gap are each twice as long as the stroke thickness. DashDot A dash, followed by a gap, followed by a dot, followed by another gap. DashDotDot A dash, followed by a gap, followed by a dot, followed by another gap, followed by another dot, followed by another gap. Dot A dot followed by a longer gap. Solid A solid line with no breaks."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Constants.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Constants.html",
    "title": "Class D2D1Constants",
    "keywords": "Class D2D1Constants D2D1 constants. Inheritance Object D2D1Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public static class D2D1Constants Fields | Improve this Doc View Source DefaultFlatteningTolerance Default flattening tolerance. Declaration public const float DefaultFlatteningTolerance = 0.25F Field Value Type Description Single"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1ColorF.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1ColorF.html",
    "title": "Struct D2D1ColorF",
    "keywords": "Struct D2D1ColorF Describes the red, green, blue, and alpha components of a color. Implements IEquatable < D2D1ColorF > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1ColorF : IEquatable<D2D1ColorF> Constructors | Improve this Doc View Source D2D1ColorF(D2D1KnownColor) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(D2D1KnownColor knownColor) Parameters Type Name Description D2D1KnownColor knownColor A known color. | Improve this Doc View Source D2D1ColorF(D2D1KnownColor, Single) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(D2D1KnownColor knownColor, float a) Parameters Type Name Description D2D1KnownColor knownColor A known color. Single a Floating-point value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque. | Improve this Doc View Source D2D1ColorF(Single, Single, Single) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(float r, float g, float b) Parameters Type Name Description Single r Floating-point value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present. Single g Floating-point value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present. Single b Floating-point value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present. | Improve this Doc View Source D2D1ColorF(Single, Single, Single, Single) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(float r, float g, float b, float a) Parameters Type Name Description Single r Floating-point value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present. Single g Floating-point value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present. Single b Floating-point value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present. Single a Floating-point value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque. | Improve this Doc View Source D2D1ColorF(UInt32) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(uint rgb) Parameters Type Name Description UInt32 rgb The red, green, blue components. | Improve this Doc View Source D2D1ColorF(UInt32, Single) Initializes a new instance of the D2D1ColorF struct. Declaration public D2D1ColorF(uint rgb, float a) Parameters Type Name Description UInt32 rgb The red, green, blue components. Single a Floating-point value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque. Properties | Improve this Doc View Source A Gets or sets a floating-point value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque. Declaration public float A { get; set; } Property Value Type Description Single | Improve this Doc View Source B Gets or sets a floating-point value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present. Declaration public float B { get; set; } Property Value Type Description Single | Improve this Doc View Source G Gets or sets a floating-point value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present. Declaration public float G { get; set; } Property Value Type Description Single | Improve this Doc View Source R Gets or sets a floating-point value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present. Declaration public float R { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1ColorF) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1ColorF other) Parameters Type Name Description D2D1ColorF other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1ColorF, D2D1ColorF) Compares two D2D1ColorF objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1ColorF left, D2D1ColorF right) Parameters Type Name Description D2D1ColorF left The left D2D1ColorF to compare. D2D1ColorF right The right D2D1ColorF to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1ColorF, D2D1ColorF) Compares two D2D1ColorF objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1ColorF left, D2D1ColorF right) Parameters Type Name Description D2D1ColorF left The left D2D1ColorF to compare. D2D1ColorF right The right D2D1ColorF to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BrushProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BrushProperties.html",
    "title": "Struct D2D1BrushProperties",
    "keywords": "Struct D2D1BrushProperties Describes the opacity and transformation of a brush. Implements IEquatable < D2D1BrushProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1BrushProperties : IEquatable<D2D1BrushProperties> Constructors | Improve this Doc View Source D2D1BrushProperties(Single) Initializes a new instance of the D2D1BrushProperties struct. Declaration public D2D1BrushProperties(float opacity) Parameters Type Name Description Single opacity A value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush. | Improve this Doc View Source D2D1BrushProperties(Single, D2D1Matrix3X2F) Initializes a new instance of the D2D1BrushProperties struct. Declaration public D2D1BrushProperties(float opacity, D2D1Matrix3X2F transform) Parameters Type Name Description Single opacity A value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush. D2D1Matrix3X2F transform The transformation that is applied to the brush. Properties | Improve this Doc View Source Default Gets default properties (1.0f, Identity). Declaration public static D2D1BrushProperties Default { get; } Property Value Type Description D2D1BrushProperties | Improve this Doc View Source Opacity Gets or sets a value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush. Declaration public float Opacity { get; set; } Property Value Type Description Single | Improve this Doc View Source Transform Gets or sets the transformation that is applied to the brush. Declaration public D2D1Matrix3X2F Transform { get; set; } Property Value Type Description D2D1Matrix3X2F Methods | Improve this Doc View Source Equals(D2D1BrushProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1BrushProperties other) Parameters Type Name Description D2D1BrushProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1BrushProperties, D2D1BrushProperties) Compares two D2D1BrushProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1BrushProperties left, D2D1BrushProperties right) Parameters Type Name Description D2D1BrushProperties left The left D2D1BrushProperties to compare. D2D1BrushProperties right The right D2D1BrushProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1BrushProperties, D2D1BrushProperties) Compares two D2D1BrushProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1BrushProperties left, D2D1BrushProperties right) Parameters Type Name Description D2D1BrushProperties left The left D2D1BrushProperties to compare. D2D1BrushProperties right The right D2D1BrushProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapBrush.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapBrush.html",
    "title": "Class D2D1BitmapBrush",
    "keywords": "Class D2D1BitmapBrush A bitmap brush allows a bitmap to be used to fill a geometry. Inheritance Object D2D1Resource D2D1Brush D2D1BitmapBrush Implements IDisposable ID2D1Releasable Inherited Members D2D1Brush.Opacity D2D1Brush.Transform D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1BitmapBrush : D2D1Brush, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Bitmap Gets or sets the bitmap source that this brush uses to paint. Declaration public D2D1Bitmap Bitmap { get; set; } Property Value Type Description D2D1Bitmap | Improve this Doc View Source ExtendModeX Gets or sets the method by which the brush horizontally tiles those areas that extend past its bitmap. Declaration public D2D1ExtendMode ExtendModeX { get; set; } Property Value Type Description D2D1ExtendMode | Improve this Doc View Source ExtendModeY Gets or sets the method by which the brush vertically tiles those areas that extend past its bitmap. Declaration public D2D1ExtendMode ExtendModeY { get; set; } Property Value Type Description D2D1ExtendMode | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source InterpolationMode Gets or sets the interpolation method used when the brush bitmap is scaled or rotated. Declaration public D2D1BitmapInterpolationMode InterpolationMode { get; set; } Property Value Type Description D2D1BitmapInterpolationMode Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BezierSegment.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BezierSegment.html",
    "title": "Struct D2D1BezierSegment",
    "keywords": "Struct D2D1BezierSegment Represents a cubic bezier segment drawn between two points. Implements IEquatable < D2D1BezierSegment > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1BezierSegment : IEquatable<D2D1BezierSegment> Constructors | Improve this Doc View Source D2D1BezierSegment(D2D1Point2F, D2D1Point2F, D2D1Point2F) Initializes a new instance of the D2D1BezierSegment struct. Declaration public D2D1BezierSegment(D2D1Point2F point1, D2D1Point2F point2, D2D1Point2F point3) Parameters Type Name Description D2D1Point2F point1 The first control point for the Bezier segment. D2D1Point2F point2 The second control point for the Bezier segment. D2D1Point2F point3 The end point for the Bezier segment. Properties | Improve this Doc View Source Point1 Gets or sets the first control point for the Bezier segment. Declaration public D2D1Point2F Point1 { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Point2 Gets or sets the second control point for the Bezier segment. Declaration public D2D1Point2F Point2 { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Point3 Gets or sets the end point for the Bezier segment. Declaration public D2D1Point2F Point3 { get; set; } Property Value Type Description D2D1Point2F Methods | Improve this Doc View Source Equals(D2D1BezierSegment) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1BezierSegment other) Parameters Type Name Description D2D1BezierSegment other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1BezierSegment, D2D1BezierSegment) Compares two D2D1BezierSegment objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1BezierSegment left, D2D1BezierSegment right) Parameters Type Name Description D2D1BezierSegment left The left D2D1BezierSegment to compare. D2D1BezierSegment right The right D2D1BezierSegment to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1BezierSegment, D2D1BezierSegment) Compares two D2D1BezierSegment objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1BezierSegment left, D2D1BezierSegment right) Parameters Type Name Description D2D1BezierSegment left The left D2D1BezierSegment to compare. D2D1BezierSegment right The right D2D1BezierSegment to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1AlphaMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1AlphaMode.html",
    "title": "Enum D2D1AlphaMode",
    "keywords": "Enum D2D1AlphaMode Qualifies how alpha is to be treated in a bitmap or render target containing alpha. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1AlphaMode Fields Name Description Ignore Ignore any alpha channel information. Premultiplied Treat the alpha as pre multipled. Straight Opacity is in the 'A' component only. Unknown Alpha mode should be determined implicitly. Some target surfaces do not supply or imply this information in which case alpha must be specified."
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN4.html",
    "title": "Struct XMUByteN4",
    "keywords": "Struct XMUByteN4 A 3D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers. Implements IEquatable < XMUByteN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUByteN4 : IEquatable<XMUByteN4> Constructors | Improve this Doc View Source XMUByteN4(Byte, Byte, Byte, Byte) Initializes a new instance of the XMUByteN4 struct. Declaration public XMUByteN4(byte x, byte y, byte z, byte w) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. Byte z The z-coordinate of the vector. Byte w The w-coordinate of the vector. | Improve this Doc View Source XMUByteN4(Byte[]) Initializes a new instance of the XMUByteN4 struct. Declaration public XMUByteN4(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMUByteN4(Single, Single, Single, Single) Initializes a new instance of the XMUByteN4 struct. Declaration public XMUByteN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUByteN4(Single[]) Initializes a new instance of the XMUByteN4 struct. Declaration public XMUByteN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUByteN4(UInt32) Initializes a new instance of the XMUByteN4 struct. Declaration public XMUByteN4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public byte W { get; set; } Property Value Type Description Byte | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public byte Z { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMUByteN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUByteN4 other) Parameters Type Name Description XMUByteN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUByteN4 . Declaration public static XMUByteN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByteN4 A XMUByteN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUByteN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUByteN4, XMUByteN4) Compares two XMUByteN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUByteN4 left, XMUByteN4 right) Parameters Type Name Description XMUByteN4 left The left XMUByteN4 to compare. XMUByteN4 right The right XMUByteN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUByteN4 to XMVector) Converts a XMUByteN4 to a XMVector . Declaration public static implicit operator XMVector(XMUByteN4 value) Parameters Type Name Description XMUByteN4 value A XMUByteN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUByteN4) Converts a XMVector to a XMUByteN4 . Declaration public static implicit operator XMUByteN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByteN4 A XMUByteN4 . | Improve this Doc View Source Inequality(XMUByteN4, XMUByteN4) Compares two XMUByteN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUByteN4 left, XMUByteN4 right) Parameters Type Name Description XMUByteN4 left The left XMUByteN4 to compare. XMUByteN4 right The right XMUByteN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByteN2.html",
    "title": "Struct XMUByteN2",
    "keywords": "Struct XMUByteN2 A 2D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers. Implements IEquatable < XMUByteN2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUByteN2 : IEquatable<XMUByteN2> Constructors | Improve this Doc View Source XMUByteN2(Byte, Byte) Initializes a new instance of the XMUByteN2 struct. Declaration public XMUByteN2(byte x, byte y) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. | Improve this Doc View Source XMUByteN2(Byte[]) Initializes a new instance of the XMUByteN2 struct. Declaration public XMUByteN2(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMUByteN2(Single, Single) Initializes a new instance of the XMUByteN2 struct. Declaration public XMUByteN2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMUByteN2(Single[]) Initializes a new instance of the XMUByteN2 struct. Declaration public XMUByteN2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUByteN2(UInt16) Initializes a new instance of the XMUByteN2 struct. Declaration public XMUByteN2(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMUByteN2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUByteN2 other) Parameters Type Name Description XMUByteN2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUByteN2 . Declaration public static XMUByteN2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByteN2 A XMUByteN2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUByteN2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUByteN2, XMUByteN2) Compares two XMUByteN2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUByteN2 left, XMUByteN2 right) Parameters Type Name Description XMUByteN2 left The left XMUByteN2 to compare. XMUByteN2 right The right XMUByteN2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUByteN2 to XMVector) Converts a XMUByteN2 to a XMVector . Declaration public static implicit operator XMVector(XMUByteN2 value) Parameters Type Name Description XMUByteN2 value A XMUByteN2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUByteN2) Converts a XMVector to a XMUByteN2 . Declaration public static implicit operator XMUByteN2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByteN2 A XMUByteN2 . | Improve this Doc View Source Inequality(XMUByteN2, XMUByteN2) Compares two XMUByteN2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUByteN2 left, XMUByteN2 right) Parameters Type Name Description XMUByteN2 left The left XMUByteN2 to compare. XMUByteN2 right The right XMUByteN2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte4.html",
    "title": "Struct XMUByte4",
    "keywords": "Struct XMUByte4 A 4D vector where each component is a unsigned integer, 8-bits (1 byte) in length. Implements IEquatable < XMUByte4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUByte4 : IEquatable<XMUByte4> Constructors | Improve this Doc View Source XMUByte4(Byte, Byte, Byte, Byte) Initializes a new instance of the XMUByte4 struct. Declaration public XMUByte4(byte x, byte y, byte z, byte w) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. Byte z The z-coordinate of the vector. Byte w The w-coordinate of the vector. | Improve this Doc View Source XMUByte4(Byte[]) Initializes a new instance of the XMUByte4 struct. Declaration public XMUByte4(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMUByte4(Single, Single, Single, Single) Initializes a new instance of the XMUByte4 struct. Declaration public XMUByte4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUByte4(Single[]) Initializes a new instance of the XMUByte4 struct. Declaration public XMUByte4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUByte4(UInt32) Initializes a new instance of the XMUByte4 struct. Declaration public XMUByte4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public byte W { get; set; } Property Value Type Description Byte | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public byte Z { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMUByte4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUByte4 other) Parameters Type Name Description XMUByte4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUByte4 . Declaration public static XMUByte4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByte4 A XMUByte4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUByte4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUByte4, XMUByte4) Compares two XMUByte4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUByte4 left, XMUByte4 right) Parameters Type Name Description XMUByte4 left The left XMUByte4 to compare. XMUByte4 right The right XMUByte4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUByte4 to XMVector) Converts a XMUByte4 to a XMVector . Declaration public static implicit operator XMVector(XMUByte4 value) Parameters Type Name Description XMUByte4 value A XMUByte4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUByte4) Converts a XMVector to a XMUByte4 . Declaration public static implicit operator XMUByte4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByte4 A XMUByte4 . | Improve this Doc View Source Inequality(XMUByte4, XMUByte4) Compares two XMUByte4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUByte4 left, XMUByte4 right) Parameters Type Name Description XMUByte4 left The left XMUByte4 to compare. XMUByte4 right The right XMUByte4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUByte2.html",
    "title": "Struct XMUByte2",
    "keywords": "Struct XMUByte2 A 2D vector where each component is a unsigned integer, 8-bits (1 byte) in length. Implements IEquatable < XMUByte2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUByte2 : IEquatable<XMUByte2> Constructors | Improve this Doc View Source XMUByte2(Byte, Byte) Initializes a new instance of the XMUByte2 struct. Declaration public XMUByte2(byte x, byte y) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. | Improve this Doc View Source XMUByte2(Byte[]) Initializes a new instance of the XMUByte2 struct. Declaration public XMUByte2(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMUByte2(Single, Single) Initializes a new instance of the XMUByte2 struct. Declaration public XMUByte2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMUByte2(Single[]) Initializes a new instance of the XMUByte2 struct. Declaration public XMUByte2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUByte2(UInt16) Initializes a new instance of the XMUByte2 struct. Declaration public XMUByte2(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMUByte2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUByte2 other) Parameters Type Name Description XMUByte2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUByte2 . Declaration public static XMUByte2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByte2 A XMUByte2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUByte2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUByte2, XMUByte2) Compares two XMUByte2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUByte2 left, XMUByte2 right) Parameters Type Name Description XMUByte2 left The left XMUByte2 to compare. XMUByte2 right The right XMUByte2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUByte2 to XMVector) Converts a XMUByte2 to a XMVector . Declaration public static implicit operator XMVector(XMUByte2 value) Parameters Type Name Description XMUByte2 value A XMUByte2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUByte2) Converts a XMVector to a XMUByte2 . Declaration public static implicit operator XMUByte2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUByte2 A XMUByte2 . | Improve this Doc View Source Inequality(XMUByte2, XMUByte2) Compares two XMUByte2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUByte2 left, XMUByte2 right) Parameters Type Name Description XMUByte2 left The left XMUByte2 to compare. XMUByte2 right The right XMUByte2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMU565.html",
    "title": "Struct XMU565",
    "keywords": "Struct XMU565 A 3D vector with x- and z- components represented as 5-bit unsigned integer values, and the y- component as a 6-bit unsigned integer value. Implements IEquatable < XMU565 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMU565 : IEquatable<XMU565> Constructors | Improve this Doc View Source XMU565(Byte, Byte, Byte) Initializes a new instance of the XMU565 struct. Declaration public XMU565(byte x, byte y, byte z) Parameters Type Name Description Byte x The x component. Byte y The y component. Byte z The z component. | Improve this Doc View Source XMU565(Byte[]) Initializes a new instance of the XMU565 struct. Declaration public XMU565(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMU565(Single, Single, Single) Initializes a new instance of the XMU565 struct. Declaration public XMU565(float x, float y, float z) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. | Improve this Doc View Source XMU565(Single[]) Initializes a new instance of the XMU565 struct. Declaration public XMU565(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMU565(UInt16) Initializes a new instance of the XMU565 struct. Declaration public XMU565(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x component. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y component. Declaration public byte Y { get; set; } Property Value Type Description Byte | Improve this Doc View Source Z Gets or sets the z component. Declaration public byte Z { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMU565) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMU565 other) Parameters Type Name Description XMU565 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt16) Converts a packed value to a XMU565 . Declaration public static XMU565 FromPacked(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMU565 A XMU565 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMU565 . Declaration public static XMU565 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMU565 A XMU565 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMU565 to a packed value. Declaration public ushort ToPacked() Returns Type Description UInt16 A packed value. | Improve this Doc View Source ToVector() Converts a XMU565 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMU565, XMU565) Compares two XMU565 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMU565 left, XMU565 right) Parameters Type Name Description XMU565 left The left XMU565 to compare. XMU565 right The right XMU565 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMU565 to XMVector) Converts a XMU565 to a XMVector . Declaration public static implicit operator XMVector(XMU565 value) Parameters Type Name Description XMU565 value A XMU565 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMU565 to UInt16) Converts a XMU565 to a packed value. Declaration public static implicit operator ushort (XMU565 value) Parameters Type Name Description XMU565 value A XMU565 . Returns Type Description UInt16 A packed value. | Improve this Doc View Source Implicit(XMVector to XMU565) Converts a XMVector to a XMU565 . Declaration public static implicit operator XMU565(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMU565 A XMU565 . | Improve this Doc View Source Implicit(UInt16 to XMU565) Converts a packed value to a XMU565 . Declaration public static implicit operator XMU565(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMU565 A XMU565 . | Improve this Doc View Source Inequality(XMU565, XMU565) Compares two XMU565 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMU565 left, XMU565 right) Parameters Type Name Description XMU565 left The left XMU565 to compare. XMU565 right The right XMU565 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMU555.html",
    "title": "Struct XMU555",
    "keywords": "Struct XMU555 A 4D vector with x-,y-, and z- components represented as 5 bit unsigned integer values, and the w-component as a 1 bit integer value. Implements IEquatable < XMU555 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMU555 : IEquatable<XMU555> Constructors | Improve this Doc View Source XMU555(Byte, Byte, Byte, Boolean) Initializes a new instance of the XMU555 struct. Declaration public XMU555(byte x, byte y, byte z, bool w) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. Byte z The z-coordinate of the vector. Boolean w The w-coordinate of the vector. | Improve this Doc View Source XMU555(Byte[], Boolean) Initializes a new instance of the XMU555 struct. Declaration public XMU555(byte[] array, bool w) Parameters Type Name Description Byte [] array The x y z components of the vector. Boolean w The w component of the vector. | Improve this Doc View Source XMU555(Single, Single, Single, Boolean) Initializes a new instance of the XMU555 struct. Declaration public XMU555(float x, float y, float z, bool w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Boolean w The w-coordinate of the vector. | Improve this Doc View Source XMU555(Single[], Boolean) Initializes a new instance of the XMU555 struct. Declaration public XMU555(float[] array, bool w) Parameters Type Name Description Single [] array The x y z components of the vector. Boolean w The w component of the vector. | Improve this Doc View Source XMU555(UInt16) Initializes a new instance of the XMU555 struct. Declaration public XMU555(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets a value indicating whether the w-coordinate of the vector is set. Declaration public bool W { get; set; } Property Value Type Description Boolean | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public byte Z { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMU555) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMU555 other) Parameters Type Name Description XMU555 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt16) Converts a packed value to a XMU555 . Declaration public static XMU555 FromPacked(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMU555 A XMU555 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMU555 . Declaration public static XMU555 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMU555 A XMU555 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMU555 to a packed value. Declaration public ushort ToPacked() Returns Type Description UInt16 A packed value. | Improve this Doc View Source ToVector() Converts a XMU555 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMU555, XMU555) Compares two XMU555 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMU555 left, XMU555 right) Parameters Type Name Description XMU555 left The left XMU555 to compare. XMU555 right The right XMU555 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMU555 to XMVector) Converts a XMU555 to a XMVector . Declaration public static implicit operator XMVector(XMU555 value) Parameters Type Name Description XMU555 value A XMU555 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMU555 to UInt16) Converts a XMU555 to a packed value. Declaration public static implicit operator ushort (XMU555 value) Parameters Type Name Description XMU555 value A XMU555 . Returns Type Description UInt16 A packed value. | Improve this Doc View Source Implicit(XMVector to XMU555) Converts a XMVector to a XMU555 . Declaration public static implicit operator XMU555(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMU555 A XMU555 . | Improve this Doc View Source Implicit(UInt16 to XMU555) Converts a packed value to a XMU555 . Declaration public static implicit operator XMU555(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMU555 A XMU555 . | Improve this Doc View Source Inequality(XMU555, XMU555) Compares two XMU555 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMU555 left, XMU555 right) Parameters Type Name Description XMU555 left The left XMU555 to compare. XMU555 right The right XMU555 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN4.html",
    "title": "Struct XMShortN4",
    "keywords": "Struct XMShortN4 A 4D vector for storing signed, normalized values as signed 16-bit integers. Implements IEquatable < XMShortN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMShortN4 : IEquatable<XMShortN4> Constructors | Improve this Doc View Source XMShortN4(Int16, Int16, Int16, Int16) Initializes a new instance of the XMShortN4 struct. Declaration public XMShortN4(short x, short y, short z, short w) Parameters Type Name Description Int16 x The x-coordinate of the vector. Int16 y The y-coordinate of the vector. Int16 z The z-coordinate of the vector. Int16 w The w-coordinate of the vector. | Improve this Doc View Source XMShortN4(Int16[]) Initializes a new instance of the XMShortN4 struct. Declaration public XMShortN4(short[] array) Parameters Type Name Description Int16 [] array The components of the vector. | Improve this Doc View Source XMShortN4(Single, Single, Single, Single) Initializes a new instance of the XMShortN4 struct. Declaration public XMShortN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMShortN4(Single[]) Initializes a new instance of the XMShortN4 struct. Declaration public XMShortN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMShortN4(UInt64) Initializes a new instance of the XMShortN4 struct. Declaration public XMShortN4(ulong packed) Parameters Type Name Description UInt64 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public short W { get; set; } Property Value Type Description Int16 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public short X { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public short Y { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public short Z { get; set; } Property Value Type Description Int16 Methods | Improve this Doc View Source Equals(XMShortN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMShortN4 other) Parameters Type Name Description XMShortN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMShortN4 . Declaration public static XMShortN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShortN4 A XMShortN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMShortN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMShortN4, XMShortN4) Compares two XMShortN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMShortN4 left, XMShortN4 right) Parameters Type Name Description XMShortN4 left The left XMShortN4 to compare. XMShortN4 right The right XMShortN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMShortN4 to XMVector) Converts a XMShortN4 to a XMVector . Declaration public static implicit operator XMVector(XMShortN4 value) Parameters Type Name Description XMShortN4 value A XMShortN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMShortN4) Converts a XMVector to a XMShortN4 . Declaration public static implicit operator XMShortN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShortN4 A XMShortN4 . | Improve this Doc View Source Inequality(XMShortN4, XMShortN4) Compares two XMShortN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMShortN4 left, XMShortN4 right) Parameters Type Name Description XMShortN4 left The left XMShortN4 to compare. XMShortN4 right The right XMShortN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShortN2.html",
    "title": "Struct XMShortN2",
    "keywords": "Struct XMShortN2 A 2D vector for storing signed, normalized values as signed 16-bit integers. Implements IEquatable < XMShortN2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMShortN2 : IEquatable<XMShortN2> Constructors | Improve this Doc View Source XMShortN2(Int16, Int16) Initializes a new instance of the XMShortN2 struct. Declaration public XMShortN2(short x, short y) Parameters Type Name Description Int16 x The x-coordinate of the vector. Int16 y The y-coordinate of the vector. | Improve this Doc View Source XMShortN2(Int16[]) Initializes a new instance of the XMShortN2 struct. Declaration public XMShortN2(short[] array) Parameters Type Name Description Int16 [] array The components of the vector. | Improve this Doc View Source XMShortN2(Single, Single) Initializes a new instance of the XMShortN2 struct. Declaration public XMShortN2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMShortN2(Single[]) Initializes a new instance of the XMShortN2 struct. Declaration public XMShortN2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMShortN2(UInt32) Initializes a new instance of the XMShortN2 struct. Declaration public XMShortN2(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public short X { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public short Y { get; set; } Property Value Type Description Int16 Methods | Improve this Doc View Source Equals(XMShortN2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMShortN2 other) Parameters Type Name Description XMShortN2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMShortN2 . Declaration public static XMShortN2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShortN2 A XMShortN2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMShortN2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMShortN2, XMShortN2) Compares two XMShortN2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMShortN2 left, XMShortN2 right) Parameters Type Name Description XMShortN2 left The left XMShortN2 to compare. XMShortN2 right The right XMShortN2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMShortN2 to XMVector) Converts a XMShortN2 to a XMVector . Declaration public static implicit operator XMVector(XMShortN2 value) Parameters Type Name Description XMShortN2 value A XMShortN2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMShortN2) Converts a XMVector to a XMShortN2 . Declaration public static implicit operator XMShortN2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShortN2 A XMShortN2 . | Improve this Doc View Source Inequality(XMShortN2, XMShortN2) Compares two XMShortN2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMShortN2 left, XMShortN2 right) Parameters Type Name Description XMShortN2 left The left XMShortN2 to compare. XMShortN2 right The right XMShortN2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShort4.html",
    "title": "Struct XMShort4",
    "keywords": "Struct XMShort4 A 4D vector consisting of 16-bit signed integer components. Implements IEquatable < XMShort4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMShort4 : IEquatable<XMShort4> Constructors | Improve this Doc View Source XMShort4(Int16, Int16, Int16, Int16) Initializes a new instance of the XMShort4 struct. Declaration public XMShort4(short x, short y, short z, short w) Parameters Type Name Description Int16 x The x-coordinate of the vector. Int16 y The y-coordinate of the vector. Int16 z The z-coordinate of the vector. Int16 w The w-coordinate of the vector. | Improve this Doc View Source XMShort4(Int16[]) Initializes a new instance of the XMShort4 struct. Declaration public XMShort4(short[] array) Parameters Type Name Description Int16 [] array The components of the vector. | Improve this Doc View Source XMShort4(Single, Single, Single, Single) Initializes a new instance of the XMShort4 struct. Declaration public XMShort4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMShort4(Single[]) Initializes a new instance of the XMShort4 struct. Declaration public XMShort4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMShort4(UInt64) Initializes a new instance of the XMShort4 struct. Declaration public XMShort4(ulong packed) Parameters Type Name Description UInt64 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public short W { get; set; } Property Value Type Description Int16 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public short X { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public short Y { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public short Z { get; set; } Property Value Type Description Int16 Methods | Improve this Doc View Source Equals(XMShort4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMShort4 other) Parameters Type Name Description XMShort4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMShort4 . Declaration public static XMShort4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShort4 A XMShort4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMShort4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMShort4, XMShort4) Compares two XMShort4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMShort4 left, XMShort4 right) Parameters Type Name Description XMShort4 left The left XMShort4 to compare. XMShort4 right The right XMShort4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMShort4 to XMVector) Converts a XMShort4 to a XMVector . Declaration public static implicit operator XMVector(XMShort4 value) Parameters Type Name Description XMShort4 value A XMShort4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMShort4) Converts a XMVector to a XMShort4 . Declaration public static implicit operator XMShort4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShort4 A XMShort4 . | Improve this Doc View Source Inequality(XMShort4, XMShort4) Compares two XMShort4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMShort4 left, XMShort4 right) Parameters Type Name Description XMShort4 left The left XMShort4 to compare. XMShort4 right The right XMShort4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.ContainmentType.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.ContainmentType.html",
    "title": "Enum ContainmentType",
    "keywords": "Enum ContainmentType Indicates whether an object contains another object. Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public enum ContainmentType Fields Name Description Contains The object contains the specified object. Disjoint The object does not contain the specified object. Intersects The objects intersect."
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingSphere.html",
    "title": "Struct BoundingSphere",
    "keywords": "Struct BoundingSphere A bounding sphere object. Implements IEquatable < BoundingSphere > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct BoundingSphere : IEquatable<BoundingSphere> Constructors | Improve this Doc View Source BoundingSphere(XMFloat3, Single) Initializes a new instance of the BoundingSphere struct. Declaration public BoundingSphere(XMFloat3 center, float radius) Parameters Type Name Description XMFloat3 center The center. Single radius The radius. Properties | Improve this Doc View Source Center Gets or sets the center of the BoundingSphere . Declaration public XMFloat3 Center { get; set; } Property Value Type Description XMFloat3 | Improve this Doc View Source Radius Gets or sets the radius of the BoundingSphere . Declaration public float Radius { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source ContainedBy(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Tests whether the BoundingSphere is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector plane0, XMVector plane1, XMVector plane2, XMVector plane3, XMVector plane4, XMVector plane5) Parameters Type Name Description XMVector plane0 The first plane describing the frustum. XMVector plane1 The second plane describing the frustum. XMVector plane2 The third plane describing the frustum. XMVector plane3 The fourth plane describing the frustum. XMVector plane4 The fifth plane describing the frustum. XMVector plane5 The sixth plane describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingSphere . | Improve this Doc View Source ContainedBy(XMVector[]) Tests whether the BoundingSphere is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector[] planes) Parameters Type Name Description XMVector [] planes The planes describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingSphere . | Improve this Doc View Source Contains(BoundingBox) Tests whether the BoundingSphere contains a specified BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingSphere contains the specified BoundingBox . | Improve this Doc View Source Contains(BoundingFrustum) Tests whether the BoundingSphere contains the specified BoundingFrustum . Declaration public ContainmentType Contains(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingFrustum is contained in the BoundingSphere . | Improve this Doc View Source Contains(BoundingOrientedBox) Tests whether the BoundingSphere contains the specified BoundingOrientedBox . Declaration public ContainmentType Contains(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingOrientedBox is contained in the BoundingSphere . | Improve this Doc View Source Contains(BoundingSphere) Tests whether the BoundingSphere contains a specified BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingSphere contains the specified BoundingSphere . | Improve this Doc View Source Contains(XMVector) Tests whether the BoundingSphere contains a specified point. Declaration public ContainmentType Contains(XMVector point) Parameters Type Name Description XMVector point The point to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingSphere contains the specified point. | Improve this Doc View Source Contains(XMVector, XMVector, XMVector) Tests whether the BoundingSphere contains a specified triangle. Declaration public ContainmentType Contains(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first corner of the triangle. XMVector v1 The second corner of the triangle. XMVector v2 The third corner of the triangle. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingSphere contains the specified triangle. | Improve this Doc View Source CreateFromBox(BoundingBox) Creates a BoundingSphere containing the specified BoundingBox . Declaration public static BoundingSphere CreateFromBox(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox the new BoundingSphere should contain. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateFromFrustum(BoundingFrustum) Creates a BoundingSphere containing the specified BoundingFrustum . Declaration public static BoundingSphere CreateFromFrustum(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum the new BoundingSphere should contain. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateFromOrientedBox(BoundingOrientedBox) Creates a BoundingSphere containing the specified BoundingOrientedBox . Declaration public static BoundingSphere CreateFromOrientedBox(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox the new BoundingSphere should contain. Returns Type Description BoundingSphere The new BoundingSphere . | Improve this Doc View Source CreateFromPoints(XMFloat3[]) Creates a new BoundingSphere from a list of points. Declaration public static BoundingSphere CreateFromPoints(XMFloat3[] points) Parameters Type Name Description XMFloat3 [] points The points to create the new BoundingSphere from. Returns Type Description BoundingSphere The new BoundingSphere containing the specified points. | Improve this Doc View Source CreateMerged(BoundingSphere, BoundingSphere) Creates a BoundingSphere that contains the two specified BoundingSphere objects. Declaration public static BoundingSphere CreateMerged(BoundingSphere s1, BoundingSphere s2) Parameters Type Name Description BoundingSphere s1 The first BoundingSphere that the new BoundingSphere should contain. BoundingSphere s2 The second BoundingSphere that the new BoundingSphere should contain. Returns Type Description BoundingSphere A new BoundingSphere containing the two specified BoundingSphere objects. | Improve this Doc View Source Equals(BoundingSphere) Determines whether the specified object is equal to the current object. Declaration public bool Equals(BoundingSphere other) Parameters Type Name Description BoundingSphere other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Tests the BoundingSphere for intersection with a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test against. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere intersects the specified BoundingBox . | Improve this Doc View Source Intersects(BoundingFrustum) Test the BoundingSphere for intersection with a BoundingFrustum . Declaration public bool Intersects(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere intersects the specified BoundingFrustum . | Improve this Doc View Source Intersects(BoundingOrientedBox) Test the BoundingSphere for intersection with a BoundingOrientedBox . Declaration public bool Intersects(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere intersects the specified BoundingOrientedBox . | Improve this Doc View Source Intersects(BoundingSphere) Tests the BoundingSphere for intersection with a BoundingSphere . Declaration public bool Intersects(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test against. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere intersects the specified BoundingSphere . | Improve this Doc View Source Intersects(XMVector) Tests the BoundingSphere for intersection with a plane. Declaration public PlaneIntersectionType Intersects(XMVector plane) Parameters Type Name Description XMVector plane A vector describing the plane. Returns Type Description PlaneIntersectionType A PlaneIntersectionType value indicating whether the BoundingSphere intersects the specified plane. | Improve this Doc View Source Intersects(XMVector, XMVector) Tests the BoundingSphere for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere contains the specified ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector) Tests the BoundingSphere for intersection with a triangle. Declaration public bool Intersects(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first corner of the triangle. XMVector v1 The second corner of the triangle. XMVector v2 The third corner of the triangle. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere intersects the specified triangle. | Improve this Doc View Source Intersects(XMVector, XMVector, out Single) Tests the BoundingSphere for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction, out float distance) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Single distance The length of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingSphere contains the specified ray. | Improve this Doc View Source Transform(XMMatrix) Transforms the BoundingSphere . Declaration public BoundingSphere Transform(XMMatrix m) Parameters Type Name Description XMMatrix m The transformation matrix. Returns Type Description BoundingSphere The transformed BoundingSphere . | Improve this Doc View Source Transform(Single, XMVector, XMVector) Transforms the BoundingSphere using the specified scale, rotation and translation vectors. Declaration public BoundingSphere Transform(float scale, XMVector rotation, XMVector translation) Parameters Type Name Description Single scale The value to scale the BoundingSphere by. XMVector rotation The value to rotate the BoundingSphere by. XMVector translation The value to translate the BoundingSphere by. Returns Type Description BoundingSphere The transformed BoundingSphere . Operators | Improve this Doc View Source Equality(BoundingSphere, BoundingSphere) Compares two BoundingSphere objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(BoundingSphere left, BoundingSphere right) Parameters Type Name Description BoundingSphere left The left BoundingSphere to compare. BoundingSphere right The right BoundingSphere to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(BoundingSphere, BoundingSphere) Compares two BoundingSphere objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(BoundingSphere left, BoundingSphere right) Parameters Type Name Description BoundingSphere left The left BoundingSphere to compare. BoundingSphere right The right BoundingSphere to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingOrientedBox.html",
    "title": "Struct BoundingOrientedBox",
    "keywords": "Struct BoundingOrientedBox An oriented bounding box object. Implements IEquatable < BoundingOrientedBox > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct BoundingOrientedBox : IEquatable<BoundingOrientedBox> Constructors | Improve this Doc View Source BoundingOrientedBox(XMFloat3, XMFloat3, XMFloat4) Initializes a new instance of the BoundingOrientedBox struct. Declaration public BoundingOrientedBox(XMFloat3 center, XMFloat3 extents, XMFloat4 orientation) Parameters Type Name Description XMFloat3 center The coordinates of the center. XMFloat3 extents The extents. XMFloat4 orientation The orientation. Fields | Improve this Doc View Source CornerCount The number of points defining the BoundingOrientedBox . Declaration public const int CornerCount = 8 Field Value Type Description Int32 Properties | Improve this Doc View Source Center Gets or sets the center of the BoundingOrientedBox . Declaration public XMFloat3 Center { get; set; } Property Value Type Description XMFloat3 | Improve this Doc View Source Extents Gets or sets the extents of the BoundingOrientedBox . Declaration public XMFloat3 Extents { get; set; } Property Value Type Description XMFloat3 | Improve this Doc View Source Orientation Gets or sets the orientation of the BoundingOrientedBox represented as a quaternion. Declaration public XMFloat4 Orientation { get; set; } Property Value Type Description XMFloat4 Methods | Improve this Doc View Source ContainedBy(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Tests whether the BoundingOrientedBox is contained by a frustum. Declaration public ContainmentType ContainedBy(XMVector plane0, XMVector plane1, XMVector plane2, XMVector plane3, XMVector plane4, XMVector plane5) Parameters Type Name Description XMVector plane0 The first plane describing the frustum. XMVector plane1 The second plane describing the frustum. XMVector plane2 The third plane describing the frustum. XMVector plane3 The fourth plane describing the frustum. XMVector plane4 The fifth plane describing the frustum. XMVector plane5 The sixth plane describing the frustum. Returns Type Description ContainmentType A ContainmentType indicating whether the frustum contains the BoundingOrientedBox . | Improve this Doc View Source ContainedBy(XMVector[]) Tests whether the BoundingOrientedBox is contained by a frustum. Declaration public ContainmentType ContainedBy(XMVector[] planes) Parameters Type Name Description XMVector [] planes The planes describing the frustum. Returns Type Description ContainmentType A ContainmentType indicating whether the frustum contains the BoundingOrientedBox . | Improve this Doc View Source Contains(BoundingBox) Tests whether the BoundingOrientedBox contains a BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test against. Returns Type Description ContainmentType A ContainmentType indicating whether the BoundingBox is contained in the BoundingOrientedBox . | Improve this Doc View Source Contains(BoundingFrustum) Tests whether the BoundingOrientedBox contains a BoundingFrustum . Declaration public ContainmentType Contains(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test against. Returns Type Description ContainmentType A ContainmentType indicating whether the BoundingFrustum is contained in the BoundingOrientedBox . | Improve this Doc View Source Contains(BoundingOrientedBox) Tests whether the BoundingOrientedBox contains a BoundingOrientedBox . Declaration public ContainmentType Contains(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test against. Returns Type Description ContainmentType A ContainmentType indicating whether the BoundingOrientedBox is contained in the BoundingOrientedBox . | Improve this Doc View Source Contains(BoundingSphere) Tests whether the BoundingOrientedBox contains a BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test against. Returns Type Description ContainmentType A ContainmentType indicating whether the BoundingSphere is contained in the BoundingOrientedBox . | Improve this Doc View Source Contains(XMVector) Tests whether the BoundingOrientedBox contains a specified point. Declaration public ContainmentType Contains(XMVector point) Parameters Type Name Description XMVector point The point to test against. Returns Type Description ContainmentType A ContainmentType indicating whether point is contained in the BoundingOrientedBox . | Improve this Doc View Source Contains(XMVector, XMVector, XMVector) Tests whether the BoundingOrientedBox contains a triangle. Declaration public ContainmentType Contains(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first vector describing the triangle. XMVector v1 The second vector describing the triangle. XMVector v2 The third vector describing the triangle. Returns Type Description ContainmentType A ContainmentType indicating whether triangle is contained in the BoundingOrientedBox . | Improve this Doc View Source CreateFromBox(BoundingBox) Creates a BoundingOrientedBox from a BoundingBox . Declaration public static BoundingOrientedBox CreateFromBox(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox the BoundingOrientedBox should contain. Returns Type Description BoundingOrientedBox The new BoundingOrientedBox . | Improve this Doc View Source CreateFromPoints(XMFloat3[]) Creates a BoundingOrientedBox from a collection of points. Declaration public static BoundingOrientedBox CreateFromPoints(XMFloat3[] points) Parameters Type Name Description XMFloat3 [] points The points to create the BoundingOrientedBox from. Returns Type Description BoundingOrientedBox The new BoundingOrientedBox containing the specified points. | Improve this Doc View Source Equals(BoundingOrientedBox) Determines whether the specified object is equal to the current object. Declaration public bool Equals(BoundingOrientedBox other) Parameters Type Name Description BoundingOrientedBox other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetCorners() Retrieves the corners of the BoundingOrientedBox . Declaration public XMFloat3[] GetCorners() Returns Type Description XMFloat3 [] The corners. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Tests the BoundingOrientedBox for intersection with a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the BoundingBox . | Improve this Doc View Source Intersects(BoundingFrustum) Tests the BoundingOrientedBox for intersection with a BoundingFrustum . Declaration public bool Intersects(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the BoundingFrustum . | Improve this Doc View Source Intersects(BoundingOrientedBox) Tests the BoundingOrientedBox for intersection with a BoundingOrientedBox . Declaration public bool Intersects(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the BoundingOrientedBox . | Improve this Doc View Source Intersects(BoundingSphere) Tests the BoundingOrientedBox for intersection with a BoundingSphere . Declaration public bool Intersects(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the BoundingSphere . | Improve this Doc View Source Intersects(XMVector) Tests the BoundingOrientedBox for intersection with a plane. Declaration public PlaneIntersectionType Intersects(XMVector plane) Parameters Type Name Description XMVector plane A vector describing the plane. Returns Type Description PlaneIntersectionType A PlaneIntersectionType value indicating the intersection status. | Improve this Doc View Source Intersects(XMVector, XMVector) Tests the BoundingOrientedBox for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector) Tests the BoundingOrientedBox for intersection with a triangle. Declaration public bool Intersects(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first vector describing the triangle. XMVector v1 The second vector describing the triangle. XMVector v2 The third vector describing the triangle. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the triangle. | Improve this Doc View Source Intersects(XMVector, XMVector, out Single) Tests the BoundingOrientedBox for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction, out float distance) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Single distance The length of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingOrientedBox intersects the ray. | Improve this Doc View Source Transform(XMMatrix) Transforms the BoundingOrientedBox . Declaration public BoundingOrientedBox Transform(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix to transform the BoundingOrientedBox with. Returns Type Description BoundingOrientedBox The transformed BoundingOrientedBox . | Improve this Doc View Source Transform(Single, XMVector, XMVector) Transforms the BoundingOrientedBox . Declaration public BoundingOrientedBox Transform(float scale, XMVector rotation, XMVector translation) Parameters Type Name Description Single scale The value to scale the BoundingOrientedBox by. XMVector rotation The value to rotate the BoundingOrientedBox by. XMVector translation The value to translate the BoundingOrientedBox by. Returns Type Description BoundingOrientedBox The transformed BoundingOrientedBox . Operators | Improve this Doc View Source Equality(BoundingOrientedBox, BoundingOrientedBox) Compares two BoundingOrientedBox objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(BoundingOrientedBox left, BoundingOrientedBox right) Parameters Type Name Description BoundingOrientedBox left The left BoundingOrientedBox to compare. BoundingOrientedBox right The right BoundingOrientedBox to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(BoundingOrientedBox, BoundingOrientedBox) Compares two BoundingOrientedBox objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(BoundingOrientedBox left, BoundingOrientedBox right) Parameters Type Name Description BoundingOrientedBox left The left BoundingOrientedBox to compare. BoundingOrientedBox right The right BoundingOrientedBox to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingFrustum.html",
    "title": "Struct BoundingFrustum",
    "keywords": "Struct BoundingFrustum A bounding frustum object. Implements IEquatable < BoundingFrustum > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct BoundingFrustum : IEquatable<BoundingFrustum> Constructors | Improve this Doc View Source BoundingFrustum(XMFloat3, XMFloat4, Single, Single, Single, Single, Single, Single) Initializes a new instance of the BoundingFrustum struct. Declaration public BoundingFrustum(XMFloat3 origin, XMFloat4 orientation, float rightSlope, float leftSlope, float topSlope, float bottomSlope, float near, float far) Parameters Type Name Description XMFloat3 origin The origin of the frustum. XMFloat4 orientation The orientation of the frustum. Single rightSlope The slope of the right side of the frustum. Single leftSlope The slope of the left side of the frustum. Single topSlope The slope of the top of the frustum. Single bottomSlope The slope of the bottom of the frustum. Single near The distance of the near plane from the origin of the frustum. Single far The distance of the far plane from the origin of the frustum. | Improve this Doc View Source BoundingFrustum(XMMatrix) Initializes a new instance of the BoundingFrustum struct from a left-handed projection matrix.. Declaration public BoundingFrustum(XMMatrix projection) Parameters Type Name Description XMMatrix projection The left-handed projection matrix to create the frustum from. Fields | Improve this Doc View Source CornerCount The number of corners defining the BoundingFrustum . Declaration public const int CornerCount = 8 Field Value Type Description Int32 Properties | Improve this Doc View Source BottomSlope Gets or sets the slope of the bottom of the BoundingFrustum . Declaration public float BottomSlope { get; set; } Property Value Type Description Single | Improve this Doc View Source Far Gets or sets the distance of the far plane from the origin of the BoundingFrustum . Declaration public float Far { get; set; } Property Value Type Description Single | Improve this Doc View Source LeftSlope Gets or sets the slope of the left side of the BoundingFrustum . Declaration public float LeftSlope { get; set; } Property Value Type Description Single | Improve this Doc View Source Near Gets or sets the distance of the near plane of the BoundingFrustum from its origin. Declaration public float Near { get; set; } Property Value Type Description Single | Improve this Doc View Source Orientation Gets or sets the orientation of the BoundingFrustum represented as a quaternion. Declaration public XMFloat4 Orientation { get; set; } Property Value Type Description XMFloat4 | Improve this Doc View Source Origin Gets or sets the origin of the BoundingFrustum . Declaration public XMFloat3 Origin { get; set; } Property Value Type Description XMFloat3 | Improve this Doc View Source RightSlope Gets or sets the slope of the right side of the BoundingFrustum . Declaration public float RightSlope { get; set; } Property Value Type Description Single | Improve this Doc View Source TopSlope Gets or sets the slope of the top of the BoundingFrustum . Declaration public float TopSlope { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source ContainedBy(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Tests whether the BoundingFrustum is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector plane0, XMVector plane1, XMVector plane2, XMVector plane3, XMVector plane4, XMVector plane5) Parameters Type Name Description XMVector plane0 The first plane describing the frustum. XMVector plane1 The second plane describing the frustum. XMVector plane2 The third plane describing the frustum. XMVector plane3 The fourth plane describing the frustum. XMVector plane4 The fifth plane describing the frustum. XMVector plane5 The sixth plane describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingFrustum . | Improve this Doc View Source ContainedBy(XMVector[]) Tests whether the BoundingFrustum is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector[] planes) Parameters Type Name Description XMVector [] planes The planes describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingFrustum . | Improve this Doc View Source Contains(BoundingBox) Tests whether the BoundingFrustum contains the specified BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingBox is contained in the BoundingFrustum . | Improve this Doc View Source Contains(BoundingFrustum) Tests whether the BoundingFrustum contains the specified BoundingFrustum . Declaration public ContainmentType Contains(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingFrustum is contained in the BoundingFrustum . | Improve this Doc View Source Contains(BoundingOrientedBox) Tests whether the BoundingFrustum contains the specified BoundingOrientedBox . Declaration public ContainmentType Contains(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingOrientedBox is contained in the BoundingFrustum . | Improve this Doc View Source Contains(BoundingSphere) Tests whether the BoundingFrustum contains the specified BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingSphere is contained in the BoundingFrustum . | Improve this Doc View Source Contains(XMVector) Tests whether the BoundingFrustum contains the specified point. Declaration public ContainmentType Contains(XMVector point) Parameters Type Name Description XMVector point The point to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the point is contained in the BoundingFrustum . | Improve this Doc View Source Contains(XMVector, XMVector, XMVector) Tests whether the BoundingFrustum contains the specified triangle. Declaration public ContainmentType Contains(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first corner of the triangle. XMVector v1 The second corner of the triangle. XMVector v2 The third corner of the triangle. Returns Type Description ContainmentType A ContainmentType value indicating whether the triangle is contained in the BoundingFrustum . | Improve this Doc View Source CreateFromMatrix(XMMatrix) Creates a BoundingFrustum from the specified projection matrix. Declaration public static BoundingFrustum CreateFromMatrix(XMMatrix projection) Parameters Type Name Description XMMatrix projection The left-handed projection matrix to create the BoundingFrustum from. Returns Type Description BoundingFrustum The new BoundingFrustum . | Improve this Doc View Source Equals(BoundingFrustum) Determines whether the specified object is equal to the current object. Declaration public bool Equals(BoundingFrustum other) Parameters Type Name Description BoundingFrustum other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetCorners() Gets the corners making up the BoundingFrustum . Declaration public XMFloat3[] GetCorners() Returns Type Description XMFloat3 [] The corners. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source GetPlanes(out XMVector, out XMVector, out XMVector, out XMVector, out XMVector, out XMVector) Gets the planes making up the BoundingFrustum . Declaration public void GetPlanes(out XMVector nearPlane, out XMVector farPlane, out XMVector rightPlane, out XMVector leftPlane, out XMVector topPlane, out XMVector bottomPlane) Parameters Type Name Description XMVector nearPlane The near plane. XMVector farPlane The far plane. XMVector rightPlane The right plane. XMVector leftPlane The left plane. XMVector topPlane The top plane. XMVector bottomPlane The bottom plane. | Improve this Doc View Source Intersects(BoundingBox) Test the BoundingFrustum for intersection with a BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects the specified BoundingBox . | Improve this Doc View Source Intersects(BoundingFrustum) Test the BoundingFrustum for intersection with another BoundingFrustum . Declaration public bool Intersects(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects the specified BoundingFrustum . | Improve this Doc View Source Intersects(BoundingOrientedBox) Test the BoundingFrustum for intersection with a BoundingOrientedBox . Declaration public bool Intersects(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects the specified BoundingOrientedBox . | Improve this Doc View Source Intersects(BoundingSphere) Test the BoundingFrustum for intersection with a BoundingSphere . Declaration public bool Intersects(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects the specified BoundingSphere . | Improve this Doc View Source Intersects(XMVector) Test the BoundingFrustum for intersection with a plane. Declaration public PlaneIntersectionType Intersects(XMVector plane) Parameters Type Name Description XMVector plane A vector describing the plane. Returns Type Description PlaneIntersectionType A PlaneIntersectionType value indicating the intersection status. | Improve this Doc View Source Intersects(XMVector, XMVector) Test the BoundingFrustum for intersection with a ray. Declaration public bool Intersects(XMVector rayOrigin, XMVector direction) Parameters Type Name Description XMVector rayOrigin The origin of the ray. XMVector direction The direction of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects with the ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector) Test the BoundingFrustum for intersection with a triangle. Declaration public bool Intersects(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first vector describing the triangle. XMVector v1 The second vector describing the triangle. XMVector v2 The third vector describing the triangle. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects the triangle. | Improve this Doc View Source Intersects(XMVector, XMVector, out Single) Test the BoundingFrustum for intersection with a ray. Declaration public bool Intersects(XMVector rayOrigin, XMVector direction, out float dist) Parameters Type Name Description XMVector rayOrigin The origin of the ray. XMVector direction The direction of the ray. Single dist The length of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingFrustum intersects with the ray. | Improve this Doc View Source Transform(XMMatrix) Transforms the BoundingFrustum by the specified transformation matrix. Declaration public BoundingFrustum Transform(XMMatrix m) Parameters Type Name Description XMMatrix m The transformation matrix. Returns Type Description BoundingFrustum The transformed BoundingFrustum . | Improve this Doc View Source Transform(Single, XMVector, XMVector) Transforms the BoundingFrustum using the specified scale, rotation and translation vectors. Declaration public BoundingFrustum Transform(float scale, XMVector rotation, XMVector translation) Parameters Type Name Description Single scale The value to scale the BoundingFrustum by. XMVector rotation The value to rotate the BoundingFrustum by. XMVector translation The value to translate the BoundingFrustum by. Returns Type Description BoundingFrustum The transformed BoundingFrustum . Operators | Improve this Doc View Source Equality(BoundingFrustum, BoundingFrustum) Compares two BoundingFrustum objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(BoundingFrustum left, BoundingFrustum right) Parameters Type Name Description BoundingFrustum left The left BoundingFrustum to compare. BoundingFrustum right The right BoundingFrustum to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(BoundingFrustum, BoundingFrustum) Compares two BoundingFrustum objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(BoundingFrustum left, BoundingFrustum right) Parameters Type Name Description BoundingFrustum left The left BoundingFrustum to compare. BoundingFrustum right The right BoundingFrustum to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.BoundingBox.html",
    "title": "Struct BoundingBox",
    "keywords": "Struct BoundingBox A bounding axis-aligned object. Implements IEquatable < BoundingBox > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct BoundingBox : IEquatable<BoundingBox> Constructors | Improve this Doc View Source BoundingBox(XMFloat3, XMFloat3) Initializes a new instance of the BoundingBox struct. Declaration public BoundingBox(XMFloat3 center, XMFloat3 extents) Parameters Type Name Description XMFloat3 center The coordinate of the center of the box. XMFloat3 extents The extents of the box. Fields | Improve this Doc View Source CornerCount The number of points defining the BoundingBox . Declaration public const int CornerCount = 8 Field Value Type Description Int32 Properties | Improve this Doc View Source Center Gets or sets the center of the BoundingBox . Declaration public XMFloat3 Center { get; set; } Property Value Type Description XMFloat3 | Improve this Doc View Source Extents Gets or sets the extents of the BoundingBox . Declaration public XMFloat3 Extents { get; set; } Property Value Type Description XMFloat3 Methods | Improve this Doc View Source ContainedBy(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Tests whether the BoundingBox is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector plane0, XMVector plane1, XMVector plane2, XMVector plane3, XMVector plane4, XMVector plane5) Parameters Type Name Description XMVector plane0 The first plane describing the frustum. XMVector plane1 The second plane describing the frustum. XMVector plane2 The third plane describing the frustum. XMVector plane3 The fourth plane describing the frustum. XMVector plane4 The fifth plane describing the frustum. XMVector plane5 The sixth plane describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingBox . | Improve this Doc View Source ContainedBy(XMVector[]) Tests whether the BoundingBox is contained by the specified frustum. Declaration public ContainmentType ContainedBy(XMVector[] planes) Parameters Type Name Description XMVector [] planes The planes describing the frustum. Returns Type Description ContainmentType A ContainmentType value indicating whether the frustum contains the BoundingBox . | Improve this Doc View Source Contains(BoundingBox) Tests whether the BoundingBox contains another BoundingBox . Declaration public ContainmentType Contains(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingBox contains the specified BoundingBox . | Improve this Doc View Source Contains(BoundingFrustum) Tests whether the BoundingBox contains the specified BoundingFrustum . Declaration public ContainmentType Contains(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingFrustum is contained in the BoundingBox . | Improve this Doc View Source Contains(BoundingOrientedBox) Tests whether the BoundingBox contains the specified BoundingOrientedBox . Declaration public ContainmentType Contains(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingOrientedBox is contained in the BoundingBox . | Improve this Doc View Source Contains(BoundingSphere) Tests whether the BoundingBox contains a specified BoundingSphere . Declaration public ContainmentType Contains(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingBox contains the BoundingSphere . | Improve this Doc View Source Contains(XMVector) Tests the whether the BoundingBox contains a specified point. Declaration public ContainmentType Contains(XMVector point) Parameters Type Name Description XMVector point The point to test against. Returns Type Description ContainmentType A ContainmentType value indicating whether the point is contained in the BoundingBox . | Improve this Doc View Source Contains(XMVector, XMVector, XMVector) Test whether the BoundingBox contains a specified triangle. Declaration public ContainmentType Contains(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first corner of the triangle. XMVector v1 The second corner of the triangle. XMVector v2 The third corner of the triangle. Returns Type Description ContainmentType A ContainmentType value indicating whether the BoundingBox contains the specified triangle. | Improve this Doc View Source CreateFromPoints(XMFloat3[]) Creates a BoundingBox from a list of points. Declaration public static BoundingBox CreateFromPoints(XMFloat3[] points) Parameters Type Name Description XMFloat3 [] points The points to create the BoundingBox from. Returns Type Description BoundingBox The new BoundingBox containing the specified points. | Improve this Doc View Source CreateFromPoints(XMVector, XMVector) Creates a BoundingBox from two points. Declaration public static BoundingBox CreateFromPoints(XMVector pt1, XMVector pt2) Parameters Type Name Description XMVector pt1 The first point the new BoundingBox should contain. XMVector pt2 The second point the new BoundingBox should contain. Returns Type Description BoundingBox The new BoundingBox containing the two specified points. | Improve this Doc View Source CreateFromSphere(BoundingSphere) Creates a BoundingBox large enough to contain the a specified BoundingSphere . Declaration public static BoundingBox CreateFromSphere(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere the new BoundingBox should contain. Returns Type Description BoundingBox The new BoundingBox . | Improve this Doc View Source CreateMerged(BoundingBox, BoundingBox) Creates a BoundingBox large enough to contains two specified BoundingBox instances. Declaration public static BoundingBox CreateMerged(BoundingBox b1, BoundingBox b2) Parameters Type Name Description BoundingBox b1 The first BoundingBox that should be contained in the new BoundingBox . BoundingBox b2 The second BoundingBox that should be contained in the new BoundingBox . Returns Type Description BoundingBox The merged BoundingBox . | Improve this Doc View Source Equals(BoundingBox) Determines whether the specified object is equal to the current object. Declaration public bool Equals(BoundingBox other) Parameters Type Name Description BoundingBox other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetCorners() Retrieves the corners of the BoundingBox . Declaration public XMFloat3[] GetCorners() Returns Type Description XMFloat3 [] The corners of the BoundingBox . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source Intersects(BoundingBox) Tests the BoundingBox for intersection with another BoundingBox . Declaration public bool Intersects(BoundingBox box) Parameters Type Name Description BoundingBox box The BoundingBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the specified BoundingBox . | Improve this Doc View Source Intersects(BoundingFrustum) Test the BoundingBox for intersection with a BoundingFrustum . Declaration public bool Intersects(BoundingFrustum fr) Parameters Type Name Description BoundingFrustum fr The BoundingFrustum to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the specified BoundingFrustum . | Improve this Doc View Source Intersects(BoundingOrientedBox) Test the BoundingBox for intersection with a BoundingOrientedBox . Declaration public bool Intersects(BoundingOrientedBox box) Parameters Type Name Description BoundingOrientedBox box The BoundingOrientedBox to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the specified BoundingOrientedBox . | Improve this Doc View Source Intersects(BoundingSphere) Tests the BoundingBox for intersection with a BoundingSphere . Declaration public bool Intersects(BoundingSphere sh) Parameters Type Name Description BoundingSphere sh The BoundingSphere to test for intersection. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the specified BoundingSphere . | Improve this Doc View Source Intersects(XMVector) Test the BoundingBox for intersection with a plane. Declaration public PlaneIntersectionType Intersects(XMVector plane) Parameters Type Name Description XMVector plane A vector describing the plane. Returns Type Description PlaneIntersectionType A PlaneIntersectionType value indicating the intersection status. | Improve this Doc View Source Intersects(XMVector, XMVector) Test the BoundingBox for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector) Test the BoundingBox for intersection with a triangle. Declaration public bool Intersects(XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector v0 The first vector describing the triangle. XMVector v1 The second vector describing the triangle. XMVector v2 The third vector describing the triangle. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the triangle. | Improve this Doc View Source Intersects(XMVector, XMVector, out Single) Test the BoundingBox for intersection with a ray. Declaration public bool Intersects(XMVector origin, XMVector direction, out float distance) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. Single distance The length of the ray. Returns Type Description Boolean A boolean value indicating whether the BoundingBox intersects the ray. | Improve this Doc View Source Transform(XMMatrix) Transforms the BoundingBox . Declaration public BoundingBox Transform(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix to transform the BoundingBox by. Returns Type Description BoundingBox The transformed BoundingBox . | Improve this Doc View Source Transform(Single, XMVector, XMVector) Transforms the BoundingBox . Declaration public BoundingBox Transform(float scale, XMVector rotation, XMVector translation) Parameters Type Name Description Single scale The value to scale the BoundingBox by. XMVector rotation The value to rotate the BoundingBox by. XMVector translation The value to translate the BoundingBox by. Returns Type Description BoundingBox The transformed BoundingBox . Operators | Improve this Doc View Source Equality(BoundingBox, BoundingBox) Compares two BoundingBox objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(BoundingBox left, BoundingBox right) Parameters Type Name Description BoundingBox left The left BoundingBox to compare. BoundingBox right The right BoundingBox to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(BoundingBox, BoundingBox) Compares two BoundingBox objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(BoundingBox left, BoundingBox right) Parameters Type Name Description BoundingBox left The left BoundingBox to compare. BoundingBox right The right BoundingBox to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.html",
    "title": "Namespace JeremyAnsel.DirectX.Dxgi",
    "keywords": "Namespace JeremyAnsel.DirectX.Dxgi Classes DxgiAdapter The IDXGIAdapter interface represents a display sub-system (including one or more GPU's, DACs and video memory). DxgiAdapter1 The IDXGIAdapter1 interface represents a display sub-system (including one or more GPU's, DACs and video memory). DxgiAdapter2 The IDXGIAdapter2 interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory. DxgiAdapter3 The IDXGIAdapter2 interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory. DxgiDevice An IDXGIDevice interface implements a derived class for DXGI objects that produce image data. DxgiDevice1 An IDXGIDevice1 interface implements a derived class for DXGI objects that produce image data. DxgiDevice2 The IDXGIDevice2 interface implements a derived class for DXGI objects that produce image data. The interface exposes methods to block CPU processing until the GPU completes processing, and to offer resources to the operating system. DxgiDevice3 The IDXGIDevice3 interface implements a derived class for DXGI objects that produce image data. The interface exposes a method to trim graphics memory usage by the DXGI device. DxgiDeviceSubObject Inherited from objects that are tied to the device so that they can retrieve a pointer to it. DxgiError DXGI error codes. DxgiFactory An IDXGIFactory interface implements methods for generating DXGI objects (which handle full screen transitions). DxgiFactory1 The IDXGIFactory1 interface implements methods for generating DXGI objects. DxgiFactory2 The IDXGIFactory2 interface includes methods to create a newer version swap chain with more features than IDXGISwapChain and to monitor stereoscopic 3D capabilities. DxgiFactory3 Enables creating Microsoft DirectX Graphics Infrastructure (DXGI) objects. DxgiKeyedMutex Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices. DxgiObject An IDXGIObject interface is a base interface for all DXGI objects. IDXGIObject supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object. DxgiOutput An IDXGIOutput interface represents an adapter output (such as a monitor). DxgiOutput1 An IDXGIOutput interface represents an adapter output (such as a monitor). DxgiOutput2 An IDXGIOutput1 interface represents an adapter output (such as a monitor). DxgiOutput3 Represents an adapter output (such as a monitor). The IDXGIOutput2 interface exposes a method to check for multi-plane overlay support on the primary output adapter. DxgiResource An IDXGIResource interface allows resource sharing and identifies the memory that a resource resides in. DxgiResource1 An IDXGIResource interface allows resource sharing and identifies the memory that a resource resides in. DxgiResource2 An IDXGIResource1 interface extends the IDXGIResource interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource. DxgiResource3 An IDXGIResource1 interface extends the IDXGIResource interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource. DxgiSurface The IDXGISurface interface implements methods for image-data objects. DxgiSurface1 The IDXGISurface1 interface extends the IDXGISurface by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface. DxgiSurface2 The IDXGISurface2 interface extends the IDXGISurface1 interface by adding support for sub-resource surfaces and getting a handle to a shared resource. DxgiSurface3 The IDXGISurface2 interface extends the IDXGISurface1 interface by adding support for sub-resource surfaces and getting a handle to a shared resource. DxgiSwapChain An IDXGISwapChain interface implements one or more surfaces for storing rendered data before presenting it to an output. DxgiSwapChain1 An IDXGISwapChain interface implements one or more surfaces for storing rendered data before presenting it to an output. DxgiSwapChain2 Provides presentation capabilities that are enhanced from IDXGISwapChain . These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation. DxgiSwapChain3 Extends IDXGISwapChain1 with methods to support swap back buffer scaling and lower-latency swap chains. DxgiUtils Utility methods. Structs DxgiAdapterDesc Describes an adapter (or video card) by using DXGI 1.0. DxgiAdapterDesc1 Describes an adapter (or video card) using DXGI 1.1. DxgiAdapterDesc2 Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.2. DxgiColorRgb Represents an RGB color. DxgiColorRgba The structure represents a color value with alpha, which is used for transparency. DxgiFrameStatistics Describes timing and presentation statistics for a frame. DxgiGammaControl Controls the settings of a gamma curve. DxgiGammaControlCapabilities Controls the gamma capabilities of an adapter. DxgiMappedRect Describes a mapped rectangle that is used to access a surface. DxgiMatrix3x2F Represents a 3x2 matrix. DxgiModeDesc Describes a display mode. DxgiModeDesc1 Describes a display mode and whether the display mode supports stereo. DxgiOutputDesc Describes an output or physical connection between the adapter (video card) and a device. DxgiPoint Defines the x- and y- coordinates of a point. DxgiRational Represents a rational number. DxgiRect Defines the coordinates of the upper-left and lower-right corners of a rectangle. DxgiSampleDesc Describes multi-sampling parameters for a resource. DxgiSharedResource Represents a handle to a shared resource. DxgiSurfaceDesc Describes a surface. DxgiSwapChainDesc Describes a swap chain. DxgiSwapChainDesc1 Describes a swap chain. DxgiSwapChainFullscreenDesc Describes full-screen mode for a swap chain. Interfaces IDxgiReleasable Defines a method to release the managed reference to the COM interface. Enums DxgiAdapterType Identifies the type of DXGI adapter. DxgiAlphaMode Identifies the alpha value, transparency behavior, of a surface. DxgiComputePreemptionGranularity Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current compute task. DxgiCpuAccess CPU data access patterns. DxgiCreateFactoryOptions Options for factory creation. DxgiEnumModes Options for enumerating display modes. DxgiFormat Resource data formats which includes fully-typed and typeless formats. DxgiGraphicsPreemptionGranularity Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current graphics rendering task. DxgiMapOptions CPU read-write options. DxgiModeRotation Indicate how the back buffers should be rotated to fit the physical rotation of a monitor. DxgiModeScaling Indicate how an image is stretched to fit a given monitor's resolution. DxgiModeScanlineOrder Indicate the method the raster uses to create an image on a surface. DxgiOfferResourcePriority Identifies the importance of a resource’s content. DxgiPresentOptions Options for presenting frames to the output. DxgiResidency Indicates the memory location of a resource. DxgiResourceEvictionPriority Determines when a resource can be evicted from memory. DxgiScaling Identifies resize behavior when the back-buffer size does not match the size of the target output. DxgiSharedResourceAccess The shared resource accesses options. DxgiSwapChainOptions Options for swap-chain behavior. DxgiSwapEffect Options for handling pixels in a display surface. DxgiUsages Surface and resource creation options. DxgiWindowAssociationOptions Options for window association."
  },
  "api/JeremyAnsel.DirectX.Dxgi.IDxgiReleasable.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.IDxgiReleasable.html",
    "title": "Interface IDxgiReleasable",
    "keywords": "Interface IDxgiReleasable Defines a method to release the managed reference to the COM interface. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public interface IDxgiReleasable Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources. Declaration void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM interface. Declaration void Release()"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.html",
    "title": "Enum DxgiWindowAssociationOptions",
    "keywords": "Enum DxgiWindowAssociationOptions Options for window association. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiWindowAssociationOptions Fields Name Description NoAltEnter Prevent DXGI from responding to an alt-enter sequence. None No option. NoPrintScreen Prevent DXGI from responding to a print-screen key. NoWindowChanges Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiUtils.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiUtils.html",
    "title": "Class DxgiUtils",
    "keywords": "Class DxgiUtils Utility methods. Inheritance Object DxgiUtils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public static class DxgiUtils Methods | Improve this Doc View Source DisposeAndNull<T>(ref T) Immediately releases the unmanaged resources. Declaration public static void DisposeAndNull<T>(ref T o) where T : class, IDxgiReleasable Parameters Type Name Description T o The object. Type Parameters Name Description T A releasable type. | Improve this Doc View Source ReleaseAndNull<T>(ref T) Releases the managed reference to the COM interface. Declaration public static void ReleaseAndNull<T>(ref T o) where T : class, IDxgiReleasable Parameters Type Name Description T o The COM interface. Type Parameters Name Description T A releasable type."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiUsages.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiUsages.html",
    "title": "Enum DxgiUsages",
    "keywords": "Enum DxgiUsages Surface and resource creation options. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiUsages Fields Name Description BackBuffer The surface or resource is used as a back buffer. DiscardOnPresent This flag is for internal use only. ReadOnly Use the surface or resource for reading only. RenderTargetOutput Use the surface or resource as an output render target. ShaderInput Use the surface or resource as an input to a shader. Shared Share the surface or resource. UnorderedAcess Use the surface or resource for unordered access."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect.html",
    "title": "Enum DxgiSwapEffect",
    "keywords": "Enum DxgiSwapEffect Options for handling pixels in a display surface. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiSwapEffect Fields Name Description Discard Use this flag to specify the bit-block transfer model and to specify that DXGI discard the contents of the back buffer. This flag is valid for a swap chain with more than one back buffer, although, applications only have read and write access to buffer 0. Use this flag to enable the display driver to select the most efficient presentation technique for the swap chain. FlipSequential Use this flag to specify the flip presentation model and to specify that DXGI persist the contents of the back buffer. This flag cannot be used with multisampling. Sequential Use this flag to specify the bit-block transfer model and to specify that DXGI persist the contents of the back buffer. Use this option to present the contents of the swap chain in order, from the first buffer (buffer 0) to the last buffer. This flag cannot be used with multisampling."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.html",
    "title": "Enum DxgiSwapChainOptions",
    "keywords": "Enum DxgiSwapChainOptions Options for swap-chain behavior. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiSwapChainOptions Fields Name Description AllowModeSwitch Set this flag to enable an application to switch modes. When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window. DisplayOnly Set this flag to restrict presented content to the local displays. Therefore, the presented content is not accessible via remote accessing or through the desktop duplication APIs. This flag supports the window content protection features of Windows. Applications can use this flag to protect their own onscreen window content from being captured or copied through a specific set of public operating system features and APIs. ForegroundLayer Set this flag to create a swap chain in the foreground layer for multi-plane rendering. FrameLatencyWaitableObject Set this flag to create a waitable object you can use to ensure rendering does not begin while a frame is still being presented. FullscreenVideo Full screen video. GdiCompatible Set this flag to enable an application to render using GDI on a swap chain or a surface. None No option. NonPrerotated Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor. Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. RestrictedContent Set this flag to indicate that the swap chain might contain protected content; therefore, the operating system supports the creation of the swap chain only when driver and hardware protection is used. If the driver and hardware do not support content protection, the call to create a resource for the swap chain fails. RestrictSharedResourceDriver Set this flag to indicate that shared resources that are created within the swap chain must be protected by using the driver’s mechanism for restricting access to shared surfaces."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.html",
    "title": "Struct DxgiSwapChainFullscreenDesc",
    "keywords": "Struct DxgiSwapChainFullscreenDesc Describes full-screen mode for a swap chain. Implements IEquatable < DxgiSwapChainFullscreenDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSwapChainFullscreenDesc : IEquatable<DxgiSwapChainFullscreenDesc> Properties | Improve this Doc View Source IsWindowed Gets or sets a value indicating whether the swap chain is in windowed mode. Declaration public bool IsWindowed { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RefreshRate Gets or sets a DxgiRational structure that describes the refresh rate in hertz. Declaration public DxgiRational RefreshRate { get; set; } Property Value Type Description DxgiRational | Improve this Doc View Source Scaling Gets or sets a member of the DxgiModeScaling enumeration that describes the scaling mode. Declaration public DxgiModeScaling Scaling { get; set; } Property Value Type Description DxgiModeScaling | Improve this Doc View Source ScanlineOrdering Gets or sets a member of the DxgiModeScanlineOrder enumeration that describes the scan-line drawing mode. Declaration public DxgiModeScanlineOrder ScanlineOrdering { get; set; } Property Value Type Description DxgiModeScanlineOrder Methods | Improve this Doc View Source Equals(DxgiSwapChainFullscreenDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSwapChainFullscreenDesc other) Parameters Type Name Description DxgiSwapChainFullscreenDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiSwapChainFullscreenDesc, DxgiSwapChainFullscreenDesc) Compares two DxgiSwapChainFullscreenDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSwapChainFullscreenDesc left, DxgiSwapChainFullscreenDesc right) Parameters Type Name Description DxgiSwapChainFullscreenDesc left The left DxgiSwapChainFullscreenDesc to compare. DxgiSwapChainFullscreenDesc right The right DxgiSwapChainFullscreenDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSwapChainFullscreenDesc, DxgiSwapChainFullscreenDesc) Compares two DxgiSwapChainFullscreenDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSwapChainFullscreenDesc left, DxgiSwapChainFullscreenDesc right) Parameters Type Name Description DxgiSwapChainFullscreenDesc left The left DxgiSwapChainFullscreenDesc to compare. DxgiSwapChainFullscreenDesc right The right DxgiSwapChainFullscreenDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.html",
    "title": "Struct DxgiSwapChainDesc1",
    "keywords": "Struct DxgiSwapChainDesc1 Describes a swap chain. Implements IEquatable < DxgiSwapChainDesc1 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSwapChainDesc1 : IEquatable<DxgiSwapChainDesc1> Properties | Improve this Doc View Source AlphaMode Gets or sets a member of the DxgiAlphaMode enumeration that identifies the transparency behavior of the swap-chain back buffer. Declaration public DxgiAlphaMode AlphaMode { get; set; } Property Value Type Description DxgiAlphaMode | Improve this Doc View Source BufferCount Gets or sets a value that describes the number of buffers in the swap chain. Declaration public uint BufferCount { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source BufferUsage Gets or sets a member of the DxgiUsages enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output. Declaration public DxgiUsages BufferUsage { get; set; } Property Value Type Description DxgiUsages | Improve this Doc View Source Format Gets or sets a member of the DxgiFormat enumeration describing the display format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets a value describing the resolution height. Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Options Gets or sets a member of the DxgiSwapChainOptions enumeration that describes options for swap-chain behavior. Declaration public DxgiSwapChainOptions Options { get; set; } Property Value Type Description DxgiSwapChainOptions | Improve this Doc View Source SampleDescription Gets or sets a DxgiSampleDesc structure that describes multi-sampling parameters. Declaration public DxgiSampleDesc SampleDescription { get; set; } Property Value Type Description DxgiSampleDesc | Improve this Doc View Source Scaling Gets or sets a member of the DxgiScaling enumeration describing the scaling mode. Declaration public DxgiScaling Scaling { get; set; } Property Value Type Description DxgiScaling | Improve this Doc View Source Stereo Gets or sets a value indicating whether the full-screen display mode is stereo. Declaration public bool Stereo { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SwapEffect Gets or sets a member of the DxgiSwapEffect enumeration that describes options for handling the contents of the presentation buffer after presenting a surface. Declaration public DxgiSwapEffect SwapEffect { get; set; } Property Value Type Description DxgiSwapEffect | Improve this Doc View Source Width Gets or sets a value that describes the resolution width. Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiSwapChainDesc1) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSwapChainDesc1 other) Parameters Type Name Description DxgiSwapChainDesc1 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiSwapChainDesc1, DxgiSwapChainDesc1) Compares two DxgiSwapChainDesc1 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSwapChainDesc1 left, DxgiSwapChainDesc1 right) Parameters Type Name Description DxgiSwapChainDesc1 left The left DxgiSwapChainDesc1 to compare. DxgiSwapChainDesc1 right The right DxgiSwapChainDesc1 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSwapChainDesc1, DxgiSwapChainDesc1) Compares two DxgiSwapChainDesc1 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSwapChainDesc1 left, DxgiSwapChainDesc1 right) Parameters Type Name Description DxgiSwapChainDesc1 left The left DxgiSwapChainDesc1 to compare. DxgiSwapChainDesc1 right The right DxgiSwapChainDesc1 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.html",
    "title": "Struct DxgiSwapChainDesc",
    "keywords": "Struct DxgiSwapChainDesc Describes a swap chain. Implements IEquatable < DxgiSwapChainDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSwapChainDesc : IEquatable<DxgiSwapChainDesc> Properties | Improve this Doc View Source BufferCount Gets or sets a value that describes the number of buffers in the swap chain. Declaration public uint BufferCount { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source BufferDescription Gets or sets a DxgiModeDesc structure that describes the back buffer display mode. Declaration public DxgiModeDesc BufferDescription { get; set; } Property Value Type Description DxgiModeDesc | Improve this Doc View Source BufferUsage Gets or sets a member of the DxgiUsages enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output. Declaration public DxgiUsages BufferUsage { get; set; } Property Value Type Description DxgiUsages | Improve this Doc View Source IsWindowed Gets or sets a value indicating whether the output is in windowed mode. Declaration public bool IsWindowed { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Options Gets or sets a member of the DxgiSwapChainOptions enumeration that describes options for swap-chain behavior. Declaration public DxgiSwapChainOptions Options { get; set; } Property Value Type Description DxgiSwapChainOptions | Improve this Doc View Source OutputWindowHandle Gets or sets an handle to the output window. This member must not be Zero . Declaration public IntPtr OutputWindowHandle { get; set; } Property Value Type Description IntPtr | Improve this Doc View Source SampleDescription Gets or sets a DxgiSampleDesc structure that describes multi-sampling parameters. Declaration public DxgiSampleDesc SampleDescription { get; set; } Property Value Type Description DxgiSampleDesc | Improve this Doc View Source SwapEffect Gets or sets a member of the DxgiSwapEffect enumeration that describes options for handling the contents of the presentation buffer after presenting a surface. Declaration public DxgiSwapEffect SwapEffect { get; set; } Property Value Type Description DxgiSwapEffect Methods | Improve this Doc View Source Equals(DxgiSwapChainDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSwapChainDesc other) Parameters Type Name Description DxgiSwapChainDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiSwapChainDesc, DxgiSwapChainDesc) Compares two DxgiSwapChainDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSwapChainDesc left, DxgiSwapChainDesc right) Parameters Type Name Description DxgiSwapChainDesc left The left DxgiSwapChainDesc to compare. DxgiSwapChainDesc right The right DxgiSwapChainDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSwapChainDesc, DxgiSwapChainDesc) Compares two DxgiSwapChainDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSwapChainDesc left, DxgiSwapChainDesc right) Parameters Type Name Description DxgiSwapChainDesc left The left DxgiSwapChainDesc to compare. DxgiSwapChainDesc right The right DxgiSwapChainDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.html",
    "title": "Enum D3D11BlendOperation",
    "keywords": "Enum D3D11BlendOperation RGB or alpha blending operation. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11BlendOperation Fields Name Description Add Add source 1 and source 2. Maximum Find the maximum of source 1 and source 2. Mininum Find the minimum of source 1 and source 2. None No operation. ReverseSubtract Subtract source 2 from source 1. Subtract Subtract source 1 from source 2."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.html",
    "title": "Struct D3D11BlendDesc",
    "keywords": "Struct D3D11BlendDesc Describes the blend state that you use in a call to CreateBlendState(D3D11BlendDesc) to create a blend-state object. Implements IEquatable < D3D11BlendDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BlendDesc : IEquatable<D3D11BlendDesc> Properties | Improve this Doc View Source Default Gets default blend-state values. Declaration public static D3D11BlendDesc Default { get; } Property Value Type Description D3D11BlendDesc | Improve this Doc View Source IsAlphaToCoverageEnabled Gets or sets a value indicating whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target. Declaration public bool IsAlphaToCoverageEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsIndependentBlendEnabled Gets or sets a value indicating whether to enable independent blending in simultaneous render targets. Declaration public bool IsIndependentBlendEnabled { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11BlendDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BlendDesc other) Parameters Type Name Description D3D11BlendDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source GetRenderTargets() Gets an array of D3D11RenderTargetBlendDesc structures that describe the blend states for render targets. Declaration public D3D11RenderTargetBlendDesc[] GetRenderTargets() Returns Type Description D3D11RenderTargetBlendDesc [] An array of D3D11RenderTargetBlendDesc structures. | Improve this Doc View Source SetRenderTargets(D3D11RenderTargetBlendDesc[]) Sets an array of D3D11RenderTargetBlendDesc structures that describe the blend states for render targets. Declaration public void SetRenderTargets(D3D11RenderTargetBlendDesc[] blendDescs) Parameters Type Name Description D3D11RenderTargetBlendDesc [] blendDescs The blend states descriptions. Operators | Improve this Doc View Source Equality(D3D11BlendDesc, D3D11BlendDesc) Compares two D3D11BlendDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BlendDesc left, D3D11BlendDesc right) Parameters Type Name Description D3D11BlendDesc left The left D3D11BlendDesc to compare. D3D11BlendDesc right The right D3D11BlendDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BlendDesc, D3D11BlendDesc) Compares two D3D11BlendDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BlendDesc left, D3D11BlendDesc right) Parameters Type Name Description D3D11BlendDesc left The left D3D11BlendDesc to compare. D3D11BlendDesc right The right D3D11BlendDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10DriverType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10DriverType.html",
    "title": "Enum D3D10DriverType",
    "keywords": "Enum D3D10DriverType The device-driver type. Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public enum D3D10DriverType Fields Name Description Hardware A hardware device; commonly called a HAL device. Null A NULL device; which is a reference device without render capability. Reference A reference device; commonly called a REF device. Software Reserved for later use. Warp A WARP driver, which is a high-performance software rasterizer. The rasterizer supports feature level 9_1 through level 10.1 with a high performance software implementation when hardware is not available."
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10Device1.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10Device1.html",
    "title": "Class D3D10Device1",
    "keywords": "Class D3D10Device1 The device interface represents a virtual adapter for Direct3D 10.1; it is used to perform rendering and create Direct3D resources. Inheritance Object D3D10Device1 Implements IDisposable ID3D10Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public sealed class D3D10Device1 : IDisposable, ID3D10Releasable Properties | Improve this Doc View Source CreationOptions Gets the options used during the call to create the device. Declaration public D3D10CreateDeviceOptions CreationOptions { get; } Property Value Type Description D3D10CreateDeviceOptions | Improve this Doc View Source FeatureLevel Gets the feature level of the hardware device. Declaration public D3D10FeatureLevel FeatureLevel { get; } Property Value Type Description D3D10FeatureLevel | Improve this Doc View Source Handle Gets an handle representing the D3D10 object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source CreateDevice(Object, D3D10DriverType, D3D10CreateDeviceOptions, D3D10FeatureLevel) Create a Direct3D 10.1 device that represents the display adapter. Declaration public static D3D10Device1 CreateDevice(object adapter, D3D10DriverType driverType, D3D10CreateDeviceOptions options, D3D10FeatureLevel featureLevel) Parameters Type Name Description Object adapter Pointer to the display adapter when creating a hardware device; otherwise set this parameter to NULL. D3D10DriverType driverType The device-driver type. D3D10CreateDeviceOptions options Device creation options. D3D10FeatureLevel featureLevel The version of hardware that is available for acceleration. Returns Type Description D3D10Device1 D3D10Device1 | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D3D10 object. Declaration public void Dispose() | Improve this Doc View Source GetDeviceRemovedReason() Gets the reason why the device was removed. Declaration public uint GetDeviceRemovedReason() Returns Type Description UInt32 UInt32 | Improve this Doc View Source OpenSharedResource(IntPtr, Guid) Give a device access to a shared resource created on a different Direct3d device. Declaration public object OpenSharedResource(IntPtr resourceHandle, Guid returnedInterface) Parameters Type Name Description IntPtr resourceHandle A resource handle. Guid returnedInterface The globally unique identifier (GUID) for the resource interface. Returns Type Description Object The resource we are gaining access to. | Improve this Doc View Source Release() Releases the managed reference to the COM the interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D3D10Device1 to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D3D10Device1 value) Parameters Type Name Description D3D10Device1 value A D3D10 device. Returns Type Description Boolean A boolean Implements System.IDisposable ID3D10Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10CreateDeviceOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10CreateDeviceOptions.html",
    "title": "Enum D3D10CreateDeviceOptions",
    "keywords": "Enum D3D10CreateDeviceOptions Device creation options. Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax [Flags] public enum D3D10CreateDeviceOptions Fields Name Description AllowNullFromMap Return a NULL pointer instead of triggering an exception on memory exhaustion during invocations to Map. Without this flag an exception will be raised on memory exhaustion. BgraSupport Causes device creation to fail if BGRA support is not available. Debug Create a device that supports the debug layer. Debuggable Causes the device and driver to keep information that you can use for shader debugging. The exact impact from this flag will vary from driver to driver. To use this flag, you must have D3D11_1SDKLayers.dll installed; otherwise, device creation fails. The created device supports the debug layer. None No option. PreventAlteringLayerSettingsFromRegistry Causes the Direct3D runtime to ignore registry settings that turn on the debug layer. PreventInternalThreadingOptimizations Prevents multiple threads from being created. When this flag is used with a WARP device, no additional threads will be created by WARP and all rasterization will occur on the calling thread. This flag is not recommended for general use. SingleThreaded Use this flag if an application will only be calling D3D10 from a single thread. If this flag is not specified, the default behavior of D3D10 is to enter a lock during each API call to prevent multiple threads altering internal state. By using this flag no locks will be taken which can slightly increase performance, but could result in undefine behavior if D3D10 is called from multiple threads. StrictValidation Reserved. This flag is currently not supported. Do not use. SwitchToRef Create both a software (REF) and hardware (HAL) version of the device simultaneously, which allows an application to switch to a reference device to enable debugging."
  },
  "api/JeremyAnsel.DirectX.D2D1.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.html",
    "title": "Namespace JeremyAnsel.DirectX.D2D1",
    "keywords": "Namespace JeremyAnsel.DirectX.D2D1 Classes D2D1Bitmap Root bitmap resource, linearly scaled on a draw call. D2D1BitmapBrush A bitmap brush allows a bitmap to be used to fill a geometry. D2D1BitmapRenderTarget Renders to an intermediate texture created by the CreateCompatibleRenderTarget() method. D2D1Brush The root brush interface. All brushes can be used to fill or pen a geometry. D2D1Constants D2D1 constants. D2D1DCRenderTarget Issues drawing commands to a GDI device context. D2D1DrawingStateBlock Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options. D2D1EllipseGeometry Represents an ellipse. D2D1Error D2D1 error codes. D2D1Factory Creates Direct2D resources. D2D1Geometry Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes. D2D1GeometryGroup Represents a composite geometry, composed of other D2D1Geometry objects. D2D1GeometrySink Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves. D2D1GradientStopCollection Represents an collection of D2D1GradientStop objects for linear and radial gradient brushes. D2D1HwndRenderTarget Renders drawing instructions to a window. D2D1Image Represents a producer of pixels that can fill an arbitrary 2D plane. D2D1Layer Represents the backing store required to render a layer. D2D1LinearGradientBrush Paints an area with a linear gradient. D2D1Mesh Represents a set of vertices that form a list of triangles. D2D1PathGeometry Represents a complex shape that may be composed of arcs, curves, and lines. D2D1RadialGradientBrush Paints an area with a radial gradient. D2D1RectangleGeometry Describes a two-dimensional rectangle. D2D1RenderTarget Represents an object that can receive drawing commands. D2D1Resource The root interface for all resources in D2D. D2D1RoundedRectangleGeometry Describes a rounded rectangle. D2D1SimplifiedGeometrySink Describes a geometric path that does not contain quadratic bezier curves or arcs. D2D1SolidColorBrush Paints an area with a solid color. D2D1StrokeStyle Describes the caps, miter limit, line join, and dash information for a stroke. D2D1TessellationSink Populates an D2D1Mesh object with triangles. D2D1TransformedGeometry Represents a geometry that has been transformed. D2D1Utils Utility methods. Structs D2D1ArcSegment Describes an elliptical arc between two points. D2D1BezierSegment Represents a cubic bezier segment drawn between two points. D2D1BitmapBrushProperties Describes the extend modes and the interpolation mode of an D2D1BitmapBrush . D2D1BitmapProperties Describes the pixel format and dpi of a bitmap. D2D1BrushProperties Describes the opacity and transformation of a brush. D2D1ColorF Describes the red, green, blue, and alpha components of a color. D2D1DrawingStateDescription Describes the drawing state of a render target. D2D1Ellipse Contains the center point, x-radius, and y-radius of an ellipse. D2D1FactoryOptions Contains the debugging level of an D2D1Factory object. D2D1GradientStop Contains the position and color of a gradient stop. D2D1HwndRenderTargetProperties Contains the HWND, pixel size, and presentation options for an D2D1HwndRenderTarget . D2D1LayerParameters Contains the content bounds, mask information, opacity settings, and other options for a layer resource. D2D1LinearGradientBrushProperties Contains the starting point and endpoint of the gradient axis for an D2D1LinearGradientBrush . D2D1Matrix3X2F Represents a 3-by-2 matrix. D2D1Matrix4X3F Represents a 4-by-3 matrix. D2D1Matrix4X4F Represents a 4-by-4 matrix. D2D1Matrix5X4F Represents a 5-by-4 matrix. D2D1PixelFormat Contains the data format and alpha mode for a bitmap or render target. D2D1Point2F Represents an x-coordinate and y-coordinate pair in two-dimensional space. D2D1Point2L Represents an x-coordinate and y-coordinate pair in two-dimensional space. D2D1Point2U Represents an x-coordinate and y-coordinate pair in two-dimensional space. D2D1QuadraticBezierSegment Contains the control point and end point for a quadratic Bezier segment. D2D1RadialGradientBrushProperties Contains the gradient origin offset and the size and position of the gradient ellipse for an D2D1RadialGradientBrush . D2D1RectF Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). D2D1RectL Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). D2D1RectU Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). D2D1RenderTargetProperties Contains rendering options (hardware or software), pixel format, DPI information, remoting options, and Direct3D support requirements for a render target. D2D1RoundedRect Contains the dimensions and corner radii of a rounded rectangle. D2D1SizeF Stores an ordered pair of floats, typically the width and height of a rectangle. D2D1SizeU Stores an ordered pair of integers, typically the width and height of a rectangle. D2D1StrokeStyleProperties Describes the stroke that outlines a shape. D2D1Triangle Contains the three vertices that describe a triangle. D2D1Vector2F A vector of 2 FLOAT values (x, y). D2D1Vector3F A vector of 3 FLOAT values (x, y, z). D2D1Vector4F A vector of 4 FLOAT values (x, y, z, w). Interfaces ID2D1Releasable Defines a method to release the managed reference to the COM interface. Enums D2D1AlphaMode Qualifies how alpha is to be treated in a bitmap or render target containing alpha. D2D1AntialiasMode Specifies how the edges of nontext primitives are rendered. D2D1ArcSize Specifies whether an arc should be greater than 180 degrees. D2D1BitmapInterpolationMode Specifies the algorithm that is used when images are scaled or rotated. D2D1CapStyle Describes the shape at the end of a line or segment. D2D1CombineMode This enumeration describes the type of combine operation to be performed. D2D1CompatibleRenderTargetOptions Specifies additional features supportable by a compatible render target when it is created. D2D1DashStyle Describes the sequence of dashes and gaps in a stroke. D2D1DCInitializeMode Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target. D2D1DebugLevel Indicates the type of information provided by the Direct2D Debug Layer. D2D1DrawTextOptions Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. D2D1ExtendMode Specifies how a brush paints areas outside of its normal content area. D2D1FactoryType Specifies the threading model of the created factory and all of its derived resources. D2D1FeatureLevel Describes the minimum DirectX support required for hardware rendering by a render target. D2D1FigureBegin Indicates whether the given figure is filled or hollow. D2D1FigureEnd Indicates whether the figure is open or closed on its end point. D2D1FillMode Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry. D2D1Gamma Specifies which gamma is used for interpolation. D2D1GeometryRelation Describes how one geometry object is spatially related to another geometry object. D2D1GeometrySimplificationOption Specifies how simple the output of a simplified geometry sink should be. D2D1InterpolationModeDefinition This defines the superset of interpolation mode supported by D2D APIs and built-in effects D2D1KnownColor Defines a set of constants that represents known colors and provides convenience methods for instantiating different colors. D2D1LayerOptions Specifies options that can be applied when a layer resource is applied to create a layer. D2D1LineJoin Describes the shape that joins two lines or segments. D2D1OpacityMaskContent Describes whether an opacity mask contains graphics or text. Direct2D uses this information to determine which gamma space to use when blending the opacity mask. D2D1PathSegmentOptions Indicates whether a segment should be stroked and whether the join between this segment and the previous one should be smooth. D2D1PresentOptions Describes how a render target behaves when it presents its content. D2D1RenderTargetType Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode. D2D1RenderTargetUsages Describes how a render target is remoted and whether it should be GDI-compatible. D2D1SweepDirection Defines the direction that an elliptical arc is drawn. D2D1TextAntialiasMode Describes the antialiasing mode used for drawing text. D2D1WindowStates Describes whether a window is occluded."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Vector2F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Vector2F.html",
    "title": "Struct D2D1Vector2F",
    "keywords": "Struct D2D1Vector2F A vector of 2 FLOAT values (x, y). Implements IEquatable < D2D1Vector2F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Vector2F : IEquatable<D2D1Vector2F> Constructors | Improve this Doc View Source D2D1Vector2F(Single, Single) Initializes a new instance of the D2D1Vector2F struct. Declaration public D2D1Vector2F(float x, float y) Parameters Type Name Description Single x The x value of the vector. Single y The y value of the vector. Properties | Improve this Doc View Source X Gets or sets the x value of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y value of the vector. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Vector2F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Vector2F other) Parameters Type Name Description D2D1Vector2F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Vector2F, D2D1Vector2F) Compares two D2D1Vector2F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Vector2F left, D2D1Vector2F right) Parameters Type Name Description D2D1Vector2F left The left D2D1Vector2F to compare. D2D1Vector2F right The right D2D1Vector2F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Vector2F, D2D1Vector2F) Compares two D2D1Vector2F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Vector2F left, D2D1Vector2F right) Parameters Type Name Description D2D1Vector2F left The left D2D1Vector2F to compare. D2D1Vector2F right The right D2D1Vector2F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Utils.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Utils.html",
    "title": "Class D2D1Utils",
    "keywords": "Class D2D1Utils Utility methods. Inheritance Object D2D1Utils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public static class D2D1Utils Methods | Improve this Doc View Source DisposeAndNull<T>(ref T) Immediately releases the unmanaged resources. Declaration public static void DisposeAndNull<T>(ref T o) where T : class, ID2D1Releasable Parameters Type Name Description T o The object. Type Parameters Name Description T A releasable type. | Improve this Doc View Source ReleaseAndNull<T>(ref T) Releases the managed reference to the COM interface. Declaration public static void ReleaseAndNull<T>(ref T o) where T : class, ID2D1Releasable Parameters Type Name Description T o The COM interface. Type Parameters Name Description T A releasable type."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Triangle.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Triangle.html",
    "title": "Struct D2D1Triangle",
    "keywords": "Struct D2D1Triangle Contains the three vertices that describe a triangle. Implements IEquatable < D2D1Triangle > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Triangle : IEquatable<D2D1Triangle> Constructors | Improve this Doc View Source D2D1Triangle(D2D1Point2F, D2D1Point2F, D2D1Point2F) Initializes a new instance of the D2D1Triangle struct. Declaration public D2D1Triangle(D2D1Point2F point1, D2D1Point2F point2, D2D1Point2F point3) Parameters Type Name Description D2D1Point2F point1 The first vertex of a triangle. D2D1Point2F point2 The second vertex of a triangle. D2D1Point2F point3 The third vertex of a triangle. Properties | Improve this Doc View Source Point1 Gets or sets the first vertex of a triangle. Declaration public D2D1Point2F Point1 { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Point2 Gets or sets the second vertex of a triangle. Declaration public D2D1Point2F Point2 { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Point3 Gets or sets the third vertex of a triangle. Declaration public D2D1Point2F Point3 { get; set; } Property Value Type Description D2D1Point2F Methods | Improve this Doc View Source Equals(D2D1Triangle) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Triangle other) Parameters Type Name Description D2D1Triangle other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Triangle, D2D1Triangle) Compares two D2D1Triangle objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Triangle left, D2D1Triangle right) Parameters Type Name Description D2D1Triangle left The left D2D1Triangle to compare. D2D1Triangle right The right D2D1Triangle to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Triangle, D2D1Triangle) Compares two D2D1Triangle objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Triangle left, D2D1Triangle right) Parameters Type Name Description D2D1Triangle left The left D2D1Triangle to compare. D2D1Triangle right The right D2D1Triangle to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByte4.html",
    "title": "Struct XMByte4",
    "keywords": "Struct XMByte4 A 4D vector where each component is a signed integer, 8-bits (1 byte) in length. Implements IEquatable < XMByte4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMByte4 : IEquatable<XMByte4> Constructors | Improve this Doc View Source XMByte4(SByte, SByte, SByte, SByte) Initializes a new instance of the XMByte4 struct. Declaration public XMByte4(sbyte x, sbyte y, sbyte z, sbyte w) Parameters Type Name Description SByte x The x-coordinate of the vector. SByte y The y-coordinate of the vector. SByte z The z-coordinate of the vector. SByte w The w-coordinate of the vector. | Improve this Doc View Source XMByte4(SByte[]) Initializes a new instance of the XMByte4 struct. Declaration public XMByte4(sbyte[] array) Parameters Type Name Description SByte [] array The components of the vector. | Improve this Doc View Source XMByte4(Single, Single, Single, Single) Initializes a new instance of the XMByte4 struct. Declaration public XMByte4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMByte4(Single[]) Initializes a new instance of the XMByte4 struct. Declaration public XMByte4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMByte4(UInt32) Initializes a new instance of the XMByte4 struct. Declaration public XMByte4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public sbyte W { get; set; } Property Value Type Description SByte | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public sbyte X { get; set; } Property Value Type Description SByte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public sbyte Y { get; set; } Property Value Type Description SByte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public sbyte Z { get; set; } Property Value Type Description SByte Methods | Improve this Doc View Source Equals(XMByte4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMByte4 other) Parameters Type Name Description XMByte4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMByte4 . Declaration public static XMByte4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByte4 A XMByte4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMByte4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMByte4, XMByte4) Compares two XMByte4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMByte4 left, XMByte4 right) Parameters Type Name Description XMByte4 left The left XMByte4 to compare. XMByte4 right The right XMByte4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMByte4 to XMVector) Converts a XMByte4 to a XMVector . Declaration public static implicit operator XMVector(XMByte4 value) Parameters Type Name Description XMByte4 value A XMByte4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMByte4) Converts a XMVector to a XMByte4 . Declaration public static implicit operator XMByte4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByte4 A XMByte4 . | Improve this Doc View Source Inequality(XMByte4, XMByte4) Compares two XMByte4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMByte4 left, XMByte4 right) Parameters Type Name Description XMByte4 left The left XMByte4 to compare. XMByte4 right The right XMByte4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByte2.html",
    "title": "Struct XMByte2",
    "keywords": "Struct XMByte2 A 2D vector where each component is a signed integer, 8-bits (1 byte) in length. Implements IEquatable < XMByte2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMByte2 : IEquatable<XMByte2> Constructors | Improve this Doc View Source XMByte2(SByte, SByte) Initializes a new instance of the XMByte2 struct. Declaration public XMByte2(sbyte x, sbyte y) Parameters Type Name Description SByte x The x-coordinate of the vector. SByte y The y-coordinate of the vector. | Improve this Doc View Source XMByte2(SByte[]) Initializes a new instance of the XMByte2 struct. Declaration public XMByte2(sbyte[] array) Parameters Type Name Description SByte [] array The components of the vector. | Improve this Doc View Source XMByte2(Single, Single) Initializes a new instance of the XMByte2 struct. Declaration public XMByte2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMByte2(Single[]) Initializes a new instance of the XMByte2 struct. Declaration public XMByte2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMByte2(UInt16) Initializes a new instance of the XMByte2 struct. Declaration public XMByte2(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public sbyte X { get; set; } Property Value Type Description SByte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public sbyte Y { get; set; } Property Value Type Description SByte Methods | Improve this Doc View Source Equals(XMByte2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMByte2 other) Parameters Type Name Description XMByte2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMByte2 . Declaration public static XMByte2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByte2 A XMByte2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMByte2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMByte2, XMByte2) Compares two XMByte2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMByte2 left, XMByte2 right) Parameters Type Name Description XMByte2 left The left XMByte2 to compare. XMByte2 right The right XMByte2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMByte2 to XMVector) Converts a XMByte2 to a XMVector . Declaration public static implicit operator XMVector(XMByte2 value) Parameters Type Name Description XMByte2 value A XMByte2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMByte2) Converts a XMVector to a XMByte2 . Declaration public static implicit operator XMByte2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByte2 A XMByte2 . | Improve this Doc View Source Inequality(XMByte2, XMByte2) Compares two XMByte2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMByte2 left, XMByte2 right) Parameters Type Name Description XMByte2 left The left XMByte2 to compare. XMByte2 right The right XMByte2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.Half.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.Half.html",
    "title": "Struct Half",
    "keywords": "Struct Half An alias to ushort packed with a 16-bit floating-point number consisting of a sign bit, a 5-bit biased exponent, and a 10-bit mantissa. Implements IEquatable < Half > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct Half : IEquatable<Half> Remarks The Half data type is equivalent to the IEEE 754 binary16 format. Methods | Improve this Doc View Source Equals(Half) Determines whether the specified object is equal to the current object. Declaration public bool Equals(Half other) Parameters Type Name Description Half other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Half, Half) Compares two Half objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(Half left, Half right) Parameters Type Name Description Half left The left Half to compare. Half right The right Half to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Explicit(Double to Half) Converts a Double value to a Half value. Declaration public static explicit operator Half(double value) Parameters Type Name Description Double value The Double value. Returns Type Description Half The Half value. | Improve this Doc View Source Explicit(Single to Half) Converts a Single value to a Half value. Declaration public static explicit operator Half(float value) Parameters Type Name Description Single value The Single value. Returns Type Description Half The Half value. | Improve this Doc View Source Implicit(Half to Double) Converts a Half value to a Double value. Declaration public static implicit operator double (Half value) Parameters Type Name Description Half value The Half value. Returns Type Description Double The Double value. | Improve this Doc View Source Implicit(Half to Single) Converts a Half value to a Single value. Declaration public static implicit operator float (Half value) Parameters Type Name Description Half value The Half value. Returns Type Description Single The Single value. | Improve this Doc View Source Inequality(Half, Half) Compares two Half objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(Half left, Half right) Parameters Type Name Description Half left The left Half to compare. Half right The right Half to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.html",
    "title": "Namespace JeremyAnsel.DirectX.DXMath.Collision",
    "keywords": "Namespace JeremyAnsel.DirectX.DXMath.Collision Classes TriangleTest Triangle test functions. Structs BoundingBox A bounding axis-aligned object. BoundingFrustum A bounding frustum object. BoundingOrientedBox An oriented bounding box object. BoundingSphere A bounding sphere object. Enums ContainmentType Indicates whether an object contains another object. PlaneIntersectionType Indicates whether an object intersects a plane."
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.TriangleTest.html",
    "title": "Class TriangleTest",
    "keywords": "Class TriangleTest Triangle test functions. Inheritance Object TriangleTest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class TriangleTest Methods | Improve this Doc View Source ContainedBy(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Tests whether a triangle is contained within six planes (typically a frustum). Declaration public static ContainmentType ContainedBy(XMVector v0, XMVector v1, XMVector v2, XMVector plane0, XMVector plane1, XMVector plane2, XMVector plane3, XMVector plane4, XMVector plane5) Parameters Type Name Description XMVector v0 The first vector defining the triangle. XMVector v1 The second vector defining the triangle. XMVector v2 The third vector defining the triangle. XMVector plane0 A vector defining the first plane. XMVector plane1 A vector defining the second plane. XMVector plane2 A vector defining the third plane. XMVector plane3 A vector defining the fourth plane. XMVector plane4 A vector defining the fifth plane. XMVector plane5 A vector defining the sixth plane. Returns Type Description ContainmentType A ContainmentType value indicating whether the triangle is contained within the planes. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector, XMVector) Tests whether a triangle and a plane intersect. Declaration public static PlaneIntersectionType Intersects(XMVector v0, XMVector v1, XMVector v2, XMVector plane) Parameters Type Name Description XMVector v0 The first vector defining a triangle. XMVector v1 The second vector defining a triangle. XMVector v2 The third vector defining a triangle. XMVector plane A vector defining a plane. Returns Type Description PlaneIntersectionType A PlaneIntersectionType value indicating whether the triangle intersects the plane. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector, XMVector, XMVector) Test whether a triangle intersects with a ray. Declaration public static bool Intersects(XMVector origin, XMVector direction, XMVector v0, XMVector v1, XMVector v2) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. XMVector v0 The first vector defining the triangle. XMVector v1 The second vector defining the triangle. XMVector v2 The third vector defining the triangle. Returns Type Description Boolean A boolean value indicating whether the triangle intersects with the ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Test whether two triangles intersect. Declaration public static bool Intersects(XMVector a0, XMVector a1, XMVector a2, XMVector b0, XMVector b1, XMVector b2) Parameters Type Name Description XMVector a0 The first vector defining triangle A. XMVector a1 The second vector defining triangle A. XMVector a2 The third vector defining triangle A. XMVector b0 The first vector defining triangle B. XMVector b1 The second vector defining triangle B. XMVector b2 The third vector defining triangle B. Returns Type Description Boolean A boolean value indicating whether the triangles intersect. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector, XMVector, XMVector, out Single) Test whether a triangle intersects with a ray. Declaration public static bool Intersects(XMVector origin, XMVector direction, XMVector v0, XMVector v1, XMVector v2, out float distance) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. XMVector v0 The first vector defining the triangle. XMVector v1 The second vector defining the triangle. XMVector v2 The third vector defining the triangle. Single distance The distance along the ray where the intersection occurs. Returns Type Description Boolean A boolean value indicating whether the triangle intersects with the ray. | Improve this Doc View Source Intersects(XMVector, XMVector, XMVector, XMVector, XMVector, out Single, out Single, out Single) Test whether a triangle intersects with a ray. Declaration public static bool Intersects(XMVector origin, XMVector direction, XMVector v0, XMVector v1, XMVector v2, out float coordinateU, out float coordinateV, out float distance) Parameters Type Name Description XMVector origin The origin of the ray. XMVector direction The direction of the ray. XMVector v0 The first vector defining the triangle. XMVector v1 The second vector defining the triangle. XMVector v2 The third vector defining the triangle. Single coordinateU The first barycentric hit coordinate. Single coordinateV The second barycentric hit coordinate. Single distance The distance along the ray where the intersection occurs. Returns Type Description Boolean A boolean value indicating whether the triangle intersects with the ray."
  },
  "api/JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.Collision.PlaneIntersectionType.html",
    "title": "Enum PlaneIntersectionType",
    "keywords": "Enum PlaneIntersectionType Indicates whether an object intersects a plane. Namespace : JeremyAnsel.DirectX.DXMath.Collision Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public enum PlaneIntersectionType Fields Name Description Back The object is behind the plane. Front The object is in front of the plane. Intersecting The object intersects the plane."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.html",
    "title": "Class DxgiSwapChain2",
    "keywords": "Class DxgiSwapChain2 Provides presentation capabilities that are enhanced from IDXGISwapChain . These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSwapChain2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSwapChain2 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source BackgroundColor Gets or sets the background color of the swap chain. Declaration public DxgiColorRgba BackgroundColor { get; set; } Property Value Type Description DxgiColorRgba | Improve this Doc View Source Description Gets a description of the swap chain. Declaration public DxgiSwapChainDesc1 Description { get; } Property Value Type Description DxgiSwapChainDesc1 | Improve this Doc View Source FrameStatistics Gets performance statistics about the last render frame. Declaration public DxgiFrameStatistics FrameStatistics { get; } Property Value Type Description DxgiFrameStatistics | Improve this Doc View Source FullscreenDescription Gets a description of a full-screen swap chain. Declaration public DxgiSwapChainFullscreenDesc FullscreenDescription { get; } Property Value Type Description DxgiSwapChainFullscreenDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source IsTemporaryMonoSupported Gets a value indicating whether a swap chain supports “temporary mono.” Declaration public bool IsTemporaryMonoSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source LastPresentCount Gets the number of times that IDXGISwapChain::Present or IDXGISwapChain1::Present1 has been called. Declaration public uint LastPresentCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source Rotation Gets or sets the rotation of the back buffers for the swap chain. Declaration public DxgiModeRotation Rotation { get; set; } Property Value Type Description DxgiModeRotation | Improve this Doc View Source WindowHandle Gets the underlying HWND for this swap-chain object. Declaration public IntPtr WindowHandle { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source GetBuffer(UInt32, Guid) Accesses one of the swap-chain's back buffers. Declaration public object GetBuffer(uint buffer, Guid riid) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Guid riid The type of interface used to manipulate the buffer. Returns Type Description Object A pointer to a back-buffer interface. | Improve this Doc View Source GetContainingOutput() Get the output (the display monitor) that contains the majority of the client area of the target window. Declaration public DxgiOutput2 GetContainingOutput() Returns Type Description DxgiOutput2 The output interface. | Improve this Doc View Source GetFullscreenState() Get the state associated with full-screen mode. Declaration public bool GetFullscreenState() Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetFullscreenState(out DxgiOutput2) Get the state associated with full-screen mode. Declaration public bool GetFullscreenState(out DxgiOutput2 target) Parameters Type Name Description DxgiOutput2 target The output target when the mode is full screen. Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetRestrictToOutput() Gets the output (the display monitor) to which you can restrict the contents of a present operation. Declaration public DxgiOutput2 GetRestrictToOutput() Returns Type Description DxgiOutput2 The DXGIOutput2 interface for the restrict-to output. | Improve this Doc View Source GetSurface(UInt32) Accesses one of the swap-chain's back buffers. Declaration public DxgiSurface2 GetSurface(uint buffer) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Returns Type Description DxgiSurface2 A back-buffer surface. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions) Presents a frame on the display screen. Declaration public void Present(uint syncInterval, DxgiPresentOptions options) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options An integer value that contains swap-chain presentation options. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions, DxgiRect[], DxgiRect, DxgiPoint) Presents a frame on the display screen. Declaration public void Present(uint syncInterval, DxgiPresentOptions options, DxgiRect[] dirtyRects, DxgiRect scrollRect, DxgiPoint scrollOffset) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options An integer value that contains swap-chain presentation options. DxgiRect [] dirtyRects A list of updated rectangles that you update in the back buffer for the presented frame. DxgiRect scrollRect The rectangle of the previous frame from which the runtime bit-block transfers content. DxgiPoint scrollOffset The offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). | Improve this Doc View Source ResizeBuffers(UInt32, UInt32, UInt32, DxgiFormat, DxgiSwapChainOptions) Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized. Declaration public void ResizeBuffers(uint bufferCount, uint width, uint height, DxgiFormat format, DxgiSwapChainOptions options) Parameters Type Name Description UInt32 bufferCount The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. UInt32 width New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. UInt32 height New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. DxgiFormat format A DXGI_FORMAT -typed value for the new format of the back buffer. Set this value to DXGI_FORMAT_UNKNOWN to preserve the existing format of the back buffer. DxgiSwapChainOptions options The options for swap-chain behavior. | Improve this Doc View Source ResizeTarget(DxgiModeDesc) Resizes the output target. Declaration public void ResizeTarget(DxgiModeDesc targetParameters) Parameters Type Name Description DxgiModeDesc targetParameters A DXGI_MODE_DESC structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is DXGI_FORMAT_UNKNOWN , ResizeTarget uses the existing format. | Improve this Doc View Source SetFullscreenState(Boolean) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source SetFullscreenState(Boolean, DxgiOutput2) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen, DxgiOutput2 target) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. DxgiOutput2 target A pointer to an DXGIOutput2 interface for the output target that contains the swap chain. Implements System.IDisposable IDxgiReleasable Extension Methods DxgiSwapChainExtensions.GetTexture2D(DxgiSwapChain2, UInt32)"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.html",
    "title": "Struct DxgiSharedResource",
    "keywords": "Struct DxgiSharedResource Represents a handle to a shared resource. Implements IEquatable < DxgiSharedResource > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSharedResource : IEquatable<DxgiSharedResource> Properties | Improve this Doc View Source Handle Gets a handle to a shared resource. Declaration public IntPtr Handle { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Equals(DxgiSharedResource) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSharedResource other) Parameters Type Name Description DxgiSharedResource other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiSharedResource, DxgiSharedResource) Compares two DxgiSharedResource objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSharedResource left, DxgiSharedResource right) Parameters Type Name Description DxgiSharedResource left The left DxgiSharedResource to compare. DxgiSharedResource right The right DxgiSharedResource to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSharedResource, DxgiSharedResource) Compares two DxgiSharedResource objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSharedResource left, DxgiSharedResource right) Parameters Type Name Description DxgiSharedResource left The left DxgiSharedResource to compare. DxgiSharedResource right The right DxgiSharedResource to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiScaling.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiScaling.html",
    "title": "Enum DxgiScaling",
    "keywords": "Enum DxgiScaling Identifies resize behavior when the back-buffer size does not match the size of the target output. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiScaling Fields Name Description AspectRatioStretch DXGI to make the back-buffer contents scale to fit the presentation target size, while preserving the aspect ratio of the back-buffer. If the scaled back-buffer does not fill the presentation area, it will be centered with black borders. None Directs DXGI to make the back-buffer contents appear without any scaling when the presentation target size is not equal to the back-buffer size. The top edges of the back buffer and presentation target are aligned together. Stretch Directs DXGI to make the back-buffer contents scale to fit the presentation target size."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.html",
    "title": "Struct DxgiSampleDesc",
    "keywords": "Struct DxgiSampleDesc Describes multi-sampling parameters for a resource. Implements IEquatable < DxgiSampleDesc > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSampleDesc : IEquatable<DxgiSampleDesc> Constructors | Improve this Doc View Source DxgiSampleDesc(UInt32, UInt32) Initializes a new instance of the DxgiSampleDesc struct. Declaration public DxgiSampleDesc(uint count, uint quality) Parameters Type Name Description UInt32 count The number of multi-samples per pixel. UInt32 quality The image quality level. The higher the quality, the lower the performance. Properties | Improve this Doc View Source Count Gets or sets the number of multi-samples per pixel. Declaration public uint Count { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Quality Gets or sets the image quality level. The higher the quality, the lower the performance. Declaration public uint Quality { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiSampleDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSampleDesc other) Parameters Type Name Description DxgiSampleDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiSampleDesc, DxgiSampleDesc) Compares two DxgiSampleDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSampleDesc left, DxgiSampleDesc right) Parameters Type Name Description DxgiSampleDesc left The left DxgiSampleDesc to compare. DxgiSampleDesc right The right DxgiSampleDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSampleDesc, DxgiSampleDesc) Compares two DxgiSampleDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSampleDesc left, DxgiSampleDesc right) Parameters Type Name Description DxgiSampleDesc left The left DxgiSampleDesc to compare. DxgiSampleDesc right The right DxgiSampleDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.html",
    "title": "Enum DxgiResourceEvictionPriority",
    "keywords": "Enum DxgiResourceEvictionPriority Determines when a resource can be evicted from memory. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiResourceEvictionPriority Fields Name Description High The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource. Low The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. Maximum The resource is evicted from memory only if there is no other way of resolving the memory requirement. Minimum The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies. Normal The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. Unspecified Not specified."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResource3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResource3.html",
    "title": "Class DxgiResource3",
    "keywords": "Class DxgiResource3 An IDXGIResource1 interface extends the IDXGIResource interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiResource3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiResource3 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiResource3(Object) Initializes a new instance of the DxgiResource3 class. Declaration public DxgiResource3(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDxgiResource1 interface. Properties | Improve this Doc View Source EvictionPriority Gets or sets the eviction priority. Declaration public DxgiResourceEvictionPriority EvictionPriority { get; set; } Property Value Type Description DxgiResourceEvictionPriority | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source Usage Gets the expected resource usage. Declaration public DxgiUsages Usage { get; } Property Value Type Description DxgiUsages Methods | Improve this Doc View Source CreateSubresourceSurface(UInt32) Creates a sub-resource surface object. Declaration public DxgiSurface3 CreateSubresourceSurface(uint index) Parameters Type Name Description UInt32 index The index of the sub-resource surface object to enumerate. Returns Type Description DxgiSurface3 A IDXGISurface2 interface that represents the created sub-resource surface object at the position specified. | Improve this Doc View Source GetSharedHandle() Gets the handle to a shared resource. Declaration public IntPtr GetSharedHandle() Returns Type Description IntPtr A handle. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextMetrics.html",
    "title": "Struct DWriteTextMetrics",
    "keywords": "Struct DWriteTextMetrics Overall metrics associated with text after layout. All coordinates are in device independent pixels (DIPs). Implements IEquatable < DWriteTextMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteTextMetrics : IEquatable<DWriteTextMetrics> Properties | Improve this Doc View Source Height Gets the height of the formatted text. The height of an empty string is determined by the size of the default font's line height. Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source LayoutHeight Gets the initial height given to the layout. Depending on the length of the text, it may be larger or smaller than the text content height. Declaration public float LayoutHeight { get; } Property Value Type Description Single | Improve this Doc View Source LayoutWidth Gets the initial width given to the layout. Depending on whether the text was wrapped or not, it can be either larger or smaller than the text content width. Declaration public float LayoutWidth { get; } Property Value Type Description Single | Improve this Doc View Source Left Gets the left-most point of formatted text relative to layout box (excluding any glyph overhang). Declaration public float Left { get; } Property Value Type Description Single | Improve this Doc View Source LineCount Gets the total number of lines. Declaration public uint LineCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source MaxBidiReorderingDepth Gets the maximum reordering count of any line of text, used to calculate the most number of hit-testing boxes needed. If the layout has no bidirectional text or no text at all, the minimum level is 1. Declaration public uint MaxBidiReorderingDepth { get; } Property Value Type Description UInt32 | Improve this Doc View Source Top Gets the top-most point of formatted text relative to layout box (excluding any glyph overhang). Declaration public float Top { get; } Property Value Type Description Single | Improve this Doc View Source Width Gets the width of the formatted text ignoring trailing whitespace at the end of each line. Declaration public float Width { get; } Property Value Type Description Single | Improve this Doc View Source WidthIncludingTrailingWhitespace Gets the width of the formatted text taking into account the trailing whitespace at the end of each line. Declaration public float WidthIncludingTrailingWhitespace { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteTextMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteTextMetrics other) Parameters Type Name Description DWriteTextMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteTextMetrics, DWriteTextMetrics) Compares two DWriteTextMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteTextMetrics left, DWriteTextMetrics right) Parameters Type Name Description DWriteTextMetrics left The left DWriteTextMetrics to compare. DWriteTextMetrics right The right DWriteTextMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteTextMetrics, DWriteTextMetrics) Compares two DWriteTextMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteTextMetrics left, DWriteTextMetrics right) Parameters Type Name Description DWriteTextMetrics left The left DWriteTextMetrics to compare. DWriteTextMetrics right The right DWriteTextMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextLayout.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextLayout.html",
    "title": "Class DWriteTextLayout",
    "keywords": "Class DWriteTextLayout The IDWriteTextLayout interface represents a block of text after it has been fully analyzed and formatted. All coordinates are in device independent pixels (DIPs). Inheritance Object DWriteTextLayout Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteTextLayout : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source FlowDirection Gets or sets paragraph flow direction. Declaration public DWriteFlowDirection FlowDirection { get; set; } Property Value Type Description DWriteFlowDirection Remarks The flow direction must be perpendicular to the reading direction. Setting both to a vertical direction or both to horizontal yields DWRITE_E_FLOWDIRECTIONCONFLICTS when calling GetMetrics or Draw. | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object | Improve this Doc View Source IncrementalTabStop Gets or sets the incremental tab stop position. Declaration public float IncrementalTabStop { get; set; } Property Value Type Description Single | Improve this Doc View Source MaxHeight Gets or sets the layout maximum height Declaration public float MaxHeight { get; set; } Property Value Type Description Single | Improve this Doc View Source MaxWidth Gets or sets the layout maximum width Declaration public float MaxWidth { get; set; } Property Value Type Description Single | Improve this Doc View Source ParagraphAlignment Gets or sets the alignment option of paragraph relative to layout box's top and bottom edge. Declaration public DWriteParagraphAlignment ParagraphAlignment { get; set; } Property Value Type Description DWriteParagraphAlignment | Improve this Doc View Source ReadingDirection Gets or sets the paragraph reading direction. Declaration public DWriteReadingDirection ReadingDirection { get; set; } Property Value Type Description DWriteReadingDirection Remarks The flow direction must be perpendicular to the reading direction. Setting both to a vertical direction or both to horizontal yields DWRITE_E_FLOWDIRECTIONCONFLICTS when calling GetMetrics or Draw. | Improve this Doc View Source TextAlignment Gets or sets the alignment option of text relative to layout box's leading and trailing edge. Declaration public DWriteTextAlignment TextAlignment { get; set; } Property Value Type Description DWriteTextAlignment | Improve this Doc View Source WordWrapping Gets or sets the word wrapping option. Declaration public DWriteWordWrapping WordWrapping { get; set; } Property Value Type Description DWriteWordWrapping Methods | Improve this Doc View Source DetermineMinWidth() Determines the minimum possible width the layout can be set to without emergency breaking between the characters of whole words. Declaration public float DetermineMinWidth() Returns Type Description Single Single | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFontCollection() Get the font collection. Declaration public DWriteFontCollection GetFontCollection() Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetFontCollection(UInt32, out DWriteTextRange) Get the font collection where the current position is at. Declaration public DWriteFontCollection GetFontCollection(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange Text range to which this change applies. Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetFontFamilyName() Get a copy of the font family name. Declaration public string GetFontFamilyName() Returns Type Description String String | Improve this Doc View Source GetFontFamilyName(UInt32, out DWriteTextRange) Copy the font family name where the current position is at. Declaration public string GetFontFamilyName(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description String String | Improve this Doc View Source GetFontSize() Gets the font em height. Declaration public float GetFontSize() Returns Type Description Single Single | Improve this Doc View Source GetFontSize(UInt32, out DWriteTextRange) Get the font em height where the current position is at. Declaration public float GetFontSize(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description Single Single | Improve this Doc View Source GetFontStretch() Gets the font stretch. Declaration public DWriteFontStretch GetFontStretch() Returns Type Description DWriteFontStretch DWriteFontStretch | Improve this Doc View Source GetFontStretch(UInt32, out DWriteTextRange) Get the font stretch where the current position is at. Declaration public DWriteFontStretch GetFontStretch(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description DWriteFontStretch DWriteFontStretch | Improve this Doc View Source GetFontStyle() Gets the font style. Declaration public DWriteFontStyle GetFontStyle() Returns Type Description DWriteFontStyle DWriteFontStyle | Improve this Doc View Source GetFontStyle(UInt32, out DWriteTextRange) Get the font style where the current position is at. Declaration public DWriteFontStyle GetFontStyle(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description DWriteFontStyle DWriteFontStyle | Improve this Doc View Source GetFontWeight() Gets the font weight. Declaration public DWriteFontWeight GetFontWeight() Returns Type Description DWriteFontWeight DWriteFontWeight | Improve this Doc View Source GetFontWeight(UInt32, out DWriteTextRange) Get the font weight where the current position is at. Declaration public DWriteFontWeight GetFontWeight(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description DWriteFontWeight DWriteFontWeight | Improve this Doc View Source GetLineSpacing(out DWriteLineSpacingMethod, out Single, out Single) Get line spacing. Declaration public void GetLineSpacing(out DWriteLineSpacingMethod lineSpacingMethod, out float lineSpacing, out float baseline) Parameters Type Name Description DWriteLineSpacingMethod lineSpacingMethod How line height is determined. Single lineSpacing The line height, or rather distance between one baseline to another. Single baseline Distance from top of line to baseline. | Improve this Doc View Source GetLocaleName() Get a copy of the locale name. Declaration public string GetLocaleName() Returns Type Description String String | Improve this Doc View Source GetLocaleName(UInt32, out DWriteTextRange) Get the locale name where the current position is at. Declaration public string GetLocaleName(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description String String | Improve this Doc View Source GetMetrics() GetMetrics retrieves overall metrics for the formatted string. Declaration public DWriteTextMetrics GetMetrics() Returns Type Description DWriteTextMetrics DWriteTextMetrics Remarks Drawing effects like underline and strikethrough do not contribute to the text size, which is essentially the sum of advance widths and line heights. Additionally, visible swashes and other graphic adornments may extend outside the returned width and height. | Improve this Doc View Source GetOverhangMetrics() GetOverhangMetrics returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects. Declaration public DWriteOverhangMetrics GetOverhangMetrics() Returns Type Description DWriteOverhangMetrics DWriteOverhangMetrics Remarks Any underline and strikethrough do not contribute to the black box determination, since these are actually drawn by the renderer, which is allowed to draw them in any variety of styles. | Improve this Doc View Source GetStrikethrough(UInt32, out DWriteTextRange) Get the strikethrough presence where the current position is at. Declaration public bool GetStrikethrough(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description Boolean Boolean | Improve this Doc View Source GetTrimming() Get trimming options for text overflowing the layout width. Declaration public DWriteTrimming GetTrimming() Returns Type Description DWriteTrimming DWriteTrimming | Improve this Doc View Source GetTypography(UInt32, out DWriteTextRange) Get the typography setting where the current position is at. Declaration public DWriteTypography GetTypography(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description DWriteTypography DWriteTypography | Improve this Doc View Source GetUnderline(UInt32, out DWriteTextRange) Get the underline presence where the current position is at. Declaration public bool GetUnderline(uint currentPosition, out DWriteTextRange textRange) Parameters Type Name Description UInt32 currentPosition The current text position. DWriteTextRange textRange The position range of the current format. Returns Type Description Boolean Boolean | Improve this Doc View Source HitTestPoint(Single, Single, out Boolean, out Boolean) Given a coordinate (in DIPs) relative to the top-left of the layout box, this returns the corresponding hit-test metrics of the text string where the hit-test has occurred. This is useful for mapping mouse clicks to caret positions. When the given coordinate is outside the text string, the function sets the output value isInside to false but returns the nearest character position. Declaration public DWriteHitTestMetrics HitTestPoint(float pointX, float pointY, out bool isTrailingHit, out bool isInside) Parameters Type Name Description Single pointX X coordinate to hit-test, relative to the top-left location of the layout box. Single pointY Y coordinate to hit-test, relative to the top-left location of the layout box. Boolean isTrailingHit Output flag indicating whether the hit-test location is at the leading or the trailing side of the character. When the output isInside value is set to false, this value is set according to the output position value to represent the edge closest to the hit-test location. Boolean isInside Output flag indicating whether the hit-test location is inside the text string. When false, the position nearest the text's edge is returned. Returns Type Description DWriteHitTestMetrics DWriteHitTestMetrics | Improve this Doc View Source HitTestTextPosition(UInt32, Boolean, out Single, out Single) Given a text position and whether the caret is on the leading or trailing edge of that position, this returns the corresponding coordinate (in DIPs) relative to the top-left of the layout box. This is most useful for drawing the caret's current position, but it could also be used to anchor an IME to the typed text or attach a floating menu near the point of interest. It may also be used to programmatically obtain the geometry of a particular text position for UI automation. Declaration public DWriteHitTestMetrics HitTestTextPosition(uint textPosition, bool isTrailingHit, out float pointX, out float pointY) Parameters Type Name Description UInt32 textPosition Text position to get the coordinate of. Boolean isTrailingHit Flag indicating whether the location is of the leading or the trailing side of the specified text position. Single pointX Output caret X, relative to the top-left of the layout box. Single pointY Output caret Y, relative to the top-left of the layout box. Returns Type Description DWriteHitTestMetrics DWriteHitTestMetrics Remarks When drawing a caret at the returned X,Y, it should be centered on X and drawn from the Y coordinate down. The height will be the size of the hit-tested text (which can vary in size within a line). Reading direction also affects which side of the character the caret is drawn. However, the returned X coordinate will be correct for either case. You can get a text length back that is larger than a single character. This happens for complex scripts when multiple characters form a single cluster, when diacritics join their base character, or when you test a surrogate pair. | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source SetFontCollection(DWriteFontCollection, DWriteTextRange) Set the font collection. Declaration public void SetFontCollection(DWriteFontCollection fontCollection, DWriteTextRange textRange) Parameters Type Name Description DWriteFontCollection fontCollection The font collection to set DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetFontFamilyName(String, DWriteTextRange) Set null-terminated font family name. Declaration public void SetFontFamilyName(string fontFamilyName, DWriteTextRange textRange) Parameters Type Name Description String fontFamilyName Font family name DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetFontSize(Single, DWriteTextRange) Set font em height. Declaration public void SetFontSize(float fontSize, DWriteTextRange textRange) Parameters Type Name Description Single fontSize Font em height DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetFontStretch(DWriteFontStretch, DWriteTextRange) Set font stretch. Declaration public void SetFontStretch(DWriteFontStretch fontStretch, DWriteTextRange textRange) Parameters Type Name Description DWriteFontStretch fontStretch font stretch DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetFontStyle(DWriteFontStyle, DWriteTextRange) Set font style. Declaration public void SetFontStyle(DWriteFontStyle fontStyle, DWriteTextRange textRange) Parameters Type Name Description DWriteFontStyle fontStyle Font style DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetFontWeight(DWriteFontWeight, DWriteTextRange) Set font weight. Declaration public void SetFontWeight(DWriteFontWeight fontWeight, DWriteTextRange textRange) Parameters Type Name Description DWriteFontWeight fontWeight Font weight DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetLineSpacing(DWriteLineSpacingMethod, Single, Single) Set line spacing. Declaration public void SetLineSpacing(DWriteLineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline) Parameters Type Name Description DWriteLineSpacingMethod lineSpacingMethod How to determine line height. Single lineSpacing The line height, or rather distance between one baseline to another. Single baseline Distance from top of line to baseline. A reasonable ratio to lineSpacing is 80%. Remarks For the default method, spacing depends solely on the content. For uniform spacing, the given line height will override the content. | Improve this Doc View Source SetLocaleName(String, DWriteTextRange) Set locale name. Declaration public void SetLocaleName(string localeName, DWriteTextRange textRange) Parameters Type Name Description String localeName Locale name DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetStrikethrough(Boolean, DWriteTextRange) Set strikethrough. Declaration public void SetStrikethrough(bool hasStrikethrough, DWriteTextRange textRange) Parameters Type Name Description Boolean hasStrikethrough The Boolean flag indicates whether strikethrough takes place DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetTrimming(DWriteTrimming) Set trimming options for any trailing text exceeding the layout width or for any far text exceeding the layout height. Declaration public void SetTrimming(DWriteTrimming trimmingOptions) Parameters Type Name Description DWriteTrimming trimmingOptions Text trimming options. | Improve this Doc View Source SetTypography(DWriteTypography, DWriteTextRange) Set font typography features. Declaration public void SetTypography(DWriteTypography typography, DWriteTextRange textRange) Parameters Type Name Description DWriteTypography typography Pointer to font typography setting. DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source SetUnderline(Boolean, DWriteTextRange) Set underline. Declaration public void SetUnderline(bool hasUnderline, DWriteTextRange textRange) Parameters Type Name Description Boolean hasUnderline The Boolean flag indicates whether underline takes place DWriteTextRange textRange Text range to which this change applies. | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteTextLayout to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteTextLayout value) Parameters Type Name Description DWriteTextLayout value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteMeasuringMode.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteMeasuringMode.html",
    "title": "Enum DWriteMeasuringMode",
    "keywords": "Enum DWriteMeasuringMode The measuring method used for text layout. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteMeasuringMode Fields Name Description GdiClassic Text is measured using glyph display compatible metrics whose values tuned for the current display resolution. GdiNatural Text is measured using the same glyph display metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY. Natural Text is measured using glyph ideal metrics whose values are independent to the current display resolution."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteMatrix.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteMatrix.html",
    "title": "Struct DWriteMatrix",
    "keywords": "Struct DWriteMatrix The DWRITE_MATRIX structure specifies the graphics transform to be applied to rendered glyphs. Implements IEquatable < DWriteMatrix > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteMatrix : IEquatable<DWriteMatrix> Properties | Improve this Doc View Source DX Gets or sets the horizontal shift (always orthogonal regardless of rotation) Declaration public float DX { get; set; } Property Value Type Description Single | Improve this Doc View Source DY Gets or sets the vertical shift (always orthogonal regardless of rotation) Declaration public float DY { get; set; } Property Value Type Description Single | Improve this Doc View Source M11 Gets or sets the horizontal scaling / cosine of rotation Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the vertical shear / sine of rotation Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the horizontal shear / negative sine of rotation Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the vertical scaling / cosine of rotation Declaration public float M22 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteMatrix) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteMatrix other) Parameters Type Name Description DWriteMatrix other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteMatrix, DWriteMatrix) Compares two DWriteMatrix objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteMatrix left, DWriteMatrix right) Parameters Type Name Description DWriteMatrix left The left DWriteMatrix to compare. DWriteMatrix right The right DWriteMatrix to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteMatrix, DWriteMatrix) Compares two DWriteMatrix objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteMatrix left, DWriteMatrix right) Parameters Type Name Description DWriteMatrix left The left DWriteMatrix to compare. DWriteMatrix right The right DWriteMatrix to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteLocalizedStrings.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteLocalizedStrings.html",
    "title": "Class DWriteLocalizedStrings",
    "keywords": "Class DWriteLocalizedStrings Represents a collection of strings indexed by locale name. Inheritance Object DWriteLocalizedStrings Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteLocalizedStrings : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source FindLocaleName(String, out UInt32) Gets the index of the item with the specified locale name. Declaration public bool FindLocaleName(string localeName, out uint index) Parameters Type Name Description String localeName Locale name to look for. UInt32 index Receives the zero-based index of the locale name/string pair. Returns Type Description Boolean TRUE if the locale name exists or FALSE if not. | Improve this Doc View Source GetCount() Gets the number of language/string pairs. Declaration public uint GetCount() Returns Type Description UInt32 UInt32 | Improve this Doc View Source GetLocaleName(UInt32) Copies the locale name with the specified index to the specified array. Declaration public string GetLocaleName(uint index) Parameters Type Name Description UInt32 index Zero-based index of the locale name. Returns Type Description String String | Improve this Doc View Source GetString(UInt32) Copies the string with the specified index to the specified array. Declaration public string GetString(uint index) Parameters Type Name Description UInt32 index Zero-based index of the string. Returns Type Description String String | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteLocalizedStrings to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteLocalizedStrings value) Parameters Type Name Description DWriteLocalizedStrings value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteLineSpacingMethod.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteLineSpacingMethod.html",
    "title": "Enum DWriteLineSpacingMethod",
    "keywords": "Enum DWriteLineSpacingMethod The method used for line spacing in layout. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteLineSpacingMethod Fields Name Description Default Line spacing depends solely on the content, growing to accommodate the size of fonts and inline objects. Uniform Lines are explicitly set to uniform spacing, regardless of contained font sizes. This can be useful to avoid the uneven appearance that can occur from font fallback."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteLineMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteLineMetrics.html",
    "title": "Struct DWriteLineMetrics",
    "keywords": "Struct DWriteLineMetrics The DWRITE_LINE_METRICS structure contains information about a formatted line of text. Implements IEquatable < DWriteLineMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteLineMetrics : IEquatable<DWriteLineMetrics> Properties | Improve this Doc View Source Baseline Gets the distance from the top of the line to its baseline. Declaration public float Baseline { get; } Property Value Type Description Single | Improve this Doc View Source Height Gets the height of the line as measured from top to bottom. Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source IsTrimmed Gets a value indicating whether the line is trimmed. Declaration public bool IsTrimmed { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the number of total text positions in the line. This includes any trailing whitespace and newline characters. Declaration public uint Length { get; } Property Value Type Description UInt32 | Improve this Doc View Source NewlineLength Gets the number of characters in the newline sequence at the end of the line. If the count is zero, then the line was either wrapped or it is the end of the text. Declaration public uint NewlineLength { get; } Property Value Type Description UInt32 | Improve this Doc View Source TrailingWhitespaceLength Gets the number of whitespace positions at the end of the line. Newline sequences are considered whitespace. Declaration public uint TrailingWhitespaceLength { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DWriteLineMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteLineMetrics other) Parameters Type Name Description DWriteLineMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteLineMetrics, DWriteLineMetrics) Compares two DWriteLineMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteLineMetrics left, DWriteLineMetrics right) Parameters Type Name Description DWriteLineMetrics left The left DWriteLineMetrics to compare. DWriteLineMetrics right The right DWriteLineMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteLineMetrics, DWriteLineMetrics) Compares two DWriteLineMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteLineMetrics left, DWriteLineMetrics right) Parameters Type Name Description DWriteLineMetrics left The left DWriteLineMetrics to compare. DWriteLineMetrics right The right DWriteLineMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteLineBreakpoint.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteLineBreakpoint.html",
    "title": "Struct DWriteLineBreakpoint",
    "keywords": "Struct DWriteLineBreakpoint Line breakpoint characteristics of a character. Implements IEquatable < DWriteLineBreakpoint > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteLineBreakpoint : IEquatable<DWriteLineBreakpoint> Properties | Improve this Doc View Source BreakConditionAfter Gets or sets the breaking condition after the character. Declaration public DWriteBreakCondition BreakConditionAfter { get; set; } Property Value Type Description DWriteBreakCondition | Improve this Doc View Source BreakConditionBefore Gets or sets the breaking condition before the character. Declaration public DWriteBreakCondition BreakConditionBefore { get; set; } Property Value Type Description DWriteBreakCondition | Improve this Doc View Source IsSoftHyphen Gets or sets a value indicating whether the character is a soft hyphen, often used to indicate hyphenation points inside words. Declaration public bool IsSoftHyphen { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsWhitespace Gets or sets a value indicating whether the character is some form of whitespace, which may be meaningful for justification. Declaration public bool IsWhitespace { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(DWriteLineBreakpoint) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteLineBreakpoint other) Parameters Type Name Description DWriteLineBreakpoint other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteLineBreakpoint, DWriteLineBreakpoint) Compares two DWriteLineBreakpoint objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteLineBreakpoint left, DWriteLineBreakpoint right) Parameters Type Name Description DWriteLineBreakpoint left The left DWriteLineBreakpoint to compare. DWriteLineBreakpoint right The right DWriteLineBreakpoint to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteLineBreakpoint, DWriteLineBreakpoint) Compares two DWriteLineBreakpoint objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteLineBreakpoint left, DWriteLineBreakpoint right) Parameters Type Name Description DWriteLineBreakpoint left The left DWriteLineBreakpoint to compare. DWriteLineBreakpoint right The right DWriteLineBreakpoint to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteInlineObjectMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteInlineObjectMetrics.html",
    "title": "Struct DWriteInlineObjectMetrics",
    "keywords": "Struct DWriteInlineObjectMetrics Properties describing the geometric measurement of an application-defined inline object. Implements IEquatable < DWriteInlineObjectMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteInlineObjectMetrics : IEquatable<DWriteInlineObjectMetrics> Properties | Improve this Doc View Source Baseline Gets the distance from the top of the object to the baseline where it is lined up with the adjacent text. If the baseline is at the bottom, baseline simply equals height. Declaration public float Baseline { get; } Property Value Type Description Single | Improve this Doc View Source Height Gets the height of the inline object as measured from top to bottom. Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source SupportsSideways Gets a value indicating whether the object is to be placed upright or alongside the text baseline for vertical text. Declaration public bool SupportsSideways { get; } Property Value Type Description Boolean | Improve this Doc View Source Width Gets the width of the inline object. Declaration public float Width { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteInlineObjectMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteInlineObjectMetrics other) Parameters Type Name Description DWriteInlineObjectMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteInlineObjectMetrics, DWriteInlineObjectMetrics) Compares two DWriteInlineObjectMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteInlineObjectMetrics left, DWriteInlineObjectMetrics right) Parameters Type Name Description DWriteInlineObjectMetrics left The left DWriteInlineObjectMetrics to compare. DWriteInlineObjectMetrics right The right DWriteInlineObjectMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteInlineObjectMetrics, DWriteInlineObjectMetrics) Compares two DWriteInlineObjectMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteInlineObjectMetrics left, DWriteInlineObjectMetrics right) Parameters Type Name Description DWriteInlineObjectMetrics left The left DWriteInlineObjectMetrics to compare. DWriteInlineObjectMetrics right The right DWriteInlineObjectMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteInformationalStringId.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteInformationalStringId.html",
    "title": "Enum DWriteInformationalStringId",
    "keywords": "Enum DWriteInformationalStringId The informational string enumeration identifies a string in a font. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteInformationalStringId Fields Name Description CopyrightNotice Copyright notice provided by the font. Description Description of the font. Can contain revision information, usage recommendations, history, features, etc. Designer Name of the font designer. DesignerUrl URL of font designer (with protocol, e.g., http://, ftp://). FontVendorUrl URL of font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font. FullName The full name of the font, e.g. \"Arial Bold\", from name id 4 in the name table. LicenseDescription Description of how the font may be legally used, or different example scenarios for licensed use. This field should be written in plain language, not legalese. LicenseInfoUrl URL where additional licensing information can be found. Manufacturer Name of the font manufacturer. None Unspecified name ID. PostscriptCidName The postscript CID findfont name, from name id 20 in the name table. PostscriptName The postscript name of the font, e.g. \"GillSans-Bold\" from name id 6 in the name table. PreferredFamilyNames Family name preferred by the designer. This enables font designers to group more than four fonts in a single family without losing compatibility with GDI. This name is typically only present if it differs from the GDI-compatible family name. PreferredSubFamilyNames Subfamily name preferred by the designer. This name is typically only present if it differs from the GDI-compatible subfamily name. SampleText Sample text. This can be the font name or any other text that the designer thinks is the best example to display the font in. Trademark Trademark information provided by the font. VersionStrings String containing a version number. Win32FamilyNames GDI-compatible family name. Because GDI allows a maximum of four fonts per family, fonts in the same family may have different GDI-compatible family names (e.g., \"Arial\", \"Arial Narrow\", \"Arial Black\"). Win32SubFamilyNames GDI-compatible subfamily name."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteHitTestMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteHitTestMetrics.html",
    "title": "Struct DWriteHitTestMetrics",
    "keywords": "Struct DWriteHitTestMetrics Geometry enclosing of text positions. Implements IEquatable < DWriteHitTestMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteHitTestMetrics : IEquatable<DWriteHitTestMetrics> Properties | Improve this Doc View Source BidiLevel Gets the bidi level of text positions enclosed within the geometry. Declaration public uint BidiLevel { get; } Property Value Type Description UInt32 | Improve this Doc View Source Height Gets the geometry's height. Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source IsText Gets a value indicating whether the geometry encloses text. Declaration public bool IsText { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTrimmed Gets a value indicating whether the range is trimmed. Declaration public bool IsTrimmed { get; } Property Value Type Description Boolean | Improve this Doc View Source Left Gets the left position of the top-left coordinate of the geometry. Declaration public float Left { get; } Property Value Type Description Single | Improve this Doc View Source Length Gets the number of text positions within the geometry. Declaration public uint Length { get; } Property Value Type Description UInt32 | Improve this Doc View Source TextPosition Gets the first text position within the geometry. Declaration public uint TextPosition { get; } Property Value Type Description UInt32 | Improve this Doc View Source Top Gets the top position of the top-left coordinate of the geometry. Declaration public float Top { get; } Property Value Type Description Single | Improve this Doc View Source Width Gets the geometry's width. Declaration public float Width { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteHitTestMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteHitTestMetrics other) Parameters Type Name Description DWriteHitTestMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteHitTestMetrics, DWriteHitTestMetrics) Compares two DWriteHitTestMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteHitTestMetrics left, DWriteHitTestMetrics right) Parameters Type Name Description DWriteHitTestMetrics left The left DWriteHitTestMetrics to compare. DWriteHitTestMetrics right The right DWriteHitTestMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteHitTestMetrics, DWriteHitTestMetrics) Compares two DWriteHitTestMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteHitTestMetrics left, DWriteHitTestMetrics right) Parameters Type Name Description DWriteHitTestMetrics left The left DWriteHitTestMetrics to compare. DWriteHitTestMetrics right The right DWriteHitTestMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphRunDescription.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphRunDescription.html",
    "title": "Struct DWriteGlyphRunDescription",
    "keywords": "Struct DWriteGlyphRunDescription The DWRITE_GLYPH_RUN_DESCRIPTION structure contains additional properties related to those in DWRITE_GLYPH_RUN. Implements IEquatable < DWriteGlyphRunDescription > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteGlyphRunDescription : IEquatable<DWriteGlyphRunDescription> Properties | Improve this Doc View Source ClusterMap Gets or sets an array of indices to the glyph indices array, of the first glyphs of all the glyph clusters of the glyphs to render. Declaration public ushort[] ClusterMap { get; set; } Property Value Type Description UInt16 [] | Improve this Doc View Source LocaleName Gets or sets the locale name associated with this run. Declaration public string LocaleName { get; set; } Property Value Type Description String | Improve this Doc View Source TextLength Gets the number of characters (UTF16 code-units). Note that this may be different than the number of glyphs. Declaration public uint TextLength { get; } Property Value Type Description UInt32 | Improve this Doc View Source TextPosition Gets or sets the corresponding text position in the original string this glyph run came from. Declaration public uint TextPosition { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source TextString Gets or sets the text associated with the glyphs. Declaration public string TextString { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Equals(DWriteGlyphRunDescription) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteGlyphRunDescription other) Parameters Type Name Description DWriteGlyphRunDescription other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteGlyphRunDescription, DWriteGlyphRunDescription) Compares two DWriteGlyphRunDescription objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteGlyphRunDescription left, DWriteGlyphRunDescription right) Parameters Type Name Description DWriteGlyphRunDescription left The left DWriteGlyphRunDescription to compare. DWriteGlyphRunDescription right The right DWriteGlyphRunDescription to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteGlyphRunDescription, DWriteGlyphRunDescription) Compares two DWriteGlyphRunDescription objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteGlyphRunDescription left, DWriteGlyphRunDescription right) Parameters Type Name Description DWriteGlyphRunDescription left The left DWriteGlyphRunDescription to compare. DWriteGlyphRunDescription right The right DWriteGlyphRunDescription to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphRun.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphRun.html",
    "title": "Struct DWriteGlyphRun",
    "keywords": "Struct DWriteGlyphRun The DWRITE_GLYPH_RUN structure contains the information needed by renderers to draw glyph runs. All coordinates are in device independent pixels (DIPs). Implements IEquatable < DWriteGlyphRun > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteGlyphRun : IEquatable<DWriteGlyphRun> Properties | Improve this Doc View Source BidiLevel Gets or sets the implicit resolved bidi level of the run. Odd levels indicate right-to-left languages like Hebrew and Arabic, while even levels indicate left-to-right languages like English and Japanese (when written horizontally). For right-to-left languages, the text origin is on the right, and text should be drawn to the left. Declaration public uint BidiLevel { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FontEMSize Gets or sets the logical size of the font in DIPs, not points (equals 1/96 inch). Declaration public float FontEMSize { get; set; } Property Value Type Description Single | Improve this Doc View Source FontFace Gets or sets the physical font face to draw with. Declaration public DWriteFontFace FontFace { get; set; } Property Value Type Description DWriteFontFace | Improve this Doc View Source GlyphAdvances Gets the glyph advance widths. Declaration public float[] GlyphAdvances { get; } Property Value Type Description Single [] | Improve this Doc View Source GlyphCount Gets the number of glyphs. Declaration public uint GlyphCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source GlyphIndices Gets the indices to render. Declaration public ushort[] GlyphIndices { get; } Property Value Type Description UInt16 [] | Improve this Doc View Source GlyphOffsets Gets the glyph offsets. Declaration public DWriteGlyphOffset[] GlyphOffsets { get; } Property Value Type Description DWriteGlyphOffset [] | Improve this Doc View Source IsSideways Gets or sets a value indicating whether glyphs are rotated 90 degrees to the left and vertical metrics are used. Vertical writing is achieved by specifying isSideways = true and rotating the entire run 90 degrees to the right via a rotate transform. Declaration public bool IsSideways { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(DWriteGlyphRun) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteGlyphRun other) Parameters Type Name Description DWriteGlyphRun other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source SetGlyphIndicesAdvancesOffsets(UInt16[], Single[], DWriteGlyphOffset[]) Sets the glyph indices, advance widths, and offsets. Declaration public void SetGlyphIndicesAdvancesOffsets(ushort[] indices, float[] advances, DWriteGlyphOffset[] offsets) Parameters Type Name Description UInt16 [] indices The indices to render. Single [] advances Glyph advance widths. DWriteGlyphOffset [] offsets Glyph offsets. Operators | Improve this Doc View Source Equality(DWriteGlyphRun, DWriteGlyphRun) Compares two DWriteGlyphRun objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteGlyphRun left, DWriteGlyphRun right) Parameters Type Name Description DWriteGlyphRun left The left DWriteGlyphRun to compare. DWriteGlyphRun right The right DWriteGlyphRun to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteGlyphRun, DWriteGlyphRun) Compares two DWriteGlyphRun objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteGlyphRun left, DWriteGlyphRun right) Parameters Type Name Description DWriteGlyphRun left The left DWriteGlyphRun to compare. DWriteGlyphRun right The right DWriteGlyphRun to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.html",
    "title": "Struct D3D11Texture1DDesc",
    "keywords": "Struct D3D11Texture1DDesc Describes a 1D texture. Implements IEquatable < D3D11Texture1DDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DDesc : IEquatable<D3D11Texture1DDesc> Constructors | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize, uint mipLevels) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. UInt32 mipLevels The maximum number of mipmap levels in the texture. | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32, UInt32, D3D11BindOptions) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. | Improve this Doc View Source D3D11Texture1DDesc(DxgiFormat, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, D3D11ResourceMiscOptions) Initializes a new instance of the D3D11Texture1DDesc struct. Declaration public D3D11Texture1DDesc(DxgiFormat format, uint width, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, D3D11ResourceMiscOptions miscOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 arraySize The number of textures in the array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. D3D11ResourceMiscOptions miscOptions Options that identify other, less common resource options. Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures in the array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source BindOptions Gets or sets options for binding to pipeline stages. Declaration public D3D11BindOptions BindOptions { get; set; } Property Value Type Description D3D11BindOptions | Improve this Doc View Source CpuAccessOptions Gets or sets options to specify the types of CPU access allowed. Declaration public D3D11CpuAccessOptions CpuAccessOptions { get; set; } Property Value Type Description D3D11CpuAccessOptions | Improve this Doc View Source Format Gets or sets the texture format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels in the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MiscOptions Gets or sets options that identify other, less common resource options. Declaration public D3D11ResourceMiscOptions MiscOptions { get; set; } Property Value Type Description D3D11ResourceMiscOptions | Improve this Doc View Source Usage Gets or sets a value indicating how the texture is to be read from and written to. Declaration public D3D11Usage Usage { get; set; } Property Value Type Description D3D11Usage | Improve this Doc View Source Width Gets or sets the texture width (in texels). Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DDesc other) Parameters Type Name Description D3D11Texture1DDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DDesc, D3D11Texture1DDesc) Compares two D3D11Texture1DDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DDesc left, D3D11Texture1DDesc right) Parameters Type Name Description D3D11Texture1DDesc left The left D3D11Texture1DDesc to compare. D3D11Texture1DDesc right The right D3D11Texture1DDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DDesc, D3D11Texture1DDesc) Compares two D3D11Texture1DDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DDesc left, D3D11Texture1DDesc right) Parameters Type Name Description D3D11Texture1DDesc left The left D3D11Texture1DDesc to compare. D3D11Texture1DDesc right The right D3D11Texture1DDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.html",
    "title": "Struct D3D11Texture1DArrayUav",
    "keywords": "Struct D3D11Texture1DArrayUav Describes an array of unordered-access 1D texture resources. Implements IEquatable < D3D11Texture1DArrayUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DArrayUav : IEquatable<D3D11Texture1DArrayUav> Properties | Improve this Doc View Source ArraySize Gets or sets the number of slices in the array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the zero-based index of the first array slice to be accessed. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the mipmap slice index. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DArrayUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DArrayUav other) Parameters Type Name Description D3D11Texture1DArrayUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DArrayUav, D3D11Texture1DArrayUav) Compares two D3D11Texture1DArrayUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DArrayUav left, D3D11Texture1DArrayUav right) Parameters Type Name Description D3D11Texture1DArrayUav left The left D3D11Texture1DArrayUav to compare. D3D11Texture1DArrayUav right The right D3D11Texture1DArrayUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DArrayUav, D3D11Texture1DArrayUav) Compares two D3D11Texture1DArrayUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DArrayUav left, D3D11Texture1DArrayUav right) Parameters Type Name Description D3D11Texture1DArrayUav left The left D3D11Texture1DArrayUav to compare. D3D11Texture1DArrayUav right The right D3D11Texture1DArrayUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.html",
    "title": "Struct D3D11Texture1DArraySrv",
    "keywords": "Struct D3D11Texture1DArraySrv Specifies the subresources from an array of 1D textures to use in a shader resource view. Implements IEquatable < D3D11Texture1DArraySrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DArraySrv : IEquatable<D3D11Texture1DArraySrv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures in the array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DArraySrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DArraySrv other) Parameters Type Name Description D3D11Texture1DArraySrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DArraySrv, D3D11Texture1DArraySrv) Compares two D3D11Texture1DArraySrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DArraySrv left, D3D11Texture1DArraySrv right) Parameters Type Name Description D3D11Texture1DArraySrv left The left D3D11Texture1DArraySrv to compare. D3D11Texture1DArraySrv right The right D3D11Texture1DArraySrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DArraySrv, D3D11Texture1DArraySrv) Compares two D3D11Texture1DArraySrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DArraySrv left, D3D11Texture1DArraySrv right) Parameters Type Name Description D3D11Texture1DArraySrv left The left D3D11Texture1DArraySrv to compare. D3D11Texture1DArraySrv right The right D3D11Texture1DArraySrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.html",
    "title": "Struct D3D11Texture1DArrayRtv",
    "keywords": "Struct D3D11Texture1DArrayRtv Specifies the subresources from an array of 1D textures to use in a render-target view. Implements IEquatable < D3D11Texture1DArrayRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DArrayRtv : IEquatable<D3D11Texture1DArrayRtv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the index of the mipmap level to use mip slice. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DArrayRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DArrayRtv other) Parameters Type Name Description D3D11Texture1DArrayRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DArrayRtv, D3D11Texture1DArrayRtv) Compares two D3D11Texture1DArrayRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DArrayRtv left, D3D11Texture1DArrayRtv right) Parameters Type Name Description D3D11Texture1DArrayRtv left The left D3D11Texture1DArrayRtv to compare. D3D11Texture1DArrayRtv right The right D3D11Texture1DArrayRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DArrayRtv, D3D11Texture1DArrayRtv) Compares two D3D11Texture1DArrayRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DArrayRtv left, D3D11Texture1DArrayRtv right) Parameters Type Name Description D3D11Texture1DArrayRtv left The left D3D11Texture1DArrayRtv to compare. D3D11Texture1DArrayRtv right The right D3D11Texture1DArrayRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.html",
    "title": "Struct D3D11Texture1DArrayDsv",
    "keywords": "Struct D3D11Texture1DArrayDsv Specifies the subresources from an array of 1D textures to use in a depth-stencil view. Implements IEquatable < D3D11Texture1DArrayDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DArrayDsv : IEquatable<D3D11Texture1DArrayDsv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the index of the first mipmap level to use. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DArrayDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DArrayDsv other) Parameters Type Name Description D3D11Texture1DArrayDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DArrayDsv, D3D11Texture1DArrayDsv) Compares two D3D11Texture1DArrayDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DArrayDsv left, D3D11Texture1DArrayDsv right) Parameters Type Name Description D3D11Texture1DArrayDsv left The left D3D11Texture1DArrayDsv to compare. D3D11Texture1DArrayDsv right The right D3D11Texture1DArrayDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DArrayDsv, D3D11Texture1DArrayDsv) Compares two D3D11Texture1DArrayDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DArrayDsv left, D3D11Texture1DArrayDsv right) Parameters Type Name Description D3D11Texture1DArrayDsv left The left D3D11Texture1DArrayDsv to compare. D3D11Texture1DArrayDsv right The right D3D11Texture1DArrayDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1D.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1D.html",
    "title": "Class D3D11Texture1D",
    "keywords": "Class D3D11Texture1D A 1D texture interface accesses texel data, which is structured memory. Inheritance Object D3D11DeviceChild D3D11Resource D3D11Texture1D Implements IDisposable ID3D11Releasable Inherited Members D3D11Resource.Dimension D3D11Resource.EvictionPriority D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Texture1D : D3D11Resource, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the properties of the texture resource. Declaration public D3D11Texture1DDesc Description { get; } Property Value Type Description D3D11Texture1DDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.html",
    "title": "Struct D3D11SamplerDesc",
    "keywords": "Struct D3D11SamplerDesc Describes a sampler state. Implements IEquatable < D3D11SamplerDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11SamplerDesc : IEquatable<D3D11SamplerDesc> Constructors | Improve this Doc View Source D3D11SamplerDesc(D3D11Filter, D3D11TextureAddressMode, D3D11TextureAddressMode, D3D11TextureAddressMode, Single, UInt32, D3D11ComparisonFunction, Single[], Single, Single) Initializes a new instance of the D3D11SamplerDesc struct. Declaration public D3D11SamplerDesc(D3D11Filter filter, D3D11TextureAddressMode addressU, D3D11TextureAddressMode addressV, D3D11TextureAddressMode addressW, float mipLodBias, uint maxAnisotropy, D3D11ComparisonFunction comparisonFunction, float[] borderColor, float minLod, float maxLod) Parameters Type Name Description D3D11Filter filter The filtering method to use when sampling a texture. D3D11TextureAddressMode addressU The method to use for resolving a u texture coordinate that is outside the 0 to 1 range. D3D11TextureAddressMode addressV The method to use for resolving a v texture coordinate that is outside the 0 to 1 range. D3D11TextureAddressMode addressW The method to use for resolving a w texture coordinate that is outside the 0 to 1 range. Single mipLodBias The offset from the calculated mipmap level. UInt32 maxAnisotropy The clamping value used if Anisotropic or ComparisonAnisotropic is specified in Filter . D3D11ComparisonFunction comparisonFunction A function that compares sampled data against existing sampled data. Single [] borderColor The border color to use if Border is specified for AddressU , AddressV , or AddressW . Single minLod The lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. Single maxLod The upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. Properties | Improve this Doc View Source AddressU Gets or sets the method to use for resolving a u texture coordinate that is outside the 0 to 1 range. Declaration public D3D11TextureAddressMode AddressU { get; set; } Property Value Type Description D3D11TextureAddressMode | Improve this Doc View Source AddressV Gets or sets the method to use for resolving a v texture coordinate that is outside the 0 to 1 range. Declaration public D3D11TextureAddressMode AddressV { get; set; } Property Value Type Description D3D11TextureAddressMode | Improve this Doc View Source AddressW Gets or sets the method to use for resolving a w texture coordinate that is outside the 0 to 1 range. Declaration public D3D11TextureAddressMode AddressW { get; set; } Property Value Type Description D3D11TextureAddressMode | Improve this Doc View Source BorderColorA Gets or sets the border color alpha component to use if Border is specified for AddressU , AddressV , or AddressW . Declaration public float BorderColorA { get; set; } Property Value Type Description Single | Improve this Doc View Source BorderColorB Gets or sets the border color blue component to use if Border is specified for AddressU , AddressV , or AddressW . Declaration public float BorderColorB { get; set; } Property Value Type Description Single | Improve this Doc View Source BorderColorG Gets or sets the border color green component to use if Border is specified for AddressU , AddressV , or AddressW . Declaration public float BorderColorG { get; set; } Property Value Type Description Single | Improve this Doc View Source BorderColorR Gets or sets the border color red component to use if Border is specified for AddressU , AddressV , or AddressW . Declaration public float BorderColorR { get; set; } Property Value Type Description Single | Improve this Doc View Source ComparisonFunction Gets or sets a function that compares sampled data against existing sampled data. Declaration public D3D11ComparisonFunction ComparisonFunction { get; set; } Property Value Type Description D3D11ComparisonFunction | Improve this Doc View Source Default Gets default sampler-state values. Declaration public static D3D11SamplerDesc Default { get; } Property Value Type Description D3D11SamplerDesc | Improve this Doc View Source Filter Gets or sets the filtering method to use when sampling a texture. Declaration public D3D11Filter Filter { get; set; } Property Value Type Description D3D11Filter | Improve this Doc View Source MaxAnisotropy Gets or sets the clamping value used if Anisotropic or ComparisonAnisotropic is specified in Filter . Declaration public uint MaxAnisotropy { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MaxLod Gets or sets the upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. Declaration public float MaxLod { get; set; } Property Value Type Description Single | Improve this Doc View Source MinLod Gets or sets the lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. Declaration public float MinLod { get; set; } Property Value Type Description Single | Improve this Doc View Source MipLoadBias Gets or sets the offset from the calculated mipmap level. Declaration public float MipLoadBias { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D3D11SamplerDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11SamplerDesc other) Parameters Type Name Description D3D11SamplerDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11SamplerDesc, D3D11SamplerDesc) Compares two D3D11SamplerDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11SamplerDesc left, D3D11SamplerDesc right) Parameters Type Name Description D3D11SamplerDesc left The left D3D11SamplerDesc to compare. D3D11SamplerDesc right The right D3D11SamplerDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11SamplerDesc, D3D11SamplerDesc) Compares two D3D11SamplerDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11SamplerDesc left, D3D11SamplerDesc right) Parameters Type Name Description D3D11SamplerDesc left The left D3D11SamplerDesc to compare. D3D11SamplerDesc right The right D3D11SamplerDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.html",
    "title": "Enum D3D11RtvDimension",
    "keywords": "Enum D3D11RtvDimension These flags identify the type of resource that will be viewed as a render target. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11RtvDimension Fields Name Description Buffer The resource will be accessed as a buffer. Texture1D The resource will be accessed as a 1D texture. Texture1DArray The resource will be accessed as an array of 1D textures. Texture2D The resource will be accessed as a 2D texture. Texture2DArray The resource will be accessed as an array of 2D textures. Texture2DMs The resource will be accessed as a 2D texture with multisampling. Texture2DMsArray The resource will be accessed as an array of 2D textures with multisampling. Texture3D The resource will be accessed as a 3D texture. Unknown Do not use this value, as it will cause CreateRenderTargetView(D3D11Resource, Nullable<D3D11RenderTargetViewDesc>) to fail."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.html",
    "title": "Enum D3D11ResourceMiscOptions",
    "keywords": "Enum D3D11ResourceMiscOptions Identifies options for resources. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11ResourceMiscOptions Fields Name Description BufferAllowRawViews Enables a resource as a byte address buffer. BufferStructured Enables a resource as a structured buffer. DrawIndirectArgs Enables instancing of GPU-generated content. GdiCompatible Enables a resource compatible with GDI. GenerateMips Enables MIP map generation by using GenerateMips(D3D11ShaderResourceView) on a texture resource. The resource must be created with the bind flags that specify that the resource is a render target and a shader resource. Guarded Set this flag to indicate that the resource is guarded. None No option. ResourceClamp Enables a resource with MIP map clamping for use with SetResourceMinLod(D3D11Resource, Single) . RestrictedContent Set this flag to indicate that the resource might contain protected content; therefore, the operating system should use the resource only when the driver and hardware support content protection. If the driver and hardware do not support content protection and you try to create a resource with this flag, the resource creation fails. RestrictSharedResource Set this flag to indicate that the operating system restricts access to the shared surface. RestrictSharedResourceDriver Set this flag to indicate that the driver restricts access to the shared surface. Shared Enables resource data sharing between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures. SharedKeyedMutex Enables the resource to be synchronized by using the AcquireSync(UInt64, UInt32) and ReleaseSync(UInt64) APIs. SharedNTHandle Set this flag to enable the use of NT HANDLE values when you create a shared resource. By enabling this flag, you deprecate the use of existing HANDLE values. TextureCube Sets a resource to be a cube texture created from a Texture2DArray that contains 6 textures. Tiled Set this flag to indicate that the resource is a tiled resource. TilePool Set this flag to indicate that the resource is a tile pool."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.html",
    "title": "Enum D3D11ResourceDimension",
    "keywords": "Enum D3D11ResourceDimension Identifies the type of resource being used. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11ResourceDimension Fields Name Description Buffer Resource is a buffer. Texture1D Resource is a 1D texture. Texture2D Resource is a 2D texture. Texture3D Resource is a 3D texture. Unknown Resource is of unknown type."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Resource.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Resource.html",
    "title": "Class D3D11Resource",
    "keywords": "Class D3D11Resource A resource interface provides common actions on all resources. Inheritance Object D3D11DeviceChild D3D11Resource D3D11Buffer D3D11Texture1D D3D11Texture2D D3D11Texture3D Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.Handle D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public abstract class D3D11Resource : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Dimension Gets the type of the resource. Declaration public D3D11ResourceDimension Dimension { get; } Property Value Type Description D3D11ResourceDimension | Improve this Doc View Source EvictionPriority Gets or sets the eviction priority of a resource. Declaration public DxgiResourceEvictionPriority EvictionPriority { get; set; } Property Value Type Description DxgiResourceEvictionPriority Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.html",
    "title": "Struct D3D11RenderTargetViewDesc",
    "keywords": "Struct D3D11RenderTargetViewDesc Specifies the subresources from a resource that are accessible using a render-target view. Implements IEquatable < D3D11RenderTargetViewDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11RenderTargetViewDesc : IEquatable<D3D11RenderTargetViewDesc> Constructors | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Buffer, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Buffer buffer, DxgiFormat format, uint firstElement, uint numElements) Parameters Type Name Description D3D11Buffer buffer A buffer. DxgiFormat format The viewing format. UInt32 firstElement The buffer and the first element to access. UInt32 numElements The total number of elements in the view. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11RtvDimension) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11RtvDimension viewDimension) Parameters Type Name Description D3D11RtvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11RtvDimension, DxgiFormat) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11RtvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11RtvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11RtvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice) Parameters Type Name Description D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11RtvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice, uint arraySize) Parameters Type Name Description D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture1D, D3D11RtvDimension) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture1D texture, D3D11RtvDimension viewDimension) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RtvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture1D, D3D11RtvDimension, DxgiFormat) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture1D texture, D3D11RtvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture1D, D3D11RtvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture1D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture1D, D3D11RtvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture1D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture1D, D3D11RtvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture1D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture2D, D3D11RtvDimension) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture2D texture, D3D11RtvDimension viewDimension) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RtvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture2D, D3D11RtvDimension, DxgiFormat) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture2D texture, D3D11RtvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture2D, D3D11RtvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture2D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture2D, D3D11RtvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture2D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture2D, D3D11RtvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture2D texture, D3D11RtvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firtArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RtvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture3D) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture3D texture) Parameters Type Name Description D3D11Texture3D texture A 3D texture. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture3D, DxgiFormat) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture3D texture, DxgiFormat format) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture3D, DxgiFormat, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture3D, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice, uint firtWSlice) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtWSlice The first depth level to use. | Improve this Doc View Source D3D11RenderTargetViewDesc(D3D11Texture3D, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11RenderTargetViewDesc struct. Declaration public D3D11RenderTargetViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice, uint firtWSlice, uint wsize) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firtWSlice The first depth level to use. UInt32 wsize The number of depth levels to use in the render-target view. Properties | Improve this Doc View Source Buffer Gets or sets a value indicating which buffer elements can be accessed. Declaration public D3D11BufferRtv Buffer { get; set; } Property Value Type Description D3D11BufferRtv | Improve this Doc View Source Format Gets or sets the data format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Texture1D Gets or sets the subresources in a 1D texture that can be accessed. Declaration public D3D11Texture1DRtv Texture1D { get; set; } Property Value Type Description D3D11Texture1DRtv | Improve this Doc View Source Texture1DArray Gets or sets the subresources in a 1D texture array that can be accessed. Declaration public D3D11Texture1DArrayRtv Texture1DArray { get; set; } Property Value Type Description D3D11Texture1DArrayRtv | Improve this Doc View Source Texture2D Gets or sets the subresources in a 2D texture that can be accessed. Declaration public D3D11Texture2DRtv Texture2D { get; set; } Property Value Type Description D3D11Texture2DRtv | Improve this Doc View Source Texture2DArray Gets or sets the subresources in a 2D texture array that can be accessed. Declaration public D3D11Texture2DArrayRtv Texture2DArray { get; set; } Property Value Type Description D3D11Texture2DArrayRtv | Improve this Doc View Source Texture2DMs Gets or sets a single subresource because a multisampled 2D texture only contains one subresource. Declaration public D3D11Texture2DMsRtv Texture2DMs { get; set; } Property Value Type Description D3D11Texture2DMsRtv | Improve this Doc View Source Texture2DMsArray Gets or sets the subresources in a multisampled 2D texture array that can be accessed. Declaration public D3D11Texture2DMsArrayRtv Texture2DMsArray { get; set; } Property Value Type Description D3D11Texture2DMsArrayRtv | Improve this Doc View Source Texture3D Gets or sets the subresources in a 3D texture that can be accessed. Declaration public D3D11Texture3DRtv Texture3D { get; set; } Property Value Type Description D3D11Texture3DRtv | Improve this Doc View Source ViewDimension Gets or sets the resource type. Declaration public D3D11RtvDimension ViewDimension { get; set; } Property Value Type Description D3D11RtvDimension Methods | Improve this Doc View Source Equals(D3D11RenderTargetViewDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11RenderTargetViewDesc other) Parameters Type Name Description D3D11RenderTargetViewDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11RenderTargetViewDesc, D3D11RenderTargetViewDesc) Compares two D3D11RenderTargetViewDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11RenderTargetViewDesc left, D3D11RenderTargetViewDesc right) Parameters Type Name Description D3D11RenderTargetViewDesc left The left D3D11RenderTargetViewDesc to compare. D3D11RenderTargetViewDesc right The right D3D11RenderTargetViewDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11RenderTargetViewDesc, D3D11RenderTargetViewDesc) Compares two D3D11RenderTargetViewDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11RenderTargetViewDesc left, D3D11RenderTargetViewDesc right) Parameters Type Name Description D3D11RenderTargetViewDesc left The left D3D11RenderTargetViewDesc to compare. D3D11RenderTargetViewDesc right The right D3D11RenderTargetViewDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.html",
    "title": "Class D3D11RenderTargetView",
    "keywords": "Class D3D11RenderTargetView A render-target-view interface identifies the render-target subresources that can be accessed during rendering. Inheritance Object D3D11DeviceChild D3D11View D3D11RenderTargetView Implements IDisposable ID3D11Releasable Inherited Members D3D11View.GetResource() D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11RenderTargetView : D3D11View, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the properties of a render target view. Declaration public D3D11RenderTargetViewDesc Description { get; } Property Value Type Description D3D11RenderTargetViewDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.html",
    "title": "Struct D3D11RenderTargetBlendDesc",
    "keywords": "Struct D3D11RenderTargetBlendDesc Describes the blend state for a render target. Implements IEquatable < D3D11RenderTargetBlendDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11RenderTargetBlendDesc : IEquatable<D3D11RenderTargetBlendDesc> Properties | Improve this Doc View Source BlendOperation Gets or sets a value indicating how to combine the SrcBlend and DestBlend operations. Declaration public D3D11BlendOperation BlendOperation { get; set; } Property Value Type Description D3D11BlendOperation | Improve this Doc View Source BlendOperationAlpha Gets or sets a value indicating how to combine the SrcBlendAlpha and DestBlendAlpha operations. Declaration public D3D11BlendOperation BlendOperationAlpha { get; set; } Property Value Type Description D3D11BlendOperation | Improve this Doc View Source DestinationBlend Gets or sets the operation to perform on the current RGB value in the render target. Declaration public D3D11BlendValue DestinationBlend { get; set; } Property Value Type Description D3D11BlendValue | Improve this Doc View Source DestinationBlendAlpha Gets or sets the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. Declaration public D3D11BlendValue DestinationBlendAlpha { get; set; } Property Value Type Description D3D11BlendValue | Improve this Doc View Source IsBlendEnabled Gets or sets a value indicating whether blending is enabled. Declaration public bool IsBlendEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RenderTargetWriteMask Gets or sets a write mask. Declaration public D3D11ColorWriteEnables RenderTargetWriteMask { get; set; } Property Value Type Description D3D11ColorWriteEnables | Improve this Doc View Source SourceBlend Gets or sets the operation to perform on the RGB value that the pixel shader outputs. Declaration public D3D11BlendValue SourceBlend { get; set; } Property Value Type Description D3D11BlendValue | Improve this Doc View Source SourceBlendAlpha Gets or sets the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. Declaration public D3D11BlendValue SourceBlendAlpha { get; set; } Property Value Type Description D3D11BlendValue Methods | Improve this Doc View Source Equals(D3D11RenderTargetBlendDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11RenderTargetBlendDesc other) Parameters Type Name Description D3D11RenderTargetBlendDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11RenderTargetBlendDesc, D3D11RenderTargetBlendDesc) Compares two D3D11RenderTargetBlendDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11RenderTargetBlendDesc left, D3D11RenderTargetBlendDesc right) Parameters Type Name Description D3D11RenderTargetBlendDesc left The left D3D11RenderTargetBlendDesc to compare. D3D11RenderTargetBlendDesc right The right D3D11RenderTargetBlendDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11RenderTargetBlendDesc, D3D11RenderTargetBlendDesc) Compares two D3D11RenderTargetBlendDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11RenderTargetBlendDesc left, D3D11RenderTargetBlendDesc right) Parameters Type Name Description D3D11RenderTargetBlendDesc left The left D3D11RenderTargetBlendDesc to compare. D3D11RenderTargetBlendDesc right The right D3D11RenderTargetBlendDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.html",
    "title": "Struct D3D11QueryDataStreamOutputStatistics",
    "keywords": "Struct D3D11QueryDataStreamOutputStatistics Query information about the amount of data streamed out to the stream-output buffers in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . Implements IEquatable < D3D11QueryDataStreamOutputStatistics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11QueryDataStreamOutputStatistics : IEquatable<D3D11QueryDataStreamOutputStatistics> Properties | Improve this Doc View Source NumPrimitivesWritten Gets the number of primitives (that is, points, lines, and triangles) written to the stream-output buffers. Declaration public ulong NumPrimitivesWritten { get; } Property Value Type Description UInt64 | Improve this Doc View Source PrimitivesStorageNeeded Gets the number of primitives that would have been written to the stream-output buffers if there had been enough space for them all. Declaration public ulong PrimitivesStorageNeeded { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Equals(D3D11QueryDataStreamOutputStatistics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11QueryDataStreamOutputStatistics other) Parameters Type Name Description D3D11QueryDataStreamOutputStatistics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11QueryDataStreamOutputStatistics, D3D11QueryDataStreamOutputStatistics) Compares two D3D11QueryDataStreamOutputStatistics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11QueryDataStreamOutputStatistics left, D3D11QueryDataStreamOutputStatistics right) Parameters Type Name Description D3D11QueryDataStreamOutputStatistics left The left D3D11QueryDataStreamOutputStatistics to compare. D3D11QueryDataStreamOutputStatistics right The right D3D11QueryDataStreamOutputStatistics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11QueryDataStreamOutputStatistics, D3D11QueryDataStreamOutputStatistics) Compares two D3D11QueryDataStreamOutputStatistics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11QueryDataStreamOutputStatistics left, D3D11QueryDataStreamOutputStatistics right) Parameters Type Name Description D3D11QueryDataStreamOutputStatistics left The left D3D11QueryDataStreamOutputStatistics to compare. D3D11QueryDataStreamOutputStatistics right The right D3D11QueryDataStreamOutputStatistics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.html",
    "title": "Struct D3D11QueryDataPipelineStatistics",
    "keywords": "Struct D3D11QueryDataPipelineStatistics Query information about graphics-pipeline activity in between calls to Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . Implements IEquatable < D3D11QueryDataPipelineStatistics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11QueryDataPipelineStatistics : IEquatable<D3D11QueryDataPipelineStatistics> Properties | Improve this Doc View Source ComputeShaderInvocations Gets the number of times a compute shader was invoked. Declaration public ulong ComputeShaderInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source DomainShaderInvocations Gets the number of times a domain shader was invoked. Declaration public ulong DomainShaderInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source GeometryShaderInvocations Gets the number of times a geometry shader was invoked. Declaration public ulong GeometryShaderInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source GeometryShaderPrimitives Gets the number of primitives output by a geometry shader. Declaration public ulong GeometryShaderPrimitives { get; } Property Value Type Description UInt64 | Improve this Doc View Source HullShaderInvocations Gets the number of times a hull shader was invoked. Declaration public ulong HullShaderInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source InputAssemblerPrimitives Gets the number of primitives read by the input assembler. Declaration public ulong InputAssemblerPrimitives { get; } Property Value Type Description UInt64 | Improve this Doc View Source InputAssemblerVertices Gets the number of vertices read by input assembler. Declaration public ulong InputAssemblerVertices { get; } Property Value Type Description UInt64 | Improve this Doc View Source PixelShaderInvocations Gets the number of times a pixel shader was invoked. Declaration public ulong PixelShaderInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source RasterizerInvocations Gets the number of primitives that were sent to the rasterizer. Declaration public ulong RasterizerInvocations { get; } Property Value Type Description UInt64 | Improve this Doc View Source RasterizerPrimitives Gets the number of primitives that were rendered. Declaration public ulong RasterizerPrimitives { get; } Property Value Type Description UInt64 | Improve this Doc View Source VertexShaderInvocations Gets the number of times a vertex shader was invoked. Declaration public ulong VertexShaderInvocations { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source Equals(D3D11QueryDataPipelineStatistics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11QueryDataPipelineStatistics other) Parameters Type Name Description D3D11QueryDataPipelineStatistics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11QueryDataPipelineStatistics, D3D11QueryDataPipelineStatistics) Compares two D3D11QueryDataPipelineStatistics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11QueryDataPipelineStatistics left, D3D11QueryDataPipelineStatistics right) Parameters Type Name Description D3D11QueryDataPipelineStatistics left The left D3D11QueryDataPipelineStatistics to compare. D3D11QueryDataPipelineStatistics right The right D3D11QueryDataPipelineStatistics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11QueryDataPipelineStatistics, D3D11QueryDataPipelineStatistics) Compares two D3D11QueryDataPipelineStatistics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11QueryDataPipelineStatistics left, D3D11QueryDataPipelineStatistics right) Parameters Type Name Description D3D11QueryDataPipelineStatistics left The left D3D11QueryDataPipelineStatistics to compare. D3D11QueryDataPipelineStatistics right The right D3D11QueryDataPipelineStatistics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Query.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Query.html",
    "title": "Class D3D11Query",
    "keywords": "Class D3D11Query A query interface queries information from the GPU. Inheritance Object D3D11DeviceChild D3D11Asynchronous D3D11Query Implements IDisposable ID3D11Releasable Inherited Members D3D11Asynchronous.DataSize D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Query : D3D11Asynchronous, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets a query description. Declaration public D3D11QueryDesc Description { get; } Property Value Type Description D3D11QueryDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.html",
    "title": "Enum D3D11PrimitiveTopology",
    "keywords": "Enum D3D11PrimitiveTopology How the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11PrimitiveTopology Fields Name Description LineList Interpret the vertex data as a list of lines. LineListAdj Interpret the vertex data as list of lines with adjacency data. LineStrip Interpret the vertex data as a line strip. LineStripAdj Interpret the vertex data as line strip with adjacency data. PatchList10ControlPoint Interpret the vertex data as a patch list. PatchList11ControlPoint Interpret the vertex data as a patch list. PatchList12ControlPoint Interpret the vertex data as a patch list. PatchList13ControlPoint Interpret the vertex data as a patch list. PatchList14ControlPoint Interpret the vertex data as a patch list. PatchList15ControlPoint Interpret the vertex data as a patch list. PatchList16ControlPoint Interpret the vertex data as a patch list. PatchList17ControlPoint Interpret the vertex data as a patch list. PatchList18ControlPoint Interpret the vertex data as a patch list. PatchList19ControlPoint Interpret the vertex data as a patch list. PatchList1ControlPoint Interpret the vertex data as a patch list. PatchList20ControlPoint Interpret the vertex data as a patch list. PatchList21ControlPoint Interpret the vertex data as a patch list. PatchList22ControlPoint Interpret the vertex data as a patch list. PatchList23ControlPoint Interpret the vertex data as a patch list. PatchList24ControlPoint Interpret the vertex data as a patch list. PatchList25ControlPoint Interpret the vertex data as a patch list. PatchList26ControlPoint Interpret the vertex data as a patch list. PatchList27ControlPoint Interpret the vertex data as a patch list. PatchList28ControlPoint Interpret the vertex data as a patch list. PatchList29ControlPoint Interpret the vertex data as a patch list. PatchList2ControlPoint Interpret the vertex data as a patch list. PatchList30ControlPoint Interpret the vertex data as a patch list. PatchList31ControlPoint Interpret the vertex data as a patch list. PatchList32ControlPoint Interpret the vertex data as a patch list. PatchList3ControlPoint Interpret the vertex data as a patch list. PatchList4ControlPoint Interpret the vertex data as a patch list. PatchList5ControlPoint Interpret the vertex data as a patch list. PatchList6ControlPoint Interpret the vertex data as a patch list. PatchList7ControlPoint Interpret the vertex data as a patch list. PatchList8ControlPoint Interpret the vertex data as a patch list. PatchList9ControlPoint Interpret the vertex data as a patch list. PointList Interpret the vertex data as a list of points. TriangleList Interpret the vertex data as a list of triangles. TriangleListAdj Interpret the vertex data as list of triangles with adjacency data. TriangleStrip Interpret the vertex data as a triangle strip. TriangleStripAdj Interpret the vertex data as triangle strip with adjacency data. Undefined The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Primitive.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Primitive.html",
    "title": "Enum D3D11Primitive",
    "keywords": "Enum D3D11Primitive Indicates how the pipeline interprets geometry or hull shader input primitives. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11Primitive Fields Name Description Line Interpret the input primitive as a line. LineAdj Interpret the input primitive as a line with adjacency data. Patch10ControlPoint Interpret the input primitive as a control point patch. Patch11ControlPoint Interpret the input primitive as a control point patch. Patch12ControlPoint Interpret the input primitive as a control point patch. Patch13ControlPoint Interpret the input primitive as a control point patch. Patch14ControlPoint Interpret the input primitive as a control point patch. Patch15ControlPoint Interpret the input primitive as a control point patch. Patch16ControlPoint Interpret the input primitive as a control point patch. Patch17ControlPoint Interpret the input primitive as a control point patch. Patch18ControlPoint Interpret the input primitive as a control point patch. Patch19ControlPoint Interpret the input primitive as a control point patch. Patch1ControlPoint Interpret the input primitive as a control point patch. Patch20ControlPoint Interpret the input primitive as a control point patch. Patch21ControlPoint Interpret the input primitive as a control point patch. Patch22ControlPoint Interpret the input primitive as a control point patch. Patch23ControlPoint Interpret the input primitive as a control point patch. Patch24ControlPoint Interpret the input primitive as a control point patch. Patch25ControlPoint Interpret the input primitive as a control point patch. Patch26ControlPoint Interpret the input primitive as a control point patch. Patch27ControlPoint Interpret the input primitive as a control point patch. Patch28ControlPoint Interpret the input primitive as a control point patch. Patch29ControlPoint Interpret the input primitive as a control point patch. Patch2ControlPoint Interpret the input primitive as a control point patch. Patch30ControlPoint Interpret the input primitive as a control point patch. Patch31ControlPoint Interpret the input primitive as a control point patch. Patch32ControlPoint Interpret the input primitive as a control point patch. Patch3ControlPoint Interpret the input primitive as a control point patch. Patch4ControlPoint Interpret the input primitive as a control point patch. Patch5ControlPoint Interpret the input primitive as a control point patch. Patch6ControlPoint Interpret the input primitive as a control point patch. Patch7ControlPoint Interpret the input primitive as a control point patch. Patch8ControlPoint Interpret the input primitive as a control point patch. Patch9ControlPoint Interpret the input primitive as a control point patch. Point Interpret the input primitive as a point. Triangle Interpret the input primitive as a triangle. TriangleAdj Interpret the input primitive as a triangle with adjacency data. Undefined The shader has not been initialized with an input primitive type."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Predicate.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Predicate.html",
    "title": "Class D3D11Predicate",
    "keywords": "Class D3D11Predicate A predicate interface determines whether geometry should be processed depending on the results of a previous draw call. Inheritance Object D3D11DeviceChild D3D11Asynchronous D3D11Predicate Implements IDisposable ID3D11Releasable Inherited Members D3D11Asynchronous.DataSize D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Predicate : D3D11Asynchronous, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets a query description. Declaration public D3D11QueryDesc Description { get; } Property Value Type Description D3D11QueryDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1PixelFormat.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1PixelFormat.html",
    "title": "Struct D2D1PixelFormat",
    "keywords": "Struct D2D1PixelFormat Contains the data format and alpha mode for a bitmap or render target. Implements IEquatable < D2D1PixelFormat > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1PixelFormat : IEquatable<D2D1PixelFormat> Constructors | Improve this Doc View Source D2D1PixelFormat(DxgiFormat, D2D1AlphaMode) Initializes a new instance of the D2D1PixelFormat struct. Declaration public D2D1PixelFormat(DxgiFormat format, D2D1AlphaMode alphaMode) Parameters Type Name Description DxgiFormat format A value that specifies the size and arrangement of channels in each pixel. D2D1AlphaMode alphaMode A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unknown. Properties | Improve this Doc View Source AlphaMode Gets or sets a value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unknown. Declaration public D2D1AlphaMode AlphaMode { get; set; } Property Value Type Description D2D1AlphaMode | Improve this Doc View Source Default Gets default format (Unknown, Unknown). Declaration public static D2D1PixelFormat Default { get; } Property Value Type Description D2D1PixelFormat | Improve this Doc View Source Format Gets or sets a value that specifies the size and arrangement of channels in each pixel. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat Methods | Improve this Doc View Source Equals(D2D1PixelFormat) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1PixelFormat other) Parameters Type Name Description D2D1PixelFormat other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1PixelFormat, D2D1PixelFormat) Compares two D2D1PixelFormat objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1PixelFormat left, D2D1PixelFormat right) Parameters Type Name Description D2D1PixelFormat left The left D2D1PixelFormat to compare. D2D1PixelFormat right The right D2D1PixelFormat to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1PixelFormat, D2D1PixelFormat) Compares two D2D1PixelFormat objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1PixelFormat left, D2D1PixelFormat right) Parameters Type Name Description D2D1PixelFormat left The left D2D1PixelFormat to compare. D2D1PixelFormat right The right D2D1PixelFormat to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix5X4F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix5X4F.html",
    "title": "Struct D2D1Matrix5X4F",
    "keywords": "Struct D2D1Matrix5X4F Represents a 5-by-4 matrix. Implements IEquatable < D2D1Matrix5X4F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Matrix5X4F : IEquatable<D2D1Matrix5X4F> Properties | Improve this Doc View Source M11 Gets or sets the value in the first row and first column of the matrix. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column of the matrix. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column of the matrix. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M14 Gets or sets the value in the first row and fourth column of the matrix. Declaration public float M14 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column of the matrix. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column of the matrix. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column of the matrix. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M24 Gets or sets the value in the second row and fourth column of the matrix. Declaration public float M24 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column of the matrix. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column of the matrix. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column of the matrix. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M34 Gets or sets the value in the third row and fourth column of the matrix. Declaration public float M34 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column of the matrix. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column of the matrix. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column of the matrix. Declaration public float M43 { get; set; } Property Value Type Description Single | Improve this Doc View Source M44 Gets or sets the value in the fourth row and fourth column of the matrix. Declaration public float M44 { get; set; } Property Value Type Description Single | Improve this Doc View Source M51 Gets or sets the value in the fifth row and first column of the matrix. Declaration public float M51 { get; set; } Property Value Type Description Single | Improve this Doc View Source M52 Gets or sets the value in the fifth row and second column of the matrix. Declaration public float M52 { get; set; } Property Value Type Description Single | Improve this Doc View Source M53 Gets or sets the value in the fifth row and third column of the matrix. Declaration public float M53 { get; set; } Property Value Type Description Single | Improve this Doc View Source M54 Gets or sets the value in the fifth row and fourth column of the matrix. Declaration public float M54 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Matrix5X4F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Matrix5X4F other) Parameters Type Name Description D2D1Matrix5X4F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Matrix5X4F, D2D1Matrix5X4F) Compares two D2D1Matrix5X4F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Matrix5X4F left, D2D1Matrix5X4F right) Parameters Type Name Description D2D1Matrix5X4F left The left D2D1Matrix5X4F to compare. D2D1Matrix5X4F right The right D2D1Matrix5X4F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Matrix5X4F, D2D1Matrix5X4F) Compares two D2D1Matrix5X4F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Matrix5X4F left, D2D1Matrix5X4F right) Parameters Type Name Description D2D1Matrix5X4F left The left D2D1Matrix5X4F to compare. D2D1Matrix5X4F right The right D2D1Matrix5X4F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix4X4F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix4X4F.html",
    "title": "Struct D2D1Matrix4X4F",
    "keywords": "Struct D2D1Matrix4X4F Represents a 4-by-4 matrix. Implements IEquatable < D2D1Matrix4X4F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Matrix4X4F : IEquatable<D2D1Matrix4X4F> Properties | Improve this Doc View Source M11 Gets or sets the value in the first row and first column of the matrix. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column of the matrix. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column of the matrix. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M14 Gets or sets the value in the first row and fourth column of the matrix. Declaration public float M14 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column of the matrix. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column of the matrix. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column of the matrix. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M24 Gets or sets the value in the second row and fourth column of the matrix. Declaration public float M24 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column of the matrix. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column of the matrix. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column of the matrix. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M34 Gets or sets the value in the third row and fourth column of the matrix. Declaration public float M34 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column of the matrix. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column of the matrix. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column of the matrix. Declaration public float M43 { get; set; } Property Value Type Description Single | Improve this Doc View Source M44 Gets or sets the value in the fourth row and fourth column of the matrix. Declaration public float M44 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Matrix4X4F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Matrix4X4F other) Parameters Type Name Description D2D1Matrix4X4F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Matrix4X4F, D2D1Matrix4X4F) Compares two D2D1Matrix4X4F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Matrix4X4F left, D2D1Matrix4X4F right) Parameters Type Name Description D2D1Matrix4X4F left The left D2D1Matrix4X4F to compare. D2D1Matrix4X4F right The right D2D1Matrix4X4F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Matrix4X4F, D2D1Matrix4X4F) Compares two D2D1Matrix4X4F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Matrix4X4F left, D2D1Matrix4X4F right) Parameters Type Name Description D2D1Matrix4X4F left The left D2D1Matrix4X4F to compare. D2D1Matrix4X4F right The right D2D1Matrix4X4F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1ArcSegment.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1ArcSegment.html",
    "title": "Struct D2D1ArcSegment",
    "keywords": "Struct D2D1ArcSegment Describes an elliptical arc between two points. Implements IEquatable < D2D1ArcSegment > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1ArcSegment : IEquatable<D2D1ArcSegment> Constructors | Improve this Doc View Source D2D1ArcSegment(D2D1Point2F, D2D1SizeF, Single, D2D1SweepDirection, D2D1ArcSize) Initializes a new instance of the D2D1ArcSegment struct. Declaration public D2D1ArcSegment(D2D1Point2F point, D2D1SizeF size, float rotationAngle, D2D1SweepDirection sweepDirection, D2D1ArcSize arcSize) Parameters Type Name Description D2D1Point2F point The end point of the arc. D2D1SizeF size The x-radius and y-radius of the arc. Single rotationAngle A value that specifies how many degrees in the clockwise direction the ellipse is rotated relative to the current coordinate system. D2D1SweepDirection sweepDirection A value that specifies whether the arc sweep is clockwise or counterclockwise. D2D1ArcSize arcSize A value that specifies whether the given arc is larger than 180 degrees. Properties | Improve this Doc View Source ArcSize Gets or sets a value that specifies whether the given arc is larger than 180 degrees. Declaration public D2D1ArcSize ArcSize { get; set; } Property Value Type Description D2D1ArcSize | Improve this Doc View Source Point Gets or sets the end point of the arc. Declaration public D2D1Point2F Point { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source RotationAngle Gets or sets a value that specifies how many degrees in the clockwise direction the ellipse is rotated relative to the current coordinate system. Declaration public float RotationAngle { get; set; } Property Value Type Description Single | Improve this Doc View Source Size Gets or sets the x-radius and y-radius of the arc. Declaration public D2D1SizeF Size { get; set; } Property Value Type Description D2D1SizeF | Improve this Doc View Source SweepDirection Gets or sets a value that specifies whether the arc sweep is clockwise or counterclockwise. Declaration public D2D1SweepDirection SweepDirection { get; set; } Property Value Type Description D2D1SweepDirection Methods | Improve this Doc View Source Equals(D2D1ArcSegment) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1ArcSegment other) Parameters Type Name Description D2D1ArcSegment other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1ArcSegment, D2D1ArcSegment) Compares two D2D1ArcSegment objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1ArcSegment left, D2D1ArcSegment right) Parameters Type Name Description D2D1ArcSegment left The left D2D1ArcSegment to compare. D2D1ArcSegment right The right D2D1ArcSegment to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1ArcSegment, D2D1ArcSegment) Compares two D2D1ArcSegment objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1ArcSegment left, D2D1ArcSegment right) Parameters Type Name Description D2D1ArcSegment left The left D2D1ArcSegment to compare. D2D1ArcSegment right The right D2D1ArcSegment to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMVector.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMVector.html",
    "title": "Struct XMVector",
    "keywords": "Struct XMVector A vector of four 32-bit floating-point or integer components. Implements IEquatable < XMVector > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMVector : IEquatable<XMVector> Constructors | Improve this Doc View Source XMVector(Byte[]) Initializes a new instance of the XMVector struct. Declaration public XMVector(byte[] array) Parameters Type Name Description Byte [] array The components. | Improve this Doc View Source XMVector(Int32[]) Initializes a new instance of the XMVector struct. Declaration public XMVector(int[] array) Parameters Type Name Description Int32 [] array The components. | Improve this Doc View Source XMVector(Single, Single, Single, Single) Initializes a new instance of the XMVector struct. Declaration public XMVector(float x, float y, float z, float w) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. Single w The w component. | Improve this Doc View Source XMVector(Single[]) Initializes a new instance of the XMVector struct. Declaration public XMVector(float[] array) Parameters Type Name Description Single [] array The components. | Improve this Doc View Source XMVector(UInt32[]) Initializes a new instance of the XMVector struct. Declaration public XMVector(uint[] array) Parameters Type Name Description UInt32 [] array The components. Properties | Improve this Doc View Source Epsilon Gets a vector, each of whose components are epsilon (1.192092896e-7). Declaration public static XMVector Epsilon { get; } Property Value Type Description XMVector | Improve this Doc View Source FalseInt Gets the zero (false) vector. Declaration public static XMVector FalseInt { get; } Property Value Type Description XMVector | Improve this Doc View Source Infinity Gets a vector, each of whose components are infinity (0x7F800000). Declaration public static XMVector Infinity { get; } Property Value Type Description XMVector | Improve this Doc View Source IntW Gets or sets the w component. Declaration public uint IntW { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source IntX Gets or sets the x component. Declaration public uint IntX { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source IntY Gets or sets the y component. Declaration public uint IntY { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source IntZ Gets or sets the z component. Declaration public uint IntZ { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Item[Int32] Gets or sets a component by index. Declaration public float this[int index] { get; set; } Parameters Type Name Description Int32 index The index of the component. Property Value Type Description Single A float value. | Improve this Doc View Source One Gets a vector, each of whose components are one. Declaration public static XMVector One { get; } Property Value Type Description XMVector | Improve this Doc View Source QNaN Gets a vector, each of whose components are QNaN (0x7CF00000). Declaration public static XMVector QNaN { get; } Property Value Type Description XMVector | Improve this Doc View Source SignMask Gets a vector, each of whose components are the sign mask (0x80000000). Declaration public static XMVector SignMask { get; } Property Value Type Description XMVector | Improve this Doc View Source TrueInt Gets a vector, each of whose components represents true (0xFFFFFFFF). Declaration public static XMVector TrueInt { get; } Property Value Type Description XMVector | Improve this Doc View Source W Gets or sets the w component. Declaration public float W { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x component. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y component. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z component. Declaration public float Z { get; set; } Property Value Type Description Single | Improve this Doc View Source Zero Gets the zero vector. Declaration public static XMVector Zero { get; } Property Value Type Description XMVector Methods | Improve this Doc View Source Abs() Computes the absolute value of each component of a vector. Declaration public XMVector Abs() Returns Type Description XMVector Returns a vector whose components are the absolute value of the corresponding components of V. | Improve this Doc View Source ACos() Computes the arccosine of each component of a vector. Declaration public XMVector ACos() Returns Type Description XMVector Returns a vector whose components are the arccosine of the corresponding components of V. | Improve this Doc View Source ACosEst() Estimates the arccosine of each component of a vector. Declaration public XMVector ACosEst() Returns Type Description XMVector Returns a vector whose components are estimates of the arccosine of the corresponding components of V. | Improve this Doc View Source Add(XMVector, XMVector) Computes the sum of two vectors. Declaration public static XMVector Add(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector that is the sum of V1 and V2. | Improve this Doc View Source AddAngles(XMVector, XMVector) Adds two vectors representing angles. Declaration public static XMVector AddAngles(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 First vector of angles. Each angle must satisfy -XM_PI <= V1 < XM_PI. XMVector v2 Second vector of angles. Each angle must satisfy -XM_2PI <= V2 < XM_2PI. Returns Type Description XMVector Returns a vector whose components are the sums of the angles of the corresponding components. Each component of the returned vector will be an angle less than XM_PI and greater than or equal to -XM_PI. | Improve this Doc View Source AndComplementInt(XMVector, XMVector) Computes the logical AND of one vector with the negation of a second vector, treating each component as an unsigned integer. Declaration public static XMVector AndComplementInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector whose components are the logical AND of each of the components of V1 with the negation of the corresponding components of V2. | Improve this Doc View Source AndInt(XMVector, XMVector) Computes the logical AND of two vectors, treating each component as an unsigned integer. Declaration public static XMVector AndInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector each of whose components are the logical AND of the corresponding components of V1 and V2. | Improve this Doc View Source ASin() Computes the arcsine of each component of a vector. Declaration public XMVector ASin() Returns Type Description XMVector Returns a vector whose components are the arcsine of the corresponding components of V. | Improve this Doc View Source ASinEst() Estimates the arcsine of each component of a vector. Declaration public XMVector ASinEst() Returns Type Description XMVector Returns a vector whose components are estimates of the arcsine of the corresponding components of V. | Improve this Doc View Source ATan() Computes the arctangent of each component of a vector. Declaration public XMVector ATan() Returns Type Description XMVector Returns a vector whose components are the arctangent of the corresponding components of V. | Improve this Doc View Source ATan2(XMVector, XMVector) Computes the arctangent of Y/ X. Declaration public static XMVector ATan2(XMVector y, XMVector x) Parameters Type Name Description XMVector y The first vector. XMVector x The second vector. Returns Type Description XMVector Returns a vector. Each component is the arctangent of the corresponding Y component divided by the corresponding X component. Each component is in the range (-PI/2, PI/2). | Improve this Doc View Source ATan2Est(XMVector, XMVector) Estimates the arctangent of Y/ X. Declaration public static XMVector ATan2Est(XMVector y, XMVector x) Parameters Type Name Description XMVector y The first vector. XMVector x The second vector. Returns Type Description XMVector Returns a vector. Each component is an estimate of the arctangent of the corresponding Y component divided by the corresponding X component. Each component is in the range (-PI/2, PI/2). | Improve this Doc View Source ATanEst() Estimates the arctangent of each component of a vector. Declaration public XMVector ATanEst() Returns Type Description XMVector Returns a vector whose components are estimates of the arctangent of the corresponding components of V. | Improve this Doc View Source BaryCentric(XMVector, XMVector, XMVector, Single, Single) Returns a point in Barycentric coordinates, using the specified position vectors. Declaration public static XMVector BaryCentric(XMVector position0, XMVector position1, XMVector position2, float f, float g) Parameters Type Name Description XMVector position0 The first position. XMVector position1 The second position. XMVector position2 The third position. Single f The first weighting factor. Single g The second weighting factor. Returns Type Description XMVector Returns the Barycentric coordinates. | Improve this Doc View Source BaryCentricV(XMVector, XMVector, XMVector, XMVector, XMVector) Returns a point in Barycentric coordinates, using the specified position vectors. Declaration public static XMVector BaryCentricV(XMVector position0, XMVector position1, XMVector position2, XMVector f, XMVector g) Parameters Type Name Description XMVector position0 The first position. XMVector position1 The second position. XMVector position2 The third position. XMVector f The first weighting factors. XMVector g The second weighting factors. Returns Type Description XMVector Returns the Barycentric coordinates. | Improve this Doc View Source CatmullRom(XMVector, XMVector, XMVector, XMVector, Single) Performs a Catmull-Rom interpolation, using the specified position vectors. Declaration public static XMVector CatmullRom(XMVector position0, XMVector position1, XMVector position2, XMVector position3, float t) Parameters Type Name Description XMVector position0 The first position. XMVector position1 The second position. XMVector position2 The third position. XMVector position3 The fourth position. Single t The interpolating control factor. Returns Type Description XMVector Returns the results of the Catmull-Rom interpolation. | Improve this Doc View Source CatmullRomV(XMVector, XMVector, XMVector, XMVector, XMVector) Performs a Catmull-Rom interpolation, using the specified position vectors. Declaration public static XMVector CatmullRomV(XMVector position0, XMVector position1, XMVector position2, XMVector position3, XMVector t) Parameters Type Name Description XMVector position0 The first position. XMVector position1 The second position. XMVector position2 The third position. XMVector position3 The fourth position. XMVector t The interpolating control factor for the corresponding components of the position. Returns Type Description XMVector Returns the results of the Catmull-Rom interpolation. | Improve this Doc View Source Ceiling() Computes the ceiling of each component of a vector. Declaration public XMVector Ceiling() Returns Type Description XMVector Returns a vector whose components are the ceiling of the corresponding components of V. | Improve this Doc View Source Clamp(XMVector, XMVector) Clamps the components of a vector to a specified minimum and maximum range. Declaration public XMVector Clamp(XMVector min, XMVector max) Parameters Type Name Description XMVector min Minimum range vector. XMVector max Maximum range vector. Returns Type Description XMVector Returns a vector whose components are clamped to the specified minimum and maximum values. | Improve this Doc View Source ConvertFloatToInt(UInt32) Converts an XMVector with float components to an XMVector with int components and applies a uniform bias. Declaration public XMVector ConvertFloatToInt(uint mulExponent) Parameters Type Name Description UInt32 mulExponent Each component of the vector will be converted to a int and then multiplied by two raised to the mulExponent power. Returns Type Description XMVector Returns the converted vector, where each component has been multiplied by two raised to the mulExponent power. | Improve this Doc View Source ConvertFloatToUInt(UInt32) Converts an XMVector with float components to an XMVector with uint components and applies a uniform bias. Declaration public XMVector ConvertFloatToUInt(uint mulExponent) Parameters Type Name Description UInt32 mulExponent Each component of the vector will be converted to a int and then multiplied by two raised to the mulExponent power. Returns Type Description XMVector Returns the converted vector, where each component has been multiplied by two raised to the mulExponent power. | Improve this Doc View Source ConvertIntToFloat(UInt32) Converts an XMVector with int components to an XMVector with float components and applies a uniform bias. Declaration public XMVector ConvertIntToFloat(uint divExponent) Parameters Type Name Description UInt32 divExponent Each component of the vector will be converted to a float and then divided by two raised to the divExponent power. Returns Type Description XMVector Returns the converted vector, where each component has been divided by two raised to the divExponent power. | Improve this Doc View Source ConvertUIntToFloat(UInt32) Converts an XMVector with uint components to an XMVector with float components and applies a uniform bias. Declaration public XMVector ConvertUIntToFloat(uint divExponent) Parameters Type Name Description UInt32 divExponent Each component of the vector will be converted to a float and then divided by two raised to the divExponent power. Returns Type Description XMVector Returns the converted vector, where each component has been divided by two raised to the divExponent power. | Improve this Doc View Source Cos() Computes the cosine of each component of a vector. Declaration public XMVector Cos() Returns Type Description XMVector Returns a vector. Each component is the cosine of the corresponding component of V. | Improve this Doc View Source CosEst() Estimates the cosine of each component of a vector. Declaration public XMVector CosEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the cosine of the corresponding component of V. | Improve this Doc View Source CosH() Computes the hyperbolic cosine of each component of a vector. Declaration public XMVector CosH() Returns Type Description XMVector Returns a vector. Each component is the hyperbolic cosine of the corresponding component of V. | Improve this Doc View Source Divide(XMVector, XMVector) Divides one instance of XMVECTOR by a second instance, returning the result in a third instance. Declaration public static XMVector Divide(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The dividends. XMVector v2 The divisors. Returns Type Description XMVector The quotient. | Improve this Doc View Source Equal(XMVector, XMVector) Performs a per-component test for equality of two vectors. Declaration public static XMVector Equal(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source EqualInt(XMVector, XMVector) Performs a per-component test for the equality of two vectors, treating each component as an unsigned integer. Declaration public static XMVector EqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source EqualIntR(out XMComparisonRecord, XMVector, XMVector) Performs a per-component test for equality of two vectors, treating each component as an unsigned integer. In addition, this function sets a comparison value. Declaration public static XMVector EqualIntR(out XMComparisonRecord record, XMVector v1, XMVector v2) Parameters Type Name Description XMComparisonRecord record A comparison value. XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source EqualR(out XMComparisonRecord, XMVector, XMVector) Performs a per-component test for equality of two vectors and sets a comparison value. Declaration public static XMVector EqualR(out XMComparisonRecord record, XMVector v1, XMVector v2) Parameters Type Name Description XMComparisonRecord record A comparison value. XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Equals(XMVector) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMVector other) Parameters Type Name Description XMVector other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source Exp() Computes two raised to the power for each component. Declaration public XMVector Exp() Returns Type Description XMVector Returns a vector whose components are two raised to the power of the corresponding component of V. | Improve this Doc View Source Exp2() Computes two raised to the power for each component. Declaration public XMVector Exp2() Returns Type Description XMVector Returns a vector whose components are two raised to the power of the corresponding component of V. | Improve this Doc View Source ExpE() Computes e (~2.71828) raised to the power for each component. Declaration public XMVector ExpE() Returns Type Description XMVector Returns a vector whose components are e raised to the power of the corresponding component of V. | Improve this Doc View Source Floor() Computes the floor of each component of a vector. Declaration public XMVector Floor() Returns Type Description XMVector Returns a vector whose components are the floor of the corresponding components of V. | Improve this Doc View Source FromBinaryConstant(UInt32, UInt32, UInt32, UInt32) Creates a vector, each of whose components is either 0.0f or 1.0f. Declaration public static XMVector FromBinaryConstant(uint c0, uint c1, uint c2, uint c3) Parameters Type Name Description UInt32 c0 This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C0 is 0, the x-component of the returned vector will be 0.0f. Otherwise, the x-component will be 1.0f. UInt32 c1 This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C1 is 0, the y-component of the returned vector will be 0.0f. Otherwise, the y-component will be 1.0f. UInt32 c2 This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C2 is 0, the z-component of the returned vector will be 0.0f. Otherwise, the z-component will be 1.0f. UInt32 c3 This parameter must be a number (an immediate value, either 0 or 1) and not a variable. If C3 is 0, the w-component of the returned vector will be 0.0f. Otherwise, the w-component will be 1.0f. Returns Type Description XMVector Returns a vector, each of whose components is either 0.0f or 1.0f. | Improve this Doc View Source FromBinaryConstant(UInt32[]) Creates a vector, each of whose components is either 0.0f or 1.0f. Declaration public static XMVector FromBinaryConstant(uint[] constants) Parameters Type Name Description UInt32 [] constants An array of binary number. Returns Type Description XMVector Returns a vector, each of whose components is either 0.0f or 1.0f. | Improve this Doc View Source FromFloat(Single, Single, Single, Single) Creates a vector using four floating-point values. Declaration public static XMVector FromFloat(float x, float y, float z, float w) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. Single w The w component. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source FromInt(UInt32, UInt32, UInt32, UInt32) Creates a vector with unsigned integer components. Declaration public static XMVector FromInt(uint x, uint y, uint z, uint w) Parameters Type Name Description UInt32 x The x component. UInt32 y The y component. UInt32 z The z component. UInt32 w The w component. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source FromSplatConstant(Int32, UInt32) Creates a vector with identical floating-point components. Each component is a constant divided by two raised to an integer exponent. Declaration public static XMVector FromSplatConstant(int intConstant, uint divExponent) Parameters Type Name Description Int32 intConstant This value will be converted to a floating-point number and divided by two raised to the divExponent power. The result is replicated to each component of the returned vector. UInt32 divExponent Describes the exponent applied to the quotient. This parameter must be a number (an immediate value) and not a variable. Returns Type Description XMVector Returns a vector with identical floating-point components. Each component is a constant divided by two raised to an integer exponent. | Improve this Doc View Source FromSplatConstantInt(Int32) Creates a vector with identical integer components. Declaration public static XMVector FromSplatConstantInt(int intConstant) Parameters Type Name Description Int32 intConstant Value to replicate to each component of the returned vector. Returns Type Description XMVector Returns a vector, each of whose components is intConstant . | Improve this Doc View Source GetByIndex(Int32) Gets the value of one component by index. Declaration public float GetByIndex(int index) Parameters Type Name Description Int32 index The index of the component. Returns Type Description Single The component. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source GetIntByIndex(Int32) Gets the value of one component by index. Declaration public uint GetIntByIndex(int index) Parameters Type Name Description Int32 index The index of the component. Returns Type Description UInt32 The component. | Improve this Doc View Source Greater(XMVector, XMVector) Performs a per-component test for greater-than between two vectors. Declaration public static XMVector Greater(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source GreaterOrEqual(XMVector, XMVector) Performs a per-component test for greater-than-or-equal between two vectors. Declaration public static XMVector GreaterOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source GreaterOrEqualR(out XMComparisonRecord, XMVector, XMVector) Performs a per-component test for greater-than-or-equal between two vectors and sets a comparison value. Declaration public static XMVector GreaterOrEqualR(out XMComparisonRecord record, XMVector v1, XMVector v2) Parameters Type Name Description XMComparisonRecord record A comparison value. XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source GreaterR(out XMComparisonRecord, XMVector, XMVector) Performs a per-component test for greater-than between two vectors and sets a comparison value. Declaration public static XMVector GreaterR(out XMComparisonRecord record, XMVector v1, XMVector v2) Parameters Type Name Description XMComparisonRecord record A comparison value. XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Hermite(XMVector, XMVector, XMVector, XMVector, Single) Performs a Hermite spline interpolation, using the specified vectors. Declaration public static XMVector Hermite(XMVector position0, XMVector tangent0, XMVector position1, XMVector tangent1, float t) Parameters Type Name Description XMVector position0 First position to interpolate from. XMVector tangent0 Tangent vector for the first position. XMVector position1 Second position to interpolate from. XMVector tangent1 Tangent vector for the second position. Single t Interpolation control factor. Returns Type Description XMVector Returns a vector containing the interpolation. | Improve this Doc View Source HermiteV(XMVector, XMVector, XMVector, XMVector, XMVector) Performs a Hermite spline interpolation, using the specified vectors. Declaration public static XMVector HermiteV(XMVector position0, XMVector tangent0, XMVector position1, XMVector tangent1, XMVector t) Parameters Type Name Description XMVector position0 First position to interpolate from. XMVector tangent0 Tangent vector for the first position. XMVector position1 Second position to interpolate from. XMVector tangent1 Tangent vector for the second position. XMVector t Interpolating control factor for the corresponding components of the position. Returns Type Description XMVector Returns a vector containing the interpolation. | Improve this Doc View Source InBounds(XMVector) Tests whether the components of a given vector are within set bounds. Declaration public XMVector InBounds(XMVector bounds) Parameters Type Name Description XMVector bounds Vector that determines the bounds. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source InBoundsR(out XMComparisonRecord, XMVector) Tests whether the components of a given vector are within certain bounds and sets a comparison value. Declaration public XMVector InBoundsR(out XMComparisonRecord record, XMVector bounds) Parameters Type Name Description XMComparisonRecord record A comparison value. XMVector bounds Vector that determines the bounds. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Insert(XMVector, XMVector, UInt32, UInt32, UInt32, UInt32, UInt32) Rotates a vector left by a given number of 32-bit components and insert selected elements of that result into another vector. Declaration public static XMVector Insert(XMVector vd, XMVector vs, uint leftRotateElements, uint select0, uint select1, uint select2, uint select3) Parameters Type Name Description XMVector vd Vector to insert into. XMVector vs Vector to rotate left. UInt32 leftRotateElements Number of 32-bit components by which to rotate VS left. UInt32 select0 Either 0 or 1. If one, the x-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the x-component of VD is left alone. UInt32 select1 Either 0 or 1. If one, the y-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the y-component of VD is left alone. UInt32 select2 Either 0 or 1. If one, the z-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the z-component of VD is left alone. UInt32 select3 Either 0 or 1. If one, the w-component of the rotated vector will be inserted into the corresponding component of VD. Otherwise, the w-component of VD is left alone. Returns Type Description XMVector Returns the vector that results from the rotation and insertion. | Improve this Doc View Source IsInfinite() Performs a per-component test for +/- infinity on a vector. Declaration public XMVector IsInfinite() Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source IsNaN() Performs a per-component NaN test on a vector. Declaration public XMVector IsNaN() Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Lerp(XMVector, XMVector, Single) Performs a linear interpolation between two vectors. Declaration public static XMVector Lerp(XMVector v0, XMVector v1, float t) Parameters Type Name Description XMVector v0 The first vector. XMVector v1 The second vector. Single t The interpolation control factor. Returns Type Description XMVector Returns a vector containing the interpolation. | Improve this Doc View Source LerpV(XMVector, XMVector, XMVector) Performs a linear interpolation between two vectors. Declaration public static XMVector LerpV(XMVector v0, XMVector v1, XMVector t) Parameters Type Name Description XMVector v0 The first vector. XMVector v1 The second vector. XMVector t The interpolating control factor for the corresponding components of the position. Returns Type Description XMVector Returns a vector containing the interpolation. | Improve this Doc View Source Less(XMVector, XMVector) Performs a per-component test for less-than between two vectors. Declaration public static XMVector Less(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source LessOrEqual(XMVector, XMVector) Performs a per-component test for less-than-or-equal between two vectors. Declaration public static XMVector LessOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Load(XMByte2) Loads an XMByte2 into an XMVector . Declaration public static XMVector Load(XMByte2 value) Parameters Type Name Description XMByte2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMByte4) Loads an XMByte4 into an XMVector . Declaration public static XMVector Load(XMByte4 value) Parameters Type Name Description XMByte4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMByteN2) Loads an XMByteN2 into an XMVector . Declaration public static XMVector Load(XMByteN2 value) Parameters Type Name Description XMByteN2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMByteN4) Loads an XMByteN4 into an XMVector . Declaration public static XMVector Load(XMByteN4 value) Parameters Type Name Description XMByteN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMColorRgba) Loads an XMColorRgba into an XMVector . Declaration public static XMVector Load(XMColorRgba value) Parameters Type Name Description XMColorRgba value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMDec4) Loads an XMDec4 into an XMVector . Declaration public static XMVector Load(XMDec4 value) Parameters Type Name Description XMDec4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMDecN4) Loads an XMDecN4 into an XMVector . Declaration public static XMVector Load(XMDecN4 value) Parameters Type Name Description XMDecN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMFloat3Packed) Loads an XMFloat3Packed into an XMVector . Declaration public static XMVector Load(XMFloat3Packed value) Parameters Type Name Description XMFloat3Packed value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMFloat3SharedExponent) Loads an XMFloat3SharedExponent into an XMVector . Declaration public static XMVector Load(XMFloat3SharedExponent value) Parameters Type Name Description XMFloat3SharedExponent value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMHalf2) Loads an XMHalf2 into an XMVector . Declaration public static XMVector Load(XMHalf2 value) Parameters Type Name Description XMHalf2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMHalf4) Loads an XMHalf4 into an XMVector . Declaration public static XMVector Load(XMHalf4 value) Parameters Type Name Description XMHalf4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMShort2) Loads an XMShort2 into an XMVector . Declaration public static XMVector Load(XMShort2 value) Parameters Type Name Description XMShort2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMShort4) Loads an XMShort4 into an XMVector . Declaration public static XMVector Load(XMShort4 value) Parameters Type Name Description XMShort4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMShortN2) Loads an XMShortN2 into an XMVector . Declaration public static XMVector Load(XMShortN2 value) Parameters Type Name Description XMShortN2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMShortN4) Loads an XMShortN4 into an XMVector . Declaration public static XMVector Load(XMShortN4 value) Parameters Type Name Description XMShortN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMU555) Loads an XMU555 into an XMVector . Declaration public static XMVector Load(XMU555 value) Parameters Type Name Description XMU555 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMU565) Loads an XMU565 into an XMVector . Declaration public static XMVector Load(XMU565 value) Parameters Type Name Description XMU565 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUByte2) Loads an XMUByte2 into an XMVector . Declaration public static XMVector Load(XMUByte2 value) Parameters Type Name Description XMUByte2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUByte4) Loads an XMUByte4 into an XMVector . Declaration public static XMVector Load(XMUByte4 value) Parameters Type Name Description XMUByte4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUByteN2) Loads an XMUByteN2 into an XMVector . Declaration public static XMVector Load(XMUByteN2 value) Parameters Type Name Description XMUByteN2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUByteN4) Loads an XMUByteN4 into an XMVector . Declaration public static XMVector Load(XMUByteN4 value) Parameters Type Name Description XMUByteN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUDec4) Loads an XMUDec4 into an XMVector . Declaration public static XMVector Load(XMUDec4 value) Parameters Type Name Description XMUDec4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUDecN4) Loads an XMUDecN4 into an XMVector . Declaration public static XMVector Load(XMUDecN4 value) Parameters Type Name Description XMUDecN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUDecN4XR) Loads an XMUDecN4XR into an XMVector . Declaration public static XMVector Load(XMUDecN4XR value) Parameters Type Name Description XMUDecN4XR value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUNibble4) Loads an XMUNibble4 into an XMVector . Declaration public static XMVector Load(XMUNibble4 value) Parameters Type Name Description XMUNibble4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUShort2) Loads an XMUShort2 into an XMVector . Declaration public static XMVector Load(XMUShort2 value) Parameters Type Name Description XMUShort2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUShort4) Loads an XMUShort4 into an XMVector . Declaration public static XMVector Load(XMUShort4 value) Parameters Type Name Description XMUShort4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUShortN2) Loads an XMUShortN2 into an XMVector . Declaration public static XMVector Load(XMUShortN2 value) Parameters Type Name Description XMUShortN2 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMUShortN4) Loads an XMUShortN4 into an XMVector . Declaration public static XMVector Load(XMUShortN4 value) Parameters Type Name Description XMUShortN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMXDec4) Loads an XMXDec4 into an XMVector . Declaration public static XMVector Load(XMXDec4 value) Parameters Type Name Description XMXDec4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Load(XMXDecN4) Loads an XMXDecN4 into an XMVector . Declaration public static XMVector Load(XMXDecN4 value) Parameters Type Name Description XMXDecN4 value The structure to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadFloat(Single) Loads a floating-point scalar value into an XMVector . Declaration public static XMVector LoadFloat(float source) Parameters Type Name Description Single source The scalar data to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadFloat2(XMFloat2) Loads an XMFloat2 into an XMVector . Declaration public static XMVector LoadFloat2(XMFloat2 source) Parameters Type Name Description XMFloat2 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadFloat3(XMFloat3) Loads an XMFloat3 into an XMVector . Declaration public static XMVector LoadFloat3(XMFloat3 source) Parameters Type Name Description XMFloat3 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadFloat4(XMFloat4) Loads an XMFloat4 into an XMVector . Declaration public static XMVector LoadFloat4(XMFloat4 source) Parameters Type Name Description XMFloat4 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadInt(UInt32) Loads a scalar value into an XMVector . Declaration public static XMVector LoadInt(uint source) Parameters Type Name Description UInt32 source The scalar data to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadInt2(UInt32[]) Loads data into the x and y components of an XMVector . Declaration public static XMVector LoadInt2(uint[] source) Parameters Type Name Description UInt32 [] source The data to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadInt3(UInt32[]) Loads data into the x, y, and z components of an XMVector . Declaration public static XMVector LoadInt3(uint[] source) Parameters Type Name Description UInt32 [] source The data to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadInt4(UInt32[]) Loads data into the x, y, z, and w components of an XMVector . Declaration public static XMVector LoadInt4(uint[] source) Parameters Type Name Description UInt32 [] source The data to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadSInt2(XMInt2) Loads an XMInt2 into an XMVector . Declaration public static XMVector LoadSInt2(XMInt2 source) Parameters Type Name Description XMInt2 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadSInt3(XMInt3) Loads an XMInt3 into an XMVector . Declaration public static XMVector LoadSInt3(XMInt3 source) Parameters Type Name Description XMInt3 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadSInt4(XMInt4) Loads an XMInt4 into an XMVector . Declaration public static XMVector LoadSInt4(XMInt4 source) Parameters Type Name Description XMInt4 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadUInt2(XMUInt2) Loads an XMUInt2 into an XMVector . Declaration public static XMVector LoadUInt2(XMUInt2 source) Parameters Type Name Description XMUInt2 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadUInt3(XMUInt3) Loads an XMUInt3 into an XMVector . Declaration public static XMVector LoadUInt3(XMUInt3 source) Parameters Type Name Description XMUInt3 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source LoadUInt4(XMUInt4) Loads an XMUInt4 into an XMVector . Declaration public static XMVector LoadUInt4(XMUInt4 source) Parameters Type Name Description XMUInt4 source The struct to load. Returns Type Description XMVector Returns a vector. | Improve this Doc View Source Log() Computes the base two logarithm of each component of a vector. Declaration public XMVector Log() Returns Type Description XMVector Returns a vector whose components are base two logarithm of the corresponding components of V. | Improve this Doc View Source Log2() Computes the base two logarithm of each component of a vector. Declaration public XMVector Log2() Returns Type Description XMVector Returns a vector whose components are base two logarithm of the corresponding components of V. | Improve this Doc View Source LogE() Computes the base e logarithm of each component of a vector. The base e logarithm is also known as the natural logarithm. Declaration public XMVector LogE() Returns Type Description XMVector Returns a vector whose components are base e logarithm of the corresponding components of V. | Improve this Doc View Source Max(XMVector, XMVector) Makes a per-component comparison between two vectors, and returns a vector containing the largest components. Declaration public static XMVector Max(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the largest components between the two vectors. | Improve this Doc View Source MergeXY(XMVector, XMVector) Creates a new vector by combining the x and y-components of two vectors. Declaration public static XMVector MergeXY(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns the merged vector. | Improve this Doc View Source MergeZW(XMVector, XMVector) Creates a new vector by combining the z and w-components of two vectors. Declaration public static XMVector MergeZW(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns the merged vector. | Improve this Doc View Source Min(XMVector, XMVector) Makes a per-component comparison between two vectors, and returns a vector containing the smallest components. Declaration public static XMVector Min(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the smallest components between the two vectors. | Improve this Doc View Source Mod(XMVector, XMVector) Computes the per-component floating-point remainder of the quotient of two vectors. Declaration public static XMVector Mod(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The vector dividend. XMVector v2 The vector divisor. Returns Type Description XMVector Returns a vector whose components are the floating-point remainders of the divisions. | Improve this Doc View Source ModAngles(XMVector) Computes the per-component angle modulo 2PI. Declaration public static XMVector ModAngles(XMVector angles) Parameters Type Name Description XMVector angles The vector of angle components. Returns Type Description XMVector Returns a vector whose components are the corresponding components of Angles modulo 2PI. | Improve this Doc View Source Multiply(XMVector, XMVector) Computes the per-component product of two vectors. Declaration public static XMVector Multiply(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector, each of whose components is the product of the corresponding components of V1 and V2. | Improve this Doc View Source MultiplyAdd(XMVector, XMVector, XMVector) Computes the product of the first two vectors added to the third vector. Declaration public static XMVector MultiplyAdd(XMVector v1, XMVector v2, XMVector v3) Parameters Type Name Description XMVector v1 The vector multiplier. XMVector v2 The vector multiplicand. XMVector v3 The vector addend. Returns Type Description XMVector Returns the product-sum of the vectors. | Improve this Doc View Source NearEqual(XMVector, XMVector, XMVector) Performs a per-component test for equality of two vectors within a given threshold. Declaration public static XMVector NearEqual(XMVector v1, XMVector v2, XMVector epsilon) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector epsilon Tolerance value used for judging equality. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source Negate() Computes the negation of a vector. Declaration public XMVector Negate() Returns Type Description XMVector Returns the negation of the vector. | Improve this Doc View Source NegativeMultiplySubtract(XMVector, XMVector, XMVector) Computes the difference of a third vector and the product of the first two vectors. Declaration public static XMVector NegativeMultiplySubtract(XMVector v1, XMVector v2, XMVector v3) Parameters Type Name Description XMVector v1 The vector multiplier. XMVector v2 The vector multiplicand. XMVector v3 The vector subtrahend. Returns Type Description XMVector Returns the resulting vector. | Improve this Doc View Source NorInt(XMVector, XMVector) Computes the logical NOR of two vectors, treating each component as an unsigned integer. Declaration public static XMVector NorInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector, each of whose components are the logical NOR of the corresponding components of V1 and V2. | Improve this Doc View Source NotEqual(XMVector, XMVector) Performs a per-component test for the inequality of two vectors. Declaration public static XMVector NotEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source NotEqualInt(XMVector, XMVector) Performs a per-component test for the inequality of two vectors, treating each component as an unsigned integer. Declaration public static XMVector NotEqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector containing the results of each component test. | Improve this Doc View Source OrInt(XMVector, XMVector) Computes the logical OR of two vectors, treating each component as an unsigned integer. Declaration public static XMVector OrInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector, each of whose components are the logical OR of the corresponding components of V1 and V2. | Improve this Doc View Source Permute(XMVector, XMVector, XMPermutation, XMPermutation, XMPermutation, XMPermutation) Permutes the components of two vectors to create a new vector. Declaration public static XMVector Permute(XMVector v1, XMVector v2, XMPermutation permuteX, XMPermutation permuteY, XMPermutation permuteZ, XMPermutation permuteW) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMPermutation permuteX Index indicating where the X component of the new vector should be copied from. XMPermutation permuteY Index indicating where the Y component of the new vector should be copied from. XMPermutation permuteZ Index indicating where the Z component of the new vector should be copied from. XMPermutation permuteW Index indicating where the W component of the new vector should be copied from. Returns Type Description XMVector Returns the permuted vector that resulted from combining the source vectors. | Improve this Doc View Source Plus() Performance an identity operation on a vector. Declaration public XMVector Plus() Returns Type Description XMVector Returns the vector. | Improve this Doc View Source Pow(XMVector, XMVector) Computes V1 raised to the power of V2. Declaration public static XMVector Pow(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. Each component is the corresponding component of V1 raised to the power of the corresponding component in V2. | Improve this Doc View Source Reciprocal() Computes the per-component reciprocal of a vector. Declaration public XMVector Reciprocal() Returns Type Description XMVector Returns a vector. Each component is the reciprocal of the corresponding component of V. | Improve this Doc View Source ReciprocalEst() Estimates the per-component reciprocal of a vector. Declaration public XMVector ReciprocalEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the reciprocal of the corresponding component of V. | Improve this Doc View Source ReciprocalSqrt() Computes the per-component reciprocal square root of a vector. Declaration public XMVector ReciprocalSqrt() Returns Type Description XMVector Returns a vector. Each component is the reciprocal square-root of the corresponding component of V. | Improve this Doc View Source ReciprocalSqrtEst() Estimates the per-component reciprocal square root of a vector. Declaration public XMVector ReciprocalSqrtEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the reciprocal square-root of the corresponding component of V. | Improve this Doc View Source Replicate(Single) Replicates a floating-point value into all four components of a vector. Declaration public static XMVector Replicate(float value) Parameters Type Name Description Single value The value to replicate. Returns Type Description XMVector Returns a vector, all of whose components are equal to Value. | Improve this Doc View Source ReplicateInt(UInt32) Replicates an integer value into all four components of a vector. Declaration public static XMVector ReplicateInt(uint value) Parameters Type Name Description UInt32 value The value to replicate. Returns Type Description XMVector Returns a vector, all of whose components are equal to Value. | Improve this Doc View Source RotateLeft(UInt32) Rotates the vector left by a given number of 32-bit elements. Declaration public XMVector RotateLeft(uint elements) Parameters Type Name Description UInt32 elements Number of 32-bit elements by which to rotate V left. This parameter must be 0, 1, 2, or 3. Returns Type Description XMVector Returns the rotated vector. | Improve this Doc View Source RotateRight(UInt32) Rotates the vector right by a given number of 32-bit elements. Declaration public XMVector RotateRight(uint elements) Parameters Type Name Description UInt32 elements Number of 32-bit elements by which to rotate V right. This parameter must be 0, 1, 2, or 3. Returns Type Description XMVector Returns the rotated vector. | Improve this Doc View Source Round() Rounds each component of a vector to the nearest integer. Declaration public XMVector Round() Returns Type Description XMVector Returns a vector, each of whose components are rounded to the nearest integer. | Improve this Doc View Source Saturate() Saturates each component of a vector to the range 0.0f to 1.0f. Declaration public XMVector Saturate() Returns Type Description XMVector Returns a vector, each of whose components are saturated. | Improve this Doc View Source Scale(Single) Scalar multiplies a vector by a floating-point value. Declaration public XMVector Scale(float factor) Parameters Type Name Description Single factor A scalar value. Returns Type Description XMVector Returns the scaled vector. | Improve this Doc View Source Select(XMVector, XMVector, XMVector) Performs a per-component selection between two input vectors and returns the resulting vector. Declaration public static XMVector Select(XMVector v1, XMVector v2, XMVector control) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector control Vector mask used to select a vector component from either V1 or V2. Returns Type Description XMVector Returns the result of the per-component selection. | Improve this Doc View Source SelectControl(UInt32, UInt32, UInt32, UInt32) Defines a control vector for use in Select(XMVector, XMVector, XMVector) . Declaration public static XMVector SelectControl(uint index0, uint index1, uint index2, uint index3) Parameters Type Name Description UInt32 index0 Index that determines which vector will be selected to set the X component. UInt32 index1 Index that determines which vector will be selected to set the Y component. UInt32 index2 Index that determines which vector will be selected to set the Z component. UInt32 index3 Index that determines which vector will be selected to set the W component. Returns Type Description XMVector Returns the control vector. | Improve this Doc View Source SelectControl(UInt32[]) Defines a control vector for use in Select(XMVector, XMVector, XMVector) . Declaration public static XMVector SelectControl(uint[] indexes) Parameters Type Name Description UInt32 [] indexes Indexes that determines which vector will be selected. Returns Type Description XMVector Returns the control vector. | Improve this Doc View Source SetByIndex(Single, Int32) Sets the value of one component by index. Declaration public void SetByIndex(float value, int index) Parameters Type Name Description Single value The value of the component. Int32 index The index of the component. | Improve this Doc View Source SetIntByIndex(UInt32, Int32) Sets the value of one component by index. Declaration public void SetIntByIndex(uint value, int index) Parameters Type Name Description UInt32 value The value of the component. Int32 index The index of the component. | Improve this Doc View Source ShiftLeft(XMVector, XMVector, UInt32) Shifts a vector left by a given number of 32-bit elements, filling the vacated elements with elements from a second vector. Declaration public static XMVector ShiftLeft(XMVector v1, XMVector v2, uint elements) Parameters Type Name Description XMVector v1 Vector to shift left. XMVector v2 Vector used to fill in the vacated components of V1 after it is shifted left. UInt32 elements Number of 32-bit elements by which to shift V left. This parameter must be 0, 1, 2, or 3. Returns Type Description XMVector Returns the shifted and filled in vector. | Improve this Doc View Source Sin() Computes the sine of each component of a vector. Declaration public XMVector Sin() Returns Type Description XMVector Returns a vector. Each component is the sine of the corresponding component of V. | Improve this Doc View Source SinCos(out XMVector, out XMVector) Computes the sine and cosine of each component of a vector. Declaration public void SinCos(out XMVector sin, out XMVector cos) Parameters Type Name Description XMVector sin A vector, each of whose components is the sine of the corresponding component of V. XMVector cos A vector, each of whose components is the cosine of the corresponding component of V. | Improve this Doc View Source SinCosEst(out XMVector, out XMVector) Estimates the sine and cosine of each component of a vector. Declaration public void SinCosEst(out XMVector sin, out XMVector cos) Parameters Type Name Description XMVector sin A vector, each of whose components is an estimate of the sine of the corresponding component of V. XMVector cos A vector, each of whose components is an estimate of the cosine of the corresponding component of V. | Improve this Doc View Source SinEst() Estimates the sine of each component of a vector. Declaration public XMVector SinEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the sine of the corresponding component of V. | Improve this Doc View Source SinH() Computes the hyperbolic sine of each component of a vector. Declaration public XMVector SinH() Returns Type Description XMVector Returns a vector. Each component is the hyperbolic sine of the corresponding component of V. | Improve this Doc View Source SplatW(XMVector) Replicates the w component of a vector to all of the components. Declaration public static XMVector SplatW(XMVector v) Parameters Type Name Description XMVector v Vector from which to select the w component. Returns Type Description XMVector Returns a vector, all of whose components are equal to the w component of V. | Improve this Doc View Source SplatX(XMVector) Replicates the x component of a vector to all of the components. Declaration public static XMVector SplatX(XMVector v) Parameters Type Name Description XMVector v Vector from which to select the x component. Returns Type Description XMVector Returns a vector, all of whose components are equal to the x component of V. | Improve this Doc View Source SplatY(XMVector) Replicates the y component of a vector to all of the components. Declaration public static XMVector SplatY(XMVector v) Parameters Type Name Description XMVector v Vector from which to select the y component. Returns Type Description XMVector Returns a vector, all of whose components are equal to the y component of V. | Improve this Doc View Source SplatZ(XMVector) Replicates the z component of a vector to all of the components. Declaration public static XMVector SplatZ(XMVector v) Parameters Type Name Description XMVector v Vector from which to select the z component. Returns Type Description XMVector Returns a vector, all of whose components are equal to the z component of V. | Improve this Doc View Source Sqrt() Computes the per-component square root of a vector. Declaration public XMVector Sqrt() Returns Type Description XMVector Returns a vector. Each component is the square-root of the corresponding component of V. | Improve this Doc View Source SqrtEst() Estimates the per-component square root of a vector. Declaration public XMVector SqrtEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the square-root of the corresponding component of V. | Improve this Doc View Source Store(out XMByte2) Stores an XMVector in an XMByte2 . Declaration public void Store(out XMByte2 value) Parameters Type Name Description XMByte2 value The structure at which to store the data | Improve this Doc View Source Store(out XMByte4) Stores an XMVector in an XMByte4 . Declaration public void Store(out XMByte4 value) Parameters Type Name Description XMByte4 value The structure at which to store the data | Improve this Doc View Source Store(out XMByteN2) Stores an XMVector in an XMByteN2 . Declaration public void Store(out XMByteN2 value) Parameters Type Name Description XMByteN2 value The structure at which to store the data | Improve this Doc View Source Store(out XMByteN4) Stores an XMVector in an XMByteN4 . Declaration public void Store(out XMByteN4 value) Parameters Type Name Description XMByteN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMColorRgba) Stores an XMVector in an XMColorRgba . Declaration public void Store(out XMColorRgba value) Parameters Type Name Description XMColorRgba value The structure at which to store the data | Improve this Doc View Source Store(out XMDec4) Stores an XMVector in an XMDec4 . Declaration public void Store(out XMDec4 value) Parameters Type Name Description XMDec4 value The structure at which to store the data | Improve this Doc View Source Store(out XMDecN4) Stores an XMVector in an XMDecN4 . Declaration public void Store(out XMDecN4 value) Parameters Type Name Description XMDecN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMFloat3Packed) Stores an XMVector in an XMFloat3Packed . Declaration public void Store(out XMFloat3Packed value) Parameters Type Name Description XMFloat3Packed value The structure at which to store the data | Improve this Doc View Source Store(out XMFloat3SharedExponent) Stores an XMVector in an XMFloat3SharedExponent . Declaration public void Store(out XMFloat3SharedExponent value) Parameters Type Name Description XMFloat3SharedExponent value The structure at which to store the data | Improve this Doc View Source Store(out XMHalf2) Stores an XMVector in an XMHalf2 . Declaration public void Store(out XMHalf2 value) Parameters Type Name Description XMHalf2 value The structure at which to store the data | Improve this Doc View Source Store(out XMHalf4) Stores an XMVector in an XMHalf4 . Declaration public void Store(out XMHalf4 value) Parameters Type Name Description XMHalf4 value The structure at which to store the data | Improve this Doc View Source Store(out XMShort2) Stores an XMVector in an XMShort2 . Declaration public void Store(out XMShort2 value) Parameters Type Name Description XMShort2 value The structure at which to store the data | Improve this Doc View Source Store(out XMShort4) Stores an XMVector in an XMShort4 . Declaration public void Store(out XMShort4 value) Parameters Type Name Description XMShort4 value The structure at which to store the data | Improve this Doc View Source Store(out XMShortN2) Stores an XMVector in an XMShortN2 . Declaration public void Store(out XMShortN2 value) Parameters Type Name Description XMShortN2 value The structure at which to store the data | Improve this Doc View Source Store(out XMShortN4) Stores an XMVector in an XMShortN4 . Declaration public void Store(out XMShortN4 value) Parameters Type Name Description XMShortN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMU555) Stores an XMVector in an XMU555 . Declaration public void Store(out XMU555 value) Parameters Type Name Description XMU555 value The structure at which to store the data | Improve this Doc View Source Store(out XMU565) Stores an XMVector in an XMU565 . Declaration public void Store(out XMU565 value) Parameters Type Name Description XMU565 value The structure at which to store the data | Improve this Doc View Source Store(out XMUByte2) Stores an XMVector in an XMUByte2 . Declaration public void Store(out XMUByte2 value) Parameters Type Name Description XMUByte2 value The structure at which to store the data | Improve this Doc View Source Store(out XMUByte4) Stores an XMVector in an XMUByte4 . Declaration public void Store(out XMUByte4 value) Parameters Type Name Description XMUByte4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUByteN2) Stores an XMVector in an XMUByteN2 . Declaration public void Store(out XMUByteN2 value) Parameters Type Name Description XMUByteN2 value The structure at which to store the data | Improve this Doc View Source Store(out XMUByteN4) Stores an XMVector in an XMUByteN4 . Declaration public void Store(out XMUByteN4 value) Parameters Type Name Description XMUByteN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUDec4) Stores an XMVector in an XMUDec4 . Declaration public void Store(out XMUDec4 value) Parameters Type Name Description XMUDec4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUDecN4) Stores an XMVector in an XMUDecN4 . Declaration public void Store(out XMUDecN4 value) Parameters Type Name Description XMUDecN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUDecN4XR) Stores an XMVector in an XMUDecN4XR . Declaration public void Store(out XMUDecN4XR value) Parameters Type Name Description XMUDecN4XR value The structure at which to store the data | Improve this Doc View Source Store(out XMUNibble4) Stores an XMVector in an XMUNibble4 . Declaration public void Store(out XMUNibble4 value) Parameters Type Name Description XMUNibble4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUShort2) Stores an XMVector in an XMUShort2 . Declaration public void Store(out XMUShort2 value) Parameters Type Name Description XMUShort2 value The structure at which to store the data | Improve this Doc View Source Store(out XMUShort4) Stores an XMVector in an XMUShort4 . Declaration public void Store(out XMUShort4 value) Parameters Type Name Description XMUShort4 value The structure at which to store the data | Improve this Doc View Source Store(out XMUShortN2) Stores an XMVector in an XMUShortN2 . Declaration public void Store(out XMUShortN2 value) Parameters Type Name Description XMUShortN2 value The structure at which to store the data | Improve this Doc View Source Store(out XMUShortN4) Stores an XMVector in an XMUShortN4 . Declaration public void Store(out XMUShortN4 value) Parameters Type Name Description XMUShortN4 value The structure at which to store the data | Improve this Doc View Source Store(out XMXDec4) Stores an XMVector in an XMXDec4 . Declaration public void Store(out XMXDec4 value) Parameters Type Name Description XMXDec4 value The structure at which to store the data | Improve this Doc View Source Store(out XMXDecN4) Stores an XMVector in an XMXDecN4 . Declaration public void Store(out XMXDecN4 value) Parameters Type Name Description XMXDecN4 value The structure at which to store the data | Improve this Doc View Source StoreFloat(out Single) Stores an XMVector in a float. Declaration public void StoreFloat(out float destination) Parameters Type Name Description Single destination The data. | Improve this Doc View Source StoreFloat2(out XMFloat2) Stores an XMVector in an XMFloat2 . Declaration public void StoreFloat2(out XMFloat2 destination) Parameters Type Name Description XMFloat2 destination The data | Improve this Doc View Source StoreFloat3(out XMFloat3) Stores an XMVector in an XMFloat3 . Declaration public void StoreFloat3(out XMFloat3 destination) Parameters Type Name Description XMFloat3 destination The data | Improve this Doc View Source StoreFloat4(out XMFloat4) Stores an XMVector in an XMFloat4 . Declaration public void StoreFloat4(out XMFloat4 destination) Parameters Type Name Description XMFloat4 destination The data | Improve this Doc View Source StoreInt(out UInt32) Stores an XMVector in a uint . Declaration public void StoreInt(out uint destination) Parameters Type Name Description UInt32 destination The data. | Improve this Doc View Source StoreInt2(out UInt32[]) Stores an XMVector in a 2-element uint array. Declaration public void StoreInt2(out uint[] destination) Parameters Type Name Description UInt32 [] destination The data. | Improve this Doc View Source StoreInt3(out UInt32[]) Stores an XMVector in a 3-element uint array. Declaration public void StoreInt3(out uint[] destination) Parameters Type Name Description UInt32 [] destination The data. | Improve this Doc View Source StoreInt4(out UInt32[]) Stores an XMVector in a 4-element uint array. Declaration public void StoreInt4(out uint[] destination) Parameters Type Name Description UInt32 [] destination The data. | Improve this Doc View Source StoreSInt2(out XMInt2) Stores an XMVector in an XMInt2 . Declaration public void StoreSInt2(out XMInt2 destination) Parameters Type Name Description XMInt2 destination The data | Improve this Doc View Source StoreSInt3(out XMInt3) Stores an XMVector in an XMInt3 . Declaration public void StoreSInt3(out XMInt3 destination) Parameters Type Name Description XMInt3 destination The data | Improve this Doc View Source StoreSInt4(out XMInt4) Stores an XMVector in an XMInt4 . Declaration public void StoreSInt4(out XMInt4 destination) Parameters Type Name Description XMInt4 destination The data | Improve this Doc View Source StoreUInt2(out XMUInt2) Stores an XMVector in an XMUInt2 . Declaration public void StoreUInt2(out XMUInt2 destination) Parameters Type Name Description XMUInt2 destination The data | Improve this Doc View Source StoreUInt3(out XMUInt3) Stores an XMVector in an XMUInt3 . Declaration public void StoreUInt3(out XMUInt3 destination) Parameters Type Name Description XMUInt3 destination The data | Improve this Doc View Source StoreUInt4(out XMUInt4) Stores an XMVector in an XMUInt4 . Declaration public void StoreUInt4(out XMUInt4 destination) Parameters Type Name Description XMUInt4 destination The data | Improve this Doc View Source Subtract(XMVector, XMVector) Computes the difference of two vectors. Declaration public static XMVector Subtract(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector that is the difference of V1 and V2. | Improve this Doc View Source SubtractAngles(XMVector, XMVector) Subtracts two vectors representing angles. Declaration public static XMVector SubtractAngles(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 First vector of angles. Each angle must satisfy -XM_PI <= V1 < XM_PI. XMVector v2 Second vector of angles. Each angle must satisfy -XM_2PI <= V1 < XM_2PI. Returns Type Description XMVector Returns a vector whose components are the differences of the angles of the corresponding components. Each component of the returned vector will be an angle less than XM_PI and greater than or equal to -XM_PI. | Improve this Doc View Source Swizzle(XMSwizzle, XMSwizzle, XMSwizzle, XMSwizzle) Swizzles a vector. Declaration public XMVector Swizzle(XMSwizzle e0, XMSwizzle e1, XMSwizzle e2, XMSwizzle e3) Parameters Type Name Description XMSwizzle e0 Index that describes which component of V to place in the x-component of the swizzled vector. XMSwizzle e1 Index that describes which component of V to place in the y-component of the swizzled vector. XMSwizzle e2 Index that describes which component of V to place in the z-component of the swizzled vector. XMSwizzle e3 Index that describes which component of V to place in the w-component of the swizzled vector. Returns Type Description XMVector Returns the swizzled vector. | Improve this Doc View Source Swizzle(XMSwizzle[]) Swizzles a vector. Declaration public XMVector Swizzle(XMSwizzle[] elements) Parameters Type Name Description XMSwizzle [] elements The swizzle indexes. Returns Type Description XMVector Returns the swizzled vector. | Improve this Doc View Source Tan() Computes the tangent of each component of a vector. Declaration public XMVector Tan() Returns Type Description XMVector Returns a vector. Each component is the tangent of the corresponding component of V. | Improve this Doc View Source TanEst() Estimates the tangent of each component of a vector. Declaration public XMVector TanEst() Returns Type Description XMVector Returns a vector. Each component is an estimate of the tangent of the corresponding component of V. | Improve this Doc View Source TanH() Computes the hyperbolic tangent of each component of a vector. Declaration public XMVector TanH() Returns Type Description XMVector Returns a vector. Each component is the hyperbolic tangent of the corresponding component of V. | Improve this Doc View Source ToArray() Convert a vector to an array of float. Declaration public float[] ToArray() Returns Type Description Single [] An array of float. | Improve this Doc View Source Truncate() Rounds each component of a vector to the nearest integer value in the direction of zero. Declaration public XMVector Truncate() Returns Type Description XMVector Returns a vector whose components are rounded to the nearest integer value in the direction of zero. | Improve this Doc View Source XorInt(XMVector, XMVector) Computes the logical XOR of two vectors, treating each component as an unsigned integer. Declaration public static XMVector XorInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector, each of whose components are the logical XOR of the corresponding components of V1 and V2. Operators | Improve this Doc View Source Addition(XMVector, XMVector) Computes the sum of two vectors. Declaration public static XMVector operator +(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector that is the sum of V1 and V2. | Improve this Doc View Source Division(XMVector, XMVector) Divides one instance of XMVECTOR by a second instance, returning the result in a third instance. Declaration public static XMVector operator /(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The dividends. XMVector v2 The divisors. Returns Type Description XMVector The quotient. | Improve this Doc View Source Division(XMVector, Single) Divides a vector by a scalar value, returning the result in a third instance. Declaration public static XMVector operator /(XMVector v, float s) Parameters Type Name Description XMVector v The vector. Single s A scalar value. Returns Type Description XMVector The quotient. | Improve this Doc View Source Equality(XMVector, XMVector) Compares two XMVector objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMVector left, XMVector right) Parameters Type Name Description XMVector left The left XMVector to compare. XMVector right The right XMVector to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMVector to Single[]) Convert a vector to an array of float. Declaration public static implicit operator float[](XMVector value) Parameters Type Name Description XMVector value The vector. Returns Type Description Single [] An array of float. | Improve this Doc View Source Inequality(XMVector, XMVector) Compares two XMVector objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMVector left, XMVector right) Parameters Type Name Description XMVector left The left XMVector to compare. XMVector right The right XMVector to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . | Improve this Doc View Source Multiply(XMVector, XMVector) Computes the per-component product of two vectors. Declaration public static XMVector operator *(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector, each of whose components is the product of the corresponding components of V1 and V2. | Improve this Doc View Source Multiply(XMVector, Single) Scalar multiplies a vector by a floating-point value. Declaration public static XMVector operator *(XMVector v, float s) Parameters Type Name Description XMVector v The vector. Single s A scalar value. Returns Type Description XMVector Returns the scaled vector. | Improve this Doc View Source Multiply(Single, XMVector) Scalar multiplies a vector by a floating-point value. Declaration public static XMVector operator *(float s, XMVector v) Parameters Type Name Description Single s A scalar value. XMVector v The vector. Returns Type Description XMVector Returns the scaled vector. | Improve this Doc View Source Subtraction(XMVector, XMVector) Computes the difference of two vectors. Declaration public static XMVector operator -(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector that is the difference of V1 and V2. | Improve this Doc View Source UnaryNegation(XMVector) Computes the negation of a vector. Declaration public static XMVector operator -(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns the negation of the vector. | Improve this Doc View Source UnaryPlus(XMVector) Performance an identity operation on a vector. Declaration public static XMVector operator +(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns the vector. Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMUInt4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMUInt4.html",
    "title": "Struct XMUInt4",
    "keywords": "Struct XMUInt4 A 4D vector where each component is an unsigned integer. Implements IEquatable < XMUInt4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUInt4 : IEquatable<XMUInt4> Constructors | Improve this Doc View Source XMUInt4(UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the XMUInt4 struct. Declaration public XMUInt4(uint x, uint y, uint z, uint w) Parameters Type Name Description UInt32 x The x-coordinate of the vector. UInt32 y The y-coordinate of the vector. UInt32 z The z-coordinate of the vector. UInt32 w The w-coordinate of the vector. | Improve this Doc View Source XMUInt4(UInt32[]) Initializes a new instance of the XMUInt4 struct. Declaration public XMUInt4(uint[] array) Parameters Type Name Description UInt32 [] array The components of the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public uint Z { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUInt4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUInt4 other) Parameters Type Name Description XMUInt4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUInt4 . Declaration public static XMUInt4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt4 A XMUInt4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUInt4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUInt4, XMUInt4) Compares two XMUInt4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUInt4 left, XMUInt4 right) Parameters Type Name Description XMUInt4 left The left XMUInt4 to compare. XMUInt4 right The right XMUInt4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUInt4 to XMVector) Converts a XMUInt4 to a XMVector . Declaration public static implicit operator XMVector(XMUInt4 value) Parameters Type Name Description XMUInt4 value A XMUInt4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUInt4) Converts a XMVector to a XMUInt4 . Declaration public static implicit operator XMUInt4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt4 A XMUInt4 . | Improve this Doc View Source Inequality(XMUInt4, XMUInt4) Compares two XMUInt4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUInt4 left, XMUInt4 right) Parameters Type Name Description XMUInt4 left The left XMUInt4 to compare. XMUInt4 right The right XMUInt4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMUInt3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMUInt3.html",
    "title": "Struct XMUInt3",
    "keywords": "Struct XMUInt3 A 3D vector where each component is an unsigned integer. Implements IEquatable < XMUInt3 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUInt3 : IEquatable<XMUInt3> Constructors | Improve this Doc View Source XMUInt3(UInt32, UInt32, UInt32) Initializes a new instance of the XMUInt3 struct. Declaration public XMUInt3(uint x, uint y, uint z) Parameters Type Name Description UInt32 x The x-coordinate of the vector. UInt32 y The y-coordinate of the vector. UInt32 z The z-coordinate of the vector. | Improve this Doc View Source XMUInt3(UInt32[]) Initializes a new instance of the XMUInt3 struct. Declaration public XMUInt3(uint[] array) Parameters Type Name Description UInt32 [] array The components of the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public uint Z { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUInt3) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUInt3 other) Parameters Type Name Description XMUInt3 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUInt3 . Declaration public static XMUInt3 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt3 A XMUInt3 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUInt3 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUInt3, XMUInt3) Compares two XMUInt3 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUInt3 left, XMUInt3 right) Parameters Type Name Description XMUInt3 left The left XMUInt3 to compare. XMUInt3 right The right XMUInt3 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUInt3 to XMVector) Converts a XMUInt3 to a XMVector . Declaration public static implicit operator XMVector(XMUInt3 value) Parameters Type Name Description XMUInt3 value A XMUInt3 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUInt3) Converts a XMVector to a XMUInt3 . Declaration public static implicit operator XMUInt3(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt3 A XMUInt3 . | Improve this Doc View Source Inequality(XMUInt3, XMUInt3) Compares two XMUInt3 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUInt3 left, XMUInt3 right) Parameters Type Name Description XMUInt3 left The left XMUInt3 to compare. XMUInt3 right The right XMUInt3 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMUInt2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMUInt2.html",
    "title": "Struct XMUInt2",
    "keywords": "Struct XMUInt2 A 2D vector where each component is an unsigned integer. Implements IEquatable < XMUInt2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUInt2 : IEquatable<XMUInt2> Constructors | Improve this Doc View Source XMUInt2(UInt32, UInt32) Initializes a new instance of the XMUInt2 struct. Declaration public XMUInt2(uint x, uint y) Parameters Type Name Description UInt32 x The x-coordinate of the vector. UInt32 y The y-coordinate of the vector. | Improve this Doc View Source XMUInt2(UInt32[]) Initializes a new instance of the XMUInt2 struct. Declaration public XMUInt2(uint[] array) Parameters Type Name Description UInt32 [] array The components of the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUInt2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUInt2 other) Parameters Type Name Description XMUInt2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUInt2 . Declaration public static XMUInt2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt2 A XMUInt2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUInt2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUInt2, XMUInt2) Compares two XMUInt2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUInt2 left, XMUInt2 right) Parameters Type Name Description XMUInt2 left The left XMUInt2 to compare. XMUInt2 right The right XMUInt2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUInt2 to XMVector) Converts a XMUInt2 to a XMVector . Declaration public static implicit operator XMVector(XMUInt2 value) Parameters Type Name Description XMUInt2 value A XMUInt2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUInt2) Converts a XMVector to a XMUInt2 . Declaration public static implicit operator XMUInt2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUInt2 A XMUInt2 . | Improve this Doc View Source Inequality(XMUInt2, XMUInt2) Compares two XMUInt2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUInt2 left, XMUInt2 right) Parameters Type Name Description XMUInt2 left The left XMUInt2 to compare. XMUInt2 right The right XMUInt2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMSwizzle.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMSwizzle.html",
    "title": "Enum XMSwizzle",
    "keywords": "Enum XMSwizzle Constants used as an element index with Swizzle(XMSwizzle, XMSwizzle, XMSwizzle, XMSwizzle) . Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public enum XMSwizzle : uint Fields Name Description W Indicates that the W component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element. X Indicates that the X component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element. Y Indicates that the Y component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element. Z Indicates that the Z component of the vector argument is to be copied to the index location in a result vector corresponding to the specified element."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMSelection.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMSelection.html",
    "title": "Enum XMSelection",
    "keywords": "Enum XMSelection Constants used to construct a control vector used with Select(XMVector, XMVector, XMVector) . Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public enum XMSelection : uint Fields Name Description Select0 Indicates that the component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to its index in the control vector. Select1 Indicates that the component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to its index in the control vector."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMScalar.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMScalar.html",
    "title": "Class XMScalar",
    "keywords": "Class XMScalar The scalar functions provided by DirectXMath. Inheritance Object XMScalar Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMScalar Methods | Improve this Doc View Source ACos(Single) Computes the arccosine of a floating-point number. Declaration public static float ACos(float value) Parameters Type Name Description Single value A value between -1.0f and 1.0f. Returns Type Description Single Returns the inverse cosine of Value. | Improve this Doc View Source ACosEst(Single) Estimates the arccosine of a floating-point number. Declaration public static float ACosEst(float value) Parameters Type Name Description Single value A value between -1.0f and 1.0f. Returns Type Description Single Returns the inverse cosine of Value. | Improve this Doc View Source ASin(Single) Computes the arcsine of a floating-point number. Declaration public static float ASin(float value) Parameters Type Name Description Single value A value between -1.0f and 1.0f. Returns Type Description Single Returns the inverse sine of Value. | Improve this Doc View Source ASinEst(Single) Estimates the arcsine of a floating-point number. Declaration public static float ASinEst(float value) Parameters Type Name Description Single value A value between -1.0f and 1.0f. Returns Type Description Single Returns the inverse sine of Value. | Improve this Doc View Source Cos(Single) Computes the cosine of a radian angle. Declaration public static float Cos(float value) Parameters Type Name Description Single value The radian angle. Returns Type Description Single Returns the cosine of Value. | Improve this Doc View Source CosEst(Single) Estimates the cosine of a radian angle. Declaration public static float CosEst(float value) Parameters Type Name Description Single value The radian angle. Returns Type Description Single Returns the cosine of Value. | Improve this Doc View Source ModAngle(Single) Computes an angle between -XM_PI and XM_PI. Declaration public static float ModAngle(float angle) Parameters Type Name Description Single angle The radian angle. Returns Type Description Single Returns an angle greater than or equal to -XM_PI and less than XM_PI that is congruent to Value modulo 2pi. | Improve this Doc View Source NearEqual(Single, Single, Single) Determines if two floating-point values are nearly equal. Declaration public static bool NearEqual(float s1, float s2, float epsilon) Parameters Type Name Description Single s1 The first floating-point value to compare. Single s2 The second floating-point value to compare. Single epsilon The tolerance to use when comparing S1 and S2. Returns Type Description Boolean Returns true if the absolute value of the difference between S1 and S2 is less than or equal to Epsilon. Returns false otherwise. | Improve this Doc View Source Sin(Single) Computes the sine of a radian angle. Declaration public static float Sin(float value) Parameters Type Name Description Single value The radian angle. Returns Type Description Single Returns the sine of Value. | Improve this Doc View Source SinCos(out Single, out Single, Single) Computes both the sine and cosine of a radian angle. Declaration public static void SinCos(out float sin, out float cos, float value) Parameters Type Name Description Single sin The sine of Value. Single cos The cosine of Value. Single value The radian angle. | Improve this Doc View Source SinCosEst(out Single, out Single, Single) Estimates both the sine and cosine of a radian angle. Declaration public static void SinCosEst(out float sin, out float cos, float value) Parameters Type Name Description Single sin The sine of Value. Single cos The cosine of Value. Single value The radian angle. | Improve this Doc View Source SinEst(Single) Estimates the sine of a radian angle. Declaration public static float SinEst(float value) Parameters Type Name Description Single value The radian angle. Returns Type Description Single Returns an estimate of the sine of Value."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMQuaternion.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMQuaternion.html",
    "title": "Class XMQuaternion",
    "keywords": "Class XMQuaternion The quaternion functions provided by DirectXMath. Inheritance Object XMQuaternion Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMQuaternion Properties | Improve this Doc View Source Identity Gets the identity quaternion. Declaration public static XMVector Identity { get; } Property Value Type Description XMVector Methods | Improve this Doc View Source BaryCentric(XMVector, XMVector, XMVector, Single, Single) Returns a point in barycentric coordinates, using the specified quaternions. Declaration public static XMVector BaryCentric(XMVector q0, XMVector q1, XMVector q2, float f, float g) Parameters Type Name Description XMVector q0 The first quaternion in the triangle. XMVector q1 The second quaternion in the triangle. XMVector q2 The third quaternion in the triangle. Single f The first weighting factor. Single g The second weighting factor. Returns Type Description XMVector Returns a quaternion in barycentric coordinates. | Improve this Doc View Source BaryCentricV(XMVector, XMVector, XMVector, XMVector, XMVector) Returns a point in barycentric coordinates, using the specified quaternions. Declaration public static XMVector BaryCentricV(XMVector q0, XMVector q1, XMVector q2, XMVector f, XMVector g) Parameters Type Name Description XMVector q0 The first quaternion in the triangle. XMVector q1 The second quaternion in the triangle. XMVector q2 The third quaternion in the triangle. XMVector f The first weighting factor. All components of this vector must be the same. XMVector g The second weighting factor. All components of this vector must be the same. Returns Type Description XMVector Returns a quaternion in barycentric coordinates. | Improve this Doc View Source Conjugate(XMVector) Computes the conjugate of a quaternion. Declaration public static XMVector Conjugate(XMVector q) Parameters Type Name Description XMVector q The quaternion to conjugate. Returns Type Description XMVector The conjugate of the quaternion. | Improve this Doc View Source Dot(XMVector, XMVector) Computes the dot product of two quaternions. Declaration public static XMVector Dot(XMVector q1, XMVector q2) Parameters Type Name Description XMVector q1 The first quaternion. XMVector q2 The second quaternion. Returns Type Description XMVector Returns a vector. The dot product between Q1 and Q2 is replicated into each component. | Improve this Doc View Source Equal(XMVector, XMVector) Tests whether two quaternions are equal. Declaration public static bool Equal(XMVector q1, XMVector q2) Parameters Type Name Description XMVector q1 The first quaternion to test. XMVector q2 The second quaternion to test. Returns Type Description Boolean Returns true if the quaternions are equal and false otherwise. | Improve this Doc View Source Exp(XMVector) Computes the exponential of a given pure quaternion. Declaration public static XMVector Exp(XMVector q) Parameters Type Name Description XMVector q Pure quaternion for which to compute the exponential. The w-component of the input quaternion is ignored in the calculation. Returns Type Description XMVector Returns the exponential of Q. | Improve this Doc View Source Inverse(XMVector) Computes the inverse of a quaternion. Declaration public static XMVector Inverse(XMVector q) Parameters Type Name Description XMVector q The quaternion to invert. Returns Type Description XMVector The inverse of Q. | Improve this Doc View Source IsIdentity(XMVector) Tests whether a specific quaternion is the identity quaternion. Declaration public static bool IsIdentity(XMVector q) Parameters Type Name Description XMVector q The quaternion to test. Returns Type Description Boolean Returns true if Q is the identity quaternion, or false otherwise. | Improve this Doc View Source IsInfinite(XMVector) Test whether any component of a quaternion is either positive or negative infinity. Declaration public static bool IsInfinite(XMVector q) Parameters Type Name Description XMVector q The quaternion to test. Returns Type Description Boolean Returns true if any component of Q is positive or negative infinity,and false otherwise. | Improve this Doc View Source IsNaN(XMVector) Test whether any component of a quaternion is a NaN. Declaration public static bool IsNaN(XMVector q) Parameters Type Name Description XMVector q The quaternion to test. Returns Type Description Boolean Returns true if any component of Q is a NaN, and false otherwise. | Improve this Doc View Source Length(XMVector) Computes the magnitude of a quaternion. Declaration public static XMVector Length(XMVector q) Parameters Type Name Description XMVector q The quaternion to measure. Returns Type Description XMVector Returns a vector. The magnitude of Q is replicated into each component. | Improve this Doc View Source LengthSquare(XMVector) Computes the square of the magnitude of a quaternion. Declaration public static XMVector LengthSquare(XMVector q) Parameters Type Name Description XMVector q The quaternion to measure. Returns Type Description XMVector Returns a vector. The square of the magnitude is replicated into each component. | Improve this Doc View Source Ln(XMVector) Computes the natural logarithm of a given unit quaternion. Declaration public static XMVector Ln(XMVector q) Parameters Type Name Description XMVector q Unit quaternion for which to calculate the natural logarithm. If Q is not a unit quaternion, the returned value is undefined. Returns Type Description XMVector The natural logarithm of Q. | Improve this Doc View Source Multiply(XMVector, XMVector) Computes the product of two quaternions. Declaration public static XMVector Multiply(XMVector q1, XMVector q2) Parameters Type Name Description XMVector q1 The first quaternion. XMVector q2 The second quaternion. Returns Type Description XMVector Returns the product of the two quaternions. | Improve this Doc View Source Normalize(XMVector) Normalizes a quaternion. Declaration public static XMVector Normalize(XMVector q) Parameters Type Name Description XMVector q The quaternion. Returns Type Description XMVector The normalized form of the quaternion. | Improve this Doc View Source NormalizeEst(XMVector) Estimates the normalized version of a quaternion. Declaration public static XMVector NormalizeEst(XMVector q) Parameters Type Name Description XMVector q The quaternion. Returns Type Description XMVector The estimate of the normalized version of a quaternion. | Improve this Doc View Source NotEqual(XMVector, XMVector) Tests whether two quaternions are not equal. Declaration public static bool NotEqual(XMVector q1, XMVector q2) Parameters Type Name Description XMVector q1 The first quaternion to test. XMVector q2 The second quaternion to test. Returns Type Description Boolean Returns true if the quaternions are unequal and false otherwise. | Improve this Doc View Source ReciprocalLength(XMVector) Computes the reciprocal of the magnitude of a quaternion. Declaration public static XMVector ReciprocalLength(XMVector q) Parameters Type Name Description XMVector q The quaternion to measure. Returns Type Description XMVector Returns the reciprocal of the magnitude of Q. | Improve this Doc View Source RotationAxis(XMVector, Single) Computes a rotation quaternion about an axis. Declaration public static XMVector RotationAxis(XMVector axis, float angle) Parameters Type Name Description XMVector axis 3D vector describing the axis of rotation. Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMVector Returns the rotation quaternion. | Improve this Doc View Source RotationMatrix(XMMatrix) Computes a rotation quaternion from a rotation matrix. Declaration public static XMVector RotationMatrix(XMMatrix m) Parameters Type Name Description XMMatrix m The rotation matrix. Returns Type Description XMVector Returns the rotation quaternion. | Improve this Doc View Source RotationNormal(XMVector, Single) Computes the rotation quaternion about a normal vector. Declaration public static XMVector RotationNormal(XMVector normalAxis, float angle) Parameters Type Name Description XMVector normalAxis Normal vector describing the axis of rotation. Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMVector Returns the rotation quaternion. | Improve this Doc View Source RotationRollPitchYaw(Single, Single, Single) Computes a rotation quaternion based on the pitch, yaw, and roll (Euler angles). Declaration public static XMVector RotationRollPitchYaw(float pitch, float yaw, float roll) Parameters Type Name Description Single pitch Angle of rotation around the x-axis, in radians. Single yaw Angle of rotation around the y-axis, in radians. Single roll Angle of rotation around the z-axis, in radians. Returns Type Description XMVector Returns the rotation quaternion. | Improve this Doc View Source RotationRollPitchYawFromVector(XMVector) Computes a rotation quaternion based on a vector containing the Euler angles (pitch, yaw, and roll). Declaration public static XMVector RotationRollPitchYawFromVector(XMVector angles) Parameters Type Name Description XMVector angles A 3D vector containing the Euler angles in the order pitch, yaw, roll. Returns Type Description XMVector Returns the rotation quaternion. | Improve this Doc View Source Slerp(XMVector, XMVector, Single) Interpolates between two unit quaternions, using spherical linear interpolation. Declaration public static XMVector Slerp(XMVector q0, XMVector q1, float t) Parameters Type Name Description XMVector q0 An unit quaternion to interpolate from. XMVector q1 An unit quaternion to interpolate to. Single t The interpolation control factor. Returns Type Description XMVector Returns the interpolated quaternion. If Q0 and Q1 are not unit quaternions, the resulting interpolation is undefined. | Improve this Doc View Source SlerpV(XMVector, XMVector, XMVector) Interpolates between two unit quaternions, using spherical linear interpolation. Declaration public static XMVector SlerpV(XMVector q0, XMVector q1, XMVector t) Parameters Type Name Description XMVector q0 An unit quaternion to interpolate from. XMVector q1 An unit quaternion to interpolate to. XMVector t The interpolation control factor. All components of this vector must be the same. Returns Type Description XMVector Returns the interpolated quaternion. If Q0 and Q1 are not unit quaternions, the resulting interpolation is undefined. | Improve this Doc View Source Squad(XMVector, XMVector, XMVector, XMVector, Single) Interpolates between four unit quaternions, using spherical quadrangle interpolation. Declaration public static XMVector Squad(XMVector q0, XMVector q1, XMVector q2, XMVector q3, float t) Parameters Type Name Description XMVector q0 The first unit quaternion. XMVector q1 The second unit quaternion. XMVector q2 The third unit quaternion. XMVector q3 The fourth unit quaternion. Single t The interpolation control factor. Returns Type Description XMVector Returns the interpolated quaternion. If Q0, Q1, Q2, and Q3 are not all unit quaternions, the returned quaternion is undefined. | Improve this Doc View Source SquadSetup(out XMVector, out XMVector, out XMVector, XMVector, XMVector, XMVector, XMVector) Provides addresses of setup control points for spherical quadrangle interpolation. Declaration public static void SquadSetup(out XMVector a, out XMVector b, out XMVector c, XMVector q0, XMVector q1, XMVector q2, XMVector q3) Parameters Type Name Description XMVector a The first setup quaternion. XMVector b The second setup quaternion. XMVector c The third setup quaternion. XMVector q0 The first quaternion. XMVector q1 The second quaternion. XMVector q2 The third quaternion. XMVector q3 The fourth quaternion. | Improve this Doc View Source SquadV(XMVector, XMVector, XMVector, XMVector, XMVector) Interpolates between four unit quaternions, using spherical quadrangle interpolation. Declaration public static XMVector SquadV(XMVector q0, XMVector q1, XMVector q2, XMVector q3, XMVector t) Parameters Type Name Description XMVector q0 The first unit quaternion. XMVector q1 The second unit quaternion. XMVector q2 The third unit quaternion. XMVector q3 The fourth unit quaternion. XMVector t The interpolation control factor. All components of this vector must be the same. Returns Type Description XMVector Returns the interpolated quaternion. If Q0, Q1, Q2, and Q3 are not unit quaternions, the resulting interpolation is undefined. | Improve this Doc View Source ToAxisAngle(out XMVector, out Single, XMVector) Computes an axis and angle of rotation about that axis for a given quaternion. Declaration public static void ToAxisAngle(out XMVector axis, out float angle, XMVector q) Parameters Type Name Description XMVector axis A 3D vector describing the axis of rotation for the quaternion Q. Single angle The radian angle of rotation for the quaternion Q. XMVector q The quaternion to measure."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMPlane.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMPlane.html",
    "title": "Class XMPlane",
    "keywords": "Class XMPlane The plane functions provided by DirectXMath. Inheritance Object XMPlane Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMPlane Remarks These functions use an XMVector 4-vector to represent the coefficients of the plane equation, Ax+By+Cz+D = 0 , where the X-component is A, the Y-component is B, the Z-component is C, and the W-component is D. Methods | Improve this Doc View Source Dot(XMVector, XMVector) Calculates the dot product between an input plane and a 4D vector. Declaration public static XMVector Dot(XMVector p, XMVector v) Parameters Type Name Description XMVector p The plane. XMVector v The 4D vector to use in the dot product. Returns Type Description XMVector Returns the dot product of P and V replicated into each of the four components of the returned XMVector . | Improve this Doc View Source DotCoord(XMVector, XMVector) Calculates the dot product between an input plane and a 3D vector. Declaration public static XMVector DotCoord(XMVector p, XMVector v) Parameters Type Name Description XMVector p The plane. XMVector v 3D vector to use in the dot product. The w component of V is always treated as if is 1.0f. Returns Type Description XMVector Returns the dot product between P and V replicated into each of the four components of the returned XMVector . | Improve this Doc View Source DotNormal(XMVector, XMVector) Calculates the dot product between the normal vector of a plane and a 3D vector. Declaration public static XMVector DotNormal(XMVector p, XMVector v) Parameters Type Name Description XMVector p The plane. XMVector v 3D vector to use in the dot product. The w component of V is always treated as if is 0.0f. Returns Type Description XMVector Returns the dot product between the normal vector of the plane and V replicated into each of the four components of the returned XMVector . | Improve this Doc View Source Equal(XMVector, XMVector) Determines if two planes are equal. Declaration public static bool Equal(XMVector p1, XMVector p2) Parameters Type Name Description XMVector p1 The first plane. XMVector p2 The second plane. Returns Type Description Boolean Returns true if the two planes are equal and false otherwise. | Improve this Doc View Source FromPointNormal(XMVector, XMVector) Computes the equation of a plane constructed from a point in the plane and a normal vector. Declaration public static XMVector FromPointNormal(XMVector point, XMVector normal) Parameters Type Name Description XMVector point A point in the plane. XMVector normal The normal to the plane. Returns Type Description XMVector Returns a vector whose components are the coefficients of the plane. | Improve this Doc View Source FromPoints(XMVector, XMVector, XMVector) Computes the equation of a plane constructed from three points in the plane. Declaration public static XMVector FromPoints(XMVector point1, XMVector point2, XMVector point3) Parameters Type Name Description XMVector point1 A first point in the plane. XMVector point2 A second point in the plane. XMVector point3 A third point in the plane. Returns Type Description XMVector Returns a vector whose components are the coefficients of the plane. | Improve this Doc View Source IntersectLine(XMVector, XMVector, XMVector) Finds the intersection between a plane and a line. Declaration public static XMVector IntersectLine(XMVector p, XMVector linePoint1, XMVector linePoint2) Parameters Type Name Description XMVector p The plane XMVector linePoint1 The first point on the line. XMVector linePoint2 The second point on the line. Returns Type Description XMVector Returns the intersection of the plane P and the line defined by LinePoint1 and LinePoint2. If the line is parallel to the plane, all components of the returned vector are equal to QNaN. | Improve this Doc View Source IntersectPlane(out XMVector, out XMVector, XMVector, XMVector) Finds the intersection of two planes. Declaration public static void IntersectPlane(out XMVector linePoint1, out XMVector linePoint2, XMVector p1, XMVector p2) Parameters Type Name Description XMVector linePoint1 One point on the line of intersection. XMVector linePoint2 A second point on the line of intersection. XMVector p1 The first plane. XMVector p2 The second plane. | Improve this Doc View Source IsInfinite(XMVector) Tests whether any of the coefficients of a plane is positive or negative infinity. Declaration public static bool IsInfinite(XMVector p) Parameters Type Name Description XMVector p The plane. Returns Type Description Boolean Returns true if any of the coefficients of the plane is positive or negative infinity, and false otherwise. | Improve this Doc View Source IsNaN(XMVector) Tests whether any of the coefficients of a plane is a NaN. Declaration public static bool IsNaN(XMVector p) Parameters Type Name Description XMVector p The plane. Returns Type Description Boolean Returns true if any of the coefficients of the plane is a NaN, and false otherwise. | Improve this Doc View Source NearEqual(XMVector, XMVector, XMVector) Determines whether two planes are nearly equal. Declaration public static bool NearEqual(XMVector p1, XMVector p2, XMVector epsilon) Parameters Type Name Description XMVector p1 The first plane. XMVector p2 The second plane. XMVector epsilon the component-wise tolerance to use. Returns Type Description Boolean Returns true if P1 is nearly equal to P2 and false otherwise. | Improve this Doc View Source Normalize(XMVector) Normalizes the coefficients of a plane so that coefficients of x, y, and z form a unit normal vector. Declaration public static XMVector Normalize(XMVector p) Parameters Type Name Description XMVector p The plane. Returns Type Description XMVector Returns the normalized plane. | Improve this Doc View Source NormalizeEst(XMVector) Estimates the coefficients of a plane so that coefficients of x, y, and z form a unit normal vector. Declaration public static XMVector NormalizeEst(XMVector p) Parameters Type Name Description XMVector p The plane. Returns Type Description XMVector Returns an estimation of the normalized plane. | Improve this Doc View Source NotEqual(XMVector, XMVector) Determines if two planes are unequal. Declaration public static bool NotEqual(XMVector p1, XMVector p2) Parameters Type Name Description XMVector p1 The first plane. XMVector p2 The second plane. Returns Type Description Boolean Returns true if the two planes are unequal and false otherwise. | Improve this Doc View Source Transform(XMVector, XMMatrix) Transforms a plane by a given matrix. Declaration public static XMVector Transform(XMVector p, XMMatrix m) Parameters Type Name Description XMVector p The plane. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed plane."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMPermutation.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMPermutation.html",
    "title": "Enum XMPermutation",
    "keywords": "Enum XMPermutation Constants used as an element index with Permute(XMVector, XMVector, XMPermutation, XMPermutation, XMPermutation, XMPermutation) . Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public enum XMPermutation : uint Fields Name Description Permute0W This indicates that the W component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute0X indicates that the X component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute0Y This indicates that the Y component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute0Z This indicates that the Z component of the first of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute1W This indicates that the W component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute1X This indicates that the X component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute1Y This indicates that the Y component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element. Permute1Z This indicates that the Z component of the second of the vector arguments is to be copied to the index location in a result vector corresponding to the specified element."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMFloat2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMFloat2.html",
    "title": "Struct XMFloat2",
    "keywords": "Struct XMFloat2 A 2D vector consisting of two single-precision floating-point values. Implements IEquatable < XMFloat2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat2 : IEquatable<XMFloat2> Constructors | Improve this Doc View Source XMFloat2(Single, Single) Initializes a new instance of the XMFloat2 struct. Declaration public XMFloat2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMFloat2(Single[]) Initializes a new instance of the XMFloat2 struct. Declaration public XMFloat2(float[] array) Parameters Type Name Description Single [] array The components of the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(XMFloat2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat2 other) Parameters Type Name Description XMFloat2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMFloat2 . Declaration public static XMFloat2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat2 A XMFloat2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMFloat2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMFloat2, XMFloat2) Compares two XMFloat2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat2 left, XMFloat2 right) Parameters Type Name Description XMFloat2 left The left XMFloat2 to compare. XMFloat2 right The right XMFloat2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat2 to XMVector) Converts a XMFloat2 to a XMVector . Declaration public static implicit operator XMVector(XMFloat2 value) Parameters Type Name Description XMFloat2 value A XMFloat2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMFloat2) Converts a XMVector to a XMFloat2 . Declaration public static implicit operator XMFloat2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat2 A XMFloat2 . | Improve this Doc View Source Inequality(XMFloat2, XMFloat2) Compares two XMFloat2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat2 left, XMFloat2 right) Parameters Type Name Description XMFloat2 left The left XMFloat2 to compare. XMFloat2 right The right XMFloat2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMComparisonRecord.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMComparisonRecord.html",
    "title": "Struct XMComparisonRecord",
    "keywords": "Struct XMComparisonRecord A comparison value. Implements IEquatable < XMComparisonRecord > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMComparisonRecord : IEquatable<XMComparisonRecord> Constructors | Improve this Doc View Source XMComparisonRecord(UInt32) Initializes a new instance of the XMComparisonRecord struct. Declaration public XMComparisonRecord(uint record) Parameters Type Name Description UInt32 record A comparison record. Fields | Improve this Doc View Source Mask Mask to get a comparison result. Declaration public const uint Mask = 240U Field Value Type Description UInt32 | Improve this Doc View Source MaskBounds Mask to get a comparison result, and verify if the result indicates that some of the inputs were out of bounds. Declaration public const uint MaskBounds = 32U Field Value Type Description UInt32 | Improve this Doc View Source MaskFalse Mask to get a comparison result, and verify if it is a logical false. Declaration public const uint MaskFalse = 32U Field Value Type Description UInt32 | Improve this Doc View Source MaskTrue Mask to get a comparison result, and verify if it is a logical true. Declaration public const uint MaskTrue = 128U Field Value Type Description UInt32 Properties | Improve this Doc View Source IsAllFalse Gets a value indicating whether all of the compared components are false. Declaration public bool IsAllFalse { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAllInBounds Gets a value indicating whether all of the compared components are within set bounds. Declaration public bool IsAllInBounds { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAllTrue Gets a value indicating whether all of the compared components are true. Declaration public bool IsAllTrue { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAnyFalse Gets a value indicating whether any of the compared components are false. Declaration public bool IsAnyFalse { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAnyOutOfBounds Gets a value indicating whether any of the compared components are outside the set bounds. Declaration public bool IsAnyOutOfBounds { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAnyTrue Gets a value indicating whether any of the compared components are true Declaration public bool IsAnyTrue { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMixed Gets a value indicating whether the compared components had mixed results: some true and some false. Declaration public bool IsMixed { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(XMComparisonRecord) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMComparisonRecord other) Parameters Type Name Description XMComparisonRecord other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(XMComparisonRecord, XMComparisonRecord) Compares two XMComparisonRecord objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMComparisonRecord left, XMComparisonRecord right) Parameters Type Name Description XMComparisonRecord left The left XMComparisonRecord to compare. XMComparisonRecord right The right XMComparisonRecord to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(XMComparisonRecord, XMComparisonRecord) Compares two XMComparisonRecord objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMComparisonRecord left, XMComparisonRecord right) Parameters Type Name Description XMComparisonRecord left The left XMComparisonRecord to compare. XMComparisonRecord right The right XMComparisonRecord to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMColor.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMColor.html",
    "title": "Class XMColor",
    "keywords": "Class XMColor The color functions provided by DirectXMath. Inheritance Object XMColor Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMColor Methods | Improve this Doc View Source AdjustContrast(XMVector, Single) Adjusts the contrast value of a color. Declaration public static XMVector AdjustContrast(XMVector color, float contrast) Parameters Type Name Description XMVector color The color. Each of the components of C should be in the range 0.0f to 1.0f. Single contrast Contrast value. This parameter linearly interpolates between 50 percent gray and the color C. If this parameter is 0.0f, the returned color is 50 percent gray. If this parameter is 1.0f, the returned color is the original color. Returns Type Description XMVector The color resulting from the contrast adjustment. | Improve this Doc View Source AdjustSaturation(XMVector, Single) Adjusts the saturation value of a color. Declaration public static XMVector AdjustSaturation(XMVector color, float saturation) Parameters Type Name Description XMVector color The color. Each of the components of C should be in the range 0.0f to 1.0f. Single saturation Saturation value. This parameter linearly interpolates between the color converted to gray-scale and the original color, C. If Saturation is 0.0f, the function returns the gray-scale color. If Saturation is 1.0f, the function returns the original color. Returns Type Description XMVector The color resulting from the saturation adjustment. | Improve this Doc View Source Equal(XMVector, XMVector) Tests for the equality of two colors. Declaration public static bool Equal(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if each of the components of the two colors are equal, or false otherwise. | Improve this Doc View Source Greater(XMVector, XMVector) Tests whether all the components of the first color are greater than the corresponding components in the second color. Declaration public static bool Greater(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if every component of C1 is greater than the corresponding component in C2. Returns false otherwise. | Improve this Doc View Source GreaterOrEqual(XMVector, XMVector) Tests whether all the components of the first color are greater than or equal to the corresponding components of the second color. Declaration public static bool GreaterOrEqual(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if every component of C1 is greater than or equal to the corresponding component in C2. Returns false otherwise. | Improve this Doc View Source HslToRgb(XMVector) Converts HSL color values to RGB color values. Declaration public static XMVector HslToRgb(XMVector hsl) Parameters Type Name Description XMVector hsl Color value to convert. The X element is Hue (H), the Y element is Saturation (S), the Z element is Luminance (L), and the W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of hsl.w ) . Each has a range of 0.0 to 1.0. | Improve this Doc View Source HsvToRgb(XMVector) Converts HSV color values to RGB color values. Declaration public static XMVector HsvToRgb(XMVector hsv) Parameters Type Name Description XMVector hsv Color value to convert. The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of hsv.w ) . Each has a range of 0.0 to 1.0. | Improve this Doc View Source IsInfinite(XMVector) Tests to see whether any of the components of a color are either positive or negative infinity. Declaration public static bool IsInfinite(XMVector c) Parameters Type Name Description XMVector c The color. Returns Type Description Boolean Returns true if any components of C are either positive or negative infinity. Returns false otherwise. | Improve this Doc View Source IsNaN(XMVector) Tests to see whether any component of a color is not a number (NaN). Declaration public static bool IsNaN(XMVector c) Parameters Type Name Description XMVector c The color. Returns Type Description Boolean Returns true if any components of C are NaN, or false otherwise. | Improve this Doc View Source Less(XMVector, XMVector) Tests whether all the components of the first color are less than the corresponding components of the second color. Declaration public static bool Less(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if every component of C1 is less than the corresponding component in C2. Returns false otherwise. | Improve this Doc View Source LessOrEqual(XMVector, XMVector) Tests whether all the components of the first color are less than or equal to the corresponding components of the second color. Declaration public static bool LessOrEqual(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if every component of C1 is less than or equal to the corresponding component in C2. Returns false otherwise. | Improve this Doc View Source Modulate(XMVector, XMVector) Blends two colors by multiplying corresponding components together. Declaration public static XMVector Modulate(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color. XMVector c2 The second color. Returns Type Description XMVector The color resulting from the modulation. | Improve this Doc View Source Negative(XMVector) Determines the negative RGB color value of a color. Declaration public static XMVector Negative(XMVector c) Parameters Type Name Description XMVector c The color. Each of the components of C should be in the range 0.0f to 1.0f. Returns Type Description XMVector The negative color. The w-component (alpha) is copied unmodified from the input vector. | Improve this Doc View Source NotEqual(XMVector, XMVector) Tests to see whether two colors are unequal. Declaration public static bool NotEqual(XMVector c1, XMVector c2) Parameters Type Name Description XMVector c1 The first color to compare. XMVector c2 The second color to compare. Returns Type Description Boolean Returns true if any component of C1 is different from the corresponding component of C2. Returns false otherwise. | Improve this Doc View Source RgbToHsl(XMVector) Converts RGB color values to HSL color values. Declaration public static XMVector RgbToHsl(XMVector rgb) Parameters Type Name Description XMVector rgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. The X element is Hue (H), the Y element is Saturation (S), the Z element is Luminance (L), and the W element is Alpha (a copy of the input's Alpha value). Each has a range of 0.0 to 1.0. | Improve this Doc View Source RgbToHsv(XMVector) Converts RGB color values to HSV color values. Declaration public static XMVector RgbToHsv(XMVector rgb) Parameters Type Name Description XMVector rgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. The X element is Hue (H), the Y element is Saturation (S), the Z element is Value (V), and the W element is Alpha (a copy of rgb.w ). Each has a range of 0.0 to 1.0. | Improve this Doc View Source RgbToSrgb(XMVector) Converts an RGB color vector to sRGB. Declaration public static XMVector RgbToSrgb(XMVector rgb) Parameters Type Name Description XMVector rgb The original RGB color vector. Returns Type Description XMVector The converted sRGBA color vector. The x element is red, the y element is green, the z element is blue, and the w element is the alpha value (which is a copy of rgb.w ). Each element value has a range of 0.0 to 1.0 in the sRGB colorspace. | Improve this Doc View Source RgbToXyz(XMVector) Converts RGB color values to XYZ color values. Declaration public static XMVector RgbToXyz(XMVector rgb) Parameters Type Name Description XMVector rgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of rgb.w ). Each has a range of 0.0 to 1.0. | Improve this Doc View Source RgbToYuv(XMVector) Converts RGB color values to YUV color values. Declaration public static XMVector RgbToYuv(XMVector rgb) Parameters Type Name Description XMVector rgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (-0.5 to 0.5), the Z element contains the Red-difference chroma (-0.5 to 0.5), and the W element contains the Alpha (a copy of rgb.w ). | Improve this Doc View Source RgbToYuvHD(XMVector) Converts RGB color values to YUV HD color values. Declaration public static XMVector RgbToYuvHD(XMVector rgb) Parameters Type Name Description XMVector rgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value in Luma-Chrominance (YUV) aka YCbCr. The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (-0.5 to 0.5), the Z element contains the Red-difference chroma (-0.5 to 0.5), and the W element contains the Alpha (a copy of rgb.w ). | Improve this Doc View Source SrgbToRgb(XMVector) Converts an sRGB color vector to RGB. Declaration public static XMVector SrgbToRgb(XMVector srgb) Parameters Type Name Description XMVector srgb An sRGB color vector. Returns Type Description XMVector The converted RGBA color vector. The x element is red, the y element is green, the z element is blue, and the w element is the alpha value (which is a copy of srgb.w ). Each element value has a range of 0.0 to 1.0 in the RGB colorspace. | Improve this Doc View Source SrgbToXyz(XMVector) Converts SRGB color values to XYZ color values. Declaration public static XMVector SrgbToXyz(XMVector srgb) Parameters Type Name Description XMVector srgb Color value to convert. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha. Each has a range of 0.0 to 1.0 and is in the linear sRGB colorspace. Returns Type Description XMVector The converted color value with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha (a copy of rgb.w ). Each has a range of 0.0 to 1.0. | Improve this Doc View Source XyzToRgb(XMVector) Converts XYZ color values to RGB color values. Declaration public static XMVector XyzToRgb(XMVector xyz) Parameters Type Name Description XMVector xyz Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of xyz.w ). Each has a range of 0.0 to 1.0. | Improve this Doc View Source XyzToSrgb(XMVector) Converts XYZ color values to SRGB color values. Declaration public static XMVector XyzToSrgb(XMVector xyz) Parameters Type Name Description XMVector xyz Color value to convert with the trisimulus values of X, Y, and Z in the corresponding element, and the W element with Alpha. Each has a range of 0.0 to 1.0. Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of xyz.w ). Each has a range of 0.0 to 1.0 in the linear sRGB colorspace. | Improve this Doc View Source YuvToRgb(XMVector) Converts YUV color values to RGB color values. Declaration public static XMVector YuvToRgb(XMVector yuv) Parameters Type Name Description XMVector yuv Color value to convert in Luma-Chrominance (YUV) aka YCbCr . The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (0.0 to 1.0). Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of yuv.w ). Each has a range of 0.0 to 1.0. | Improve this Doc View Source YuvToRgbHD(XMVector) Converts YUV color values to RGB HD color values. Declaration public static XMVector YuvToRgbHD(XMVector yuv) Parameters Type Name Description XMVector yuv Color value to convert in Luma-Chrominance (YUV) aka YCbCr . The X element contains Luma (Y, 0.0 to 1.0), the Y element contains Blue-difference chroma (U, -0.5 to 0.5), the Z element contains the Red-difference chroma (V, -0.5 to 0.5), and the W element contains the Alpha (0.0 to 1.0). Returns Type Description XMVector The converted color value. X element is Red, Y element is Green, Z element is Blue, and W element is Alpha (a copy of yuv.w ). Each has a range of 0.0 to 1.0."
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.html",
    "title": "Namespace JeremyAnsel.DirectX.DXMath.PackedVector",
    "keywords": "Namespace JeremyAnsel.DirectX.DXMath.PackedVector Structs Half An alias to ushort packed with a 16-bit floating-point number consisting of a sign bit, a 5-bit biased exponent, and a 10-bit mantissa. XMByte2 A 2D vector where each component is a signed integer, 8-bits (1 byte) in length. XMByte4 A 4D vector where each component is a signed integer, 8-bits (1 byte) in length. XMByteN2 A 2D vector for storing signed, normalized values as signed 8-bits (1 byte) integers. XMByteN4 A 3D vector for storing signed, normalized values as signed 8-bits (1 byte) integers. XMColorRgba A 32-bit Alpha Red Green Blue (ARGB) color vector, where each color channel is specified as an unsigned 8 bit integer. XMDec4 A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit signed integer value. XMDecN4 A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and a 2 bit signed w-component. XMFloat3Packed A 3D vector with X and Y components stored as 11 bit floating point number, and Z component stored as a 10 bit floating-point value. XMFloat3SharedExponent A 3D vector of three floating-point components with 9 bit mantissas, each sharing the same 5-bit exponent. XMHalf2 A 2D vector consisting of two half-precision (16bit) floating-point values. XMHalf4 A 4D vector consisting of four half-precision (16-bit) floating-point values. XMShort2 A 2D vector consisting of 16-bit signed and normalized integer components. XMShort4 A 4D vector consisting of 16-bit signed integer components. XMShortN2 A 2D vector for storing signed, normalized values as signed 16-bit integers. XMShortN4 A 4D vector for storing signed, normalized values as signed 16-bit integers. XMU555 A 4D vector with x-,y-, and z- components represented as 5 bit unsigned integer values, and the w-component as a 1 bit integer value. XMU565 A 3D vector with x- and z- components represented as 5-bit unsigned integer values, and the y- component as a 6-bit unsigned integer value. XMUByte2 A 2D vector where each component is a unsigned integer, 8-bits (1 byte) in length. XMUByte4 A 4D vector where each component is a unsigned integer, 8-bits (1 byte) in length. XMUByteN2 A 2D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers. XMUByteN4 A 3D vector for storing unsigned, normalized values as signed 8-bits (1 byte) integers. XMUDec4 A 4D vector with x-,y-, and z- components represented as 10 bit unsigned integer values, and the w-component as a 2 bit unsigned integer value. XMUDecN4 A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component. XMUDecN4XR A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component. XMUNibble4 A 4D vector with four unsigned 4-bit integer components. XMUShort2 A 2D vector consisting of 16-bit unsigned integer components. XMUShort4 A 4D vector consisting of 16-bit unsigned integer components. XMUShortN2 A 2D vector for storing unsigned, normalized values as unsigned 16-bit integers. XMUShortN4 A 4D vector for storing unsigned, normalized values as signed 16-bit integers. XMXDec4 A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit unsigned integer value. XMXDecN4 A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and an unsigned, normalized value as 2 bit unsigned w-component."
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMXDecN4.html",
    "title": "Struct XMXDecN4",
    "keywords": "Struct XMXDecN4 A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and an unsigned, normalized value as 2 bit unsigned w-component. Implements IEquatable < XMXDecN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMXDecN4 : IEquatable<XMXDecN4> Constructors | Improve this Doc View Source XMXDecN4(Single, Single, Single, Single) Initializes a new instance of the XMXDecN4 struct. Declaration public XMXDecN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMXDecN4(Single[]) Initializes a new instance of the XMXDecN4 struct. Declaration public XMXDecN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMXDecN4(UInt32) Initializes a new instance of the XMXDecN4 struct. Declaration public XMXDecN4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMXDecN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMXDecN4 other) Parameters Type Name Description XMXDecN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMXDecN4 . Declaration public static XMXDecN4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMXDecN4 A XMXDecN4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMXDecN4 . Declaration public static XMXDecN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMXDecN4 A XMXDecN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMXDecN4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMXDecN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMXDecN4, XMXDecN4) Compares two XMXDecN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMXDecN4 left, XMXDecN4 right) Parameters Type Name Description XMXDecN4 left The left XMXDecN4 to compare. XMXDecN4 right The right XMXDecN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMXDecN4 to XMVector) Converts a XMXDecN4 to a XMVector . Declaration public static implicit operator XMVector(XMXDecN4 value) Parameters Type Name Description XMXDecN4 value A XMXDecN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMXDecN4 to UInt32) Converts a XMXDecN4 to a packed value. Declaration public static implicit operator uint (XMXDecN4 value) Parameters Type Name Description XMXDecN4 value A XMXDecN4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMXDecN4) Converts a XMVector to a XMXDecN4 . Declaration public static implicit operator XMXDecN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMXDecN4 A XMXDecN4 . | Improve this Doc View Source Implicit(UInt32 to XMXDecN4) Converts a packed value to a XMXDecN4 . Declaration public static implicit operator XMXDecN4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMXDecN4 A XMXDecN4 . | Improve this Doc View Source Inequality(XMXDecN4, XMXDecN4) Compares two XMXDecN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMXDecN4 left, XMXDecN4 right) Parameters Type Name Description XMXDecN4 left The left XMXDecN4 to compare. XMXDecN4 right The right XMXDecN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMXDec4.html",
    "title": "Struct XMXDec4",
    "keywords": "Struct XMXDec4 A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit unsigned integer value. Implements IEquatable < XMXDec4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMXDec4 : IEquatable<XMXDec4> Constructors | Improve this Doc View Source XMXDec4(Single, Single, Single, Single) Initializes a new instance of the XMXDec4 struct. Declaration public XMXDec4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMXDec4(Single[]) Initializes a new instance of the XMXDec4 struct. Declaration public XMXDec4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMXDec4(UInt32) Initializes a new instance of the XMXDec4 struct. Declaration public XMXDec4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMXDec4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMXDec4 other) Parameters Type Name Description XMXDec4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMXDec4 . Declaration public static XMXDec4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMXDec4 A XMXDec4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMXDec4 . Declaration public static XMXDec4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMXDec4 A XMXDec4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMXDec4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMXDec4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMXDec4, XMXDec4) Compares two XMXDec4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMXDec4 left, XMXDec4 right) Parameters Type Name Description XMXDec4 left The left XMXDec4 to compare. XMXDec4 right The right XMXDec4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMXDec4 to XMVector) Converts a XMXDec4 to a XMVector . Declaration public static implicit operator XMVector(XMXDec4 value) Parameters Type Name Description XMXDec4 value A XMXDec4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMXDec4 to UInt32) Converts a XMXDec4 to a packed value. Declaration public static implicit operator uint (XMXDec4 value) Parameters Type Name Description XMXDec4 value A XMXDec4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMXDec4) Converts a XMVector to a XMXDec4 . Declaration public static implicit operator XMXDec4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMXDec4 A XMXDec4 . | Improve this Doc View Source Implicit(UInt32 to XMXDec4) Converts a packed value to a XMXDec4 . Declaration public static implicit operator XMXDec4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMXDec4 A XMXDec4 . | Improve this Doc View Source Inequality(XMXDec4, XMXDec4) Compares two XMXDec4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMXDec4 left, XMXDec4 right) Parameters Type Name Description XMXDec4 left The left XMXDec4 to compare. XMXDec4 right The right XMXDec4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN4.html",
    "title": "Struct XMUShortN4",
    "keywords": "Struct XMUShortN4 A 4D vector for storing unsigned, normalized values as signed 16-bit integers. Implements IEquatable < XMUShortN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUShortN4 : IEquatable<XMUShortN4> Constructors | Improve this Doc View Source XMUShortN4(Single, Single, Single, Single) Initializes a new instance of the XMUShortN4 struct. Declaration public XMUShortN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUShortN4(Single[]) Initializes a new instance of the XMUShortN4 struct. Declaration public XMUShortN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUShortN4(UInt16, UInt16, UInt16, UInt16) Initializes a new instance of the XMUShortN4 struct. Declaration public XMUShortN4(ushort x, ushort y, ushort z, ushort w) Parameters Type Name Description UInt16 x The x-coordinate of the vector. UInt16 y The y-coordinate of the vector. UInt16 z The z-coordinate of the vector. UInt16 w The w-coordinate of the vector. | Improve this Doc View Source XMUShortN4(UInt16[]) Initializes a new instance of the XMUShortN4 struct. Declaration public XMUShortN4(ushort[] array) Parameters Type Name Description UInt16 [] array The components of the vector. | Improve this Doc View Source XMUShortN4(UInt64) Initializes a new instance of the XMUShortN4 struct. Declaration public XMUShortN4(ulong packed) Parameters Type Name Description UInt64 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public ushort W { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public ushort X { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public ushort Y { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public ushort Z { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(XMUShortN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUShortN4 other) Parameters Type Name Description XMUShortN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUShortN4 . Declaration public static XMUShortN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShortN4 A XMUShortN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUShortN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUShortN4, XMUShortN4) Compares two XMUShortN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUShortN4 left, XMUShortN4 right) Parameters Type Name Description XMUShortN4 left The left XMUShortN4 to compare. XMUShortN4 right The right XMUShortN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUShortN4 to XMVector) Converts a XMUShortN4 to a XMVector . Declaration public static implicit operator XMVector(XMUShortN4 value) Parameters Type Name Description XMUShortN4 value A XMUShortN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUShortN4) Converts a XMVector to a XMUShortN4 . Declaration public static implicit operator XMUShortN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShortN4 A XMUShortN4 . | Improve this Doc View Source Inequality(XMUShortN4, XMUShortN4) Compares two XMUShortN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUShortN4 left, XMUShortN4 right) Parameters Type Name Description XMUShortN4 left The left XMUShortN4 to compare. XMUShortN4 right The right XMUShortN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMShort2.html",
    "title": "Struct XMShort2",
    "keywords": "Struct XMShort2 A 2D vector consisting of 16-bit signed and normalized integer components. Implements IEquatable < XMShort2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMShort2 : IEquatable<XMShort2> Constructors | Improve this Doc View Source XMShort2(Int16, Int16) Initializes a new instance of the XMShort2 struct. Declaration public XMShort2(short x, short y) Parameters Type Name Description Int16 x The x-coordinate of the vector. Int16 y The y-coordinate of the vector. | Improve this Doc View Source XMShort2(Int16[]) Initializes a new instance of the XMShort2 struct. Declaration public XMShort2(short[] array) Parameters Type Name Description Int16 [] array The components of the vector. | Improve this Doc View Source XMShort2(Single, Single) Initializes a new instance of the XMShort2 struct. Declaration public XMShort2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMShort2(Single[]) Initializes a new instance of the XMShort2 struct. Declaration public XMShort2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMShort2(UInt32) Initializes a new instance of the XMShort2 struct. Declaration public XMShort2(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public short X { get; set; } Property Value Type Description Int16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public short Y { get; set; } Property Value Type Description Int16 Methods | Improve this Doc View Source Equals(XMShort2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMShort2 other) Parameters Type Name Description XMShort2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMShort2 . Declaration public static XMShort2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShort2 A XMShort2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMShort2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMShort2, XMShort2) Compares two XMShort2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMShort2 left, XMShort2 right) Parameters Type Name Description XMShort2 left The left XMShort2 to compare. XMShort2 right The right XMShort2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMShort2 to XMVector) Converts a XMShort2 to a XMVector . Declaration public static implicit operator XMVector(XMShort2 value) Parameters Type Name Description XMShort2 value A XMShort2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMShort2) Converts a XMVector to a XMShort2 . Declaration public static implicit operator XMShort2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMShort2 A XMShort2 . | Improve this Doc View Source Inequality(XMShort2, XMShort2) Compares two XMShort2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMShort2 left, XMShort2 right) Parameters Type Name Description XMShort2 left The left XMShort2 to compare. XMShort2 right The right XMShort2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf4.html",
    "title": "Struct XMHalf4",
    "keywords": "Struct XMHalf4 A 4D vector consisting of four half-precision (16-bit) floating-point values. Implements IEquatable < XMHalf4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMHalf4 : IEquatable<XMHalf4> Constructors | Improve this Doc View Source XMHalf4(Half, Half, Half, Half) Initializes a new instance of the XMHalf4 struct. Declaration public XMHalf4(Half x, Half y, Half z, Half w) Parameters Type Name Description Half x The x-coordinate. Half y The y-coordinate. Half z The z-coordinate. Half w The w-coordinate. | Improve this Doc View Source XMHalf4(Half[]) Initializes a new instance of the XMHalf4 struct. Declaration public XMHalf4(Half[] array) Parameters Type Name Description Half [] array The components of the vector. | Improve this Doc View Source XMHalf4(Single, Single, Single, Single) Initializes a new instance of the XMHalf4 struct. Declaration public XMHalf4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate. Single y The y-coordinate. Single z The z-coordinate. Single w The w-coordinate. | Improve this Doc View Source XMHalf4(Single[]) Initializes a new instance of the XMHalf4 struct. Declaration public XMHalf4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMHalf4(UInt64) Initializes a new instance of the XMHalf4 struct. Declaration public XMHalf4(ulong packed) Parameters Type Name Description UInt64 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate. Declaration public Half W { get; set; } Property Value Type Description Half | Improve this Doc View Source X Gets or sets the x-coordinate. Declaration public Half X { get; set; } Property Value Type Description Half | Improve this Doc View Source Y Gets or sets the y-coordinate. Declaration public Half Y { get; set; } Property Value Type Description Half | Improve this Doc View Source Z Gets or sets the z-coordinate. Declaration public Half Z { get; set; } Property Value Type Description Half Methods | Improve this Doc View Source Equals(XMHalf4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMHalf4 other) Parameters Type Name Description XMHalf4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMHalf4 . Declaration public static XMHalf4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMHalf4 A XMHalf4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMHalf4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMHalf4, XMHalf4) Compares two XMHalf4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMHalf4 left, XMHalf4 right) Parameters Type Name Description XMHalf4 left The left XMHalf4 to compare. XMHalf4 right The right XMHalf4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMHalf4 to XMVector) Converts a XMHalf4 to a XMVector . Declaration public static implicit operator XMVector(XMHalf4 value) Parameters Type Name Description XMHalf4 value A XMHalf4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMHalf4) Converts a XMVector to a XMHalf4 . Declaration public static implicit operator XMHalf4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMHalf4 A XMHalf4 . | Improve this Doc View Source Inequality(XMHalf4, XMHalf4) Compares two XMHalf4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMHalf4 left, XMHalf4 right) Parameters Type Name Description XMHalf4 left The left XMHalf4 to compare. XMHalf4 right The right XMHalf4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMHalf2.html",
    "title": "Struct XMHalf2",
    "keywords": "Struct XMHalf2 A 2D vector consisting of two half-precision (16bit) floating-point values. Implements IEquatable < XMHalf2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMHalf2 : IEquatable<XMHalf2> Constructors | Improve this Doc View Source XMHalf2(Half, Half) Initializes a new instance of the XMHalf2 struct. Declaration public XMHalf2(Half x, Half y) Parameters Type Name Description Half x The x-coordinate. Half y The y-coordinate. | Improve this Doc View Source XMHalf2(Half[]) Initializes a new instance of the XMHalf2 struct. Declaration public XMHalf2(Half[] array) Parameters Type Name Description Half [] array The components of the vector. | Improve this Doc View Source XMHalf2(Single, Single) Initializes a new instance of the XMHalf2 struct. Declaration public XMHalf2(float x, float y) Parameters Type Name Description Single x The x-coordinate. Single y The y-coordinate. | Improve this Doc View Source XMHalf2(Single[]) Initializes a new instance of the XMHalf2 struct. Declaration public XMHalf2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMHalf2(UInt32) Initializes a new instance of the XMHalf2 struct. Declaration public XMHalf2(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate. Declaration public Half X { get; set; } Property Value Type Description Half | Improve this Doc View Source Y Gets or sets the y-coordinate. Declaration public Half Y { get; set; } Property Value Type Description Half Methods | Improve this Doc View Source Equals(XMHalf2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMHalf2 other) Parameters Type Name Description XMHalf2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMHalf2 . Declaration public static XMHalf2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMHalf2 A XMHalf2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMHalf2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMHalf2, XMHalf2) Compares two XMHalf2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMHalf2 left, XMHalf2 right) Parameters Type Name Description XMHalf2 left The left XMHalf2 to compare. XMHalf2 right The right XMHalf2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMHalf2 to XMVector) Converts a XMHalf2 to a XMVector . Declaration public static implicit operator XMVector(XMHalf2 value) Parameters Type Name Description XMHalf2 value A XMHalf2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMHalf2) Converts a XMVector to a XMHalf2 . Declaration public static implicit operator XMHalf2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMHalf2 A XMHalf2 . | Improve this Doc View Source Inequality(XMHalf2, XMHalf2) Compares two XMHalf2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMHalf2 left, XMHalf2 right) Parameters Type Name Description XMHalf2 left The left XMHalf2 to compare. XMHalf2 right The right XMHalf2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3SharedExponent.html",
    "title": "Struct XMFloat3SharedExponent",
    "keywords": "Struct XMFloat3SharedExponent A 3D vector of three floating-point components with 9 bit mantissas, each sharing the same 5-bit exponent. Implements IEquatable < XMFloat3SharedExponent > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat3SharedExponent : IEquatable<XMFloat3SharedExponent> Constructors | Improve this Doc View Source XMFloat3SharedExponent(Single, Single, Single) Initializes a new instance of the XMFloat3SharedExponent struct. Declaration public XMFloat3SharedExponent(float x, float y, float z) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. | Improve this Doc View Source XMFloat3SharedExponent(Single[]) Initializes a new instance of the XMFloat3SharedExponent struct. Declaration public XMFloat3SharedExponent(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMFloat3SharedExponent(UInt32) Initializes a new instance of the XMFloat3SharedExponent struct. Declaration public XMFloat3SharedExponent(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source E Gets or sets the 5-bit shared exponent. Declaration public byte E { get; set; } Property Value Type Description Byte | Improve this Doc View Source XM Gets or sets the 9-bit x component. Declaration public uint XM { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source YM Gets or sets the 9-bit y component. Declaration public byte YM { get; set; } Property Value Type Description Byte | Improve this Doc View Source ZM Gets or sets the 9-bit z component. Declaration public byte ZM { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMFloat3SharedExponent) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat3SharedExponent other) Parameters Type Name Description XMFloat3SharedExponent other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMFloat3SharedExponent . Declaration public static XMFloat3SharedExponent FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMFloat3SharedExponent A XMFloat3SharedExponent . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMFloat3SharedExponent . Declaration public static XMFloat3SharedExponent FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3SharedExponent A XMFloat3SharedExponent . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMFloat3SharedExponent to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMFloat3SharedExponent to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMFloat3SharedExponent, XMFloat3SharedExponent) Compares two XMFloat3SharedExponent objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat3SharedExponent left, XMFloat3SharedExponent right) Parameters Type Name Description XMFloat3SharedExponent left The left XMFloat3SharedExponent to compare. XMFloat3SharedExponent right The right XMFloat3SharedExponent to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat3SharedExponent to XMVector) Converts a XMFloat3SharedExponent to a XMVector . Declaration public static implicit operator XMVector(XMFloat3SharedExponent value) Parameters Type Name Description XMFloat3SharedExponent value A XMFloat3SharedExponent . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMFloat3SharedExponent to UInt32) Converts a XMFloat3SharedExponent to a packed value. Declaration public static implicit operator uint (XMFloat3SharedExponent value) Parameters Type Name Description XMFloat3SharedExponent value A XMFloat3SharedExponent . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMFloat3SharedExponent) Converts a XMVector to a XMFloat3SharedExponent . Declaration public static implicit operator XMFloat3SharedExponent(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3SharedExponent A XMFloat3SharedExponent . | Improve this Doc View Source Implicit(UInt32 to XMFloat3SharedExponent) Converts a packed value to a XMFloat3SharedExponent . Declaration public static implicit operator XMFloat3SharedExponent(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMFloat3SharedExponent A XMFloat3SharedExponent . | Improve this Doc View Source Inequality(XMFloat3SharedExponent, XMFloat3SharedExponent) Compares two XMFloat3SharedExponent objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat3SharedExponent left, XMFloat3SharedExponent right) Parameters Type Name Description XMFloat3SharedExponent left The left XMFloat3SharedExponent to compare. XMFloat3SharedExponent right The right XMFloat3SharedExponent to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMFloat3Packed.html",
    "title": "Struct XMFloat3Packed",
    "keywords": "Struct XMFloat3Packed A 3D vector with X and Y components stored as 11 bit floating point number, and Z component stored as a 10 bit floating-point value. Implements IEquatable < XMFloat3Packed > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMFloat3Packed : IEquatable<XMFloat3Packed> Constructors | Improve this Doc View Source XMFloat3Packed(Single, Single, Single) Initializes a new instance of the XMFloat3Packed struct. Declaration public XMFloat3Packed(float x, float y, float z) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. | Improve this Doc View Source XMFloat3Packed(Single[]) Initializes a new instance of the XMFloat3Packed struct. Declaration public XMFloat3Packed(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMFloat3Packed(UInt32) Initializes a new instance of the XMFloat3Packed struct. Declaration public XMFloat3Packed(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source XE Gets or sets the 5-bit biased exponent for the x component. Declaration public byte XE { get; set; } Property Value Type Description Byte | Improve this Doc View Source XM Gets or sets the 6-bit mantissa for the x component. Declaration public byte XM { get; set; } Property Value Type Description Byte | Improve this Doc View Source YE Gets or sets the 5-bit biased exponent for the y component. Declaration public byte YE { get; set; } Property Value Type Description Byte | Improve this Doc View Source YM Gets or sets the 6-bit mantissa for the y component. Declaration public byte YM { get; set; } Property Value Type Description Byte | Improve this Doc View Source ZE Gets or sets the 5-bit biased exponent for the z component. Declaration public byte ZE { get; set; } Property Value Type Description Byte | Improve this Doc View Source ZM Gets or sets the 5-bit mantissa for the z component. Declaration public byte ZM { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMFloat3Packed) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMFloat3Packed other) Parameters Type Name Description XMFloat3Packed other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMFloat3Packed . Declaration public static XMFloat3Packed FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMFloat3Packed A XMFloat3Packed . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMFloat3Packed . Declaration public static XMFloat3Packed FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3Packed A XMFloat3Packed . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMFloat3Packed to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMFloat3Packed to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMFloat3Packed, XMFloat3Packed) Compares two XMFloat3Packed objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMFloat3Packed left, XMFloat3Packed right) Parameters Type Name Description XMFloat3Packed left The left XMFloat3Packed to compare. XMFloat3Packed right The right XMFloat3Packed to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMFloat3Packed to XMVector) Converts a XMFloat3Packed to a XMVector . Declaration public static implicit operator XMVector(XMFloat3Packed value) Parameters Type Name Description XMFloat3Packed value A XMFloat3Packed . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMFloat3Packed to UInt32) Converts a XMFloat3Packed to a packed value. Declaration public static implicit operator uint (XMFloat3Packed value) Parameters Type Name Description XMFloat3Packed value A XMFloat3Packed . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMFloat3Packed) Converts a XMVector to a XMFloat3Packed . Declaration public static implicit operator XMFloat3Packed(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMFloat3Packed A XMFloat3Packed . | Improve this Doc View Source Implicit(UInt32 to XMFloat3Packed) Converts a packed value to a XMFloat3Packed . Declaration public static implicit operator XMFloat3Packed(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMFloat3Packed A XMFloat3Packed . | Improve this Doc View Source Inequality(XMFloat3Packed, XMFloat3Packed) Compares two XMFloat3Packed objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMFloat3Packed left, XMFloat3Packed right) Parameters Type Name Description XMFloat3Packed left The left XMFloat3Packed to compare. XMFloat3Packed right The right XMFloat3Packed to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMDecN4.html",
    "title": "Struct XMDecN4",
    "keywords": "Struct XMDecN4 A 4D vector for storing signed, normalized values as 10 bit signed x-,y-, and z- components and a 2 bit signed w-component. Implements IEquatable < XMDecN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMDecN4 : IEquatable<XMDecN4> Constructors | Improve this Doc View Source XMDecN4(Single, Single, Single, Single) Initializes a new instance of the XMDecN4 struct. Declaration public XMDecN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMDecN4(Single[]) Initializes a new instance of the XMDecN4 struct. Declaration public XMDecN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMDecN4(UInt32) Initializes a new instance of the XMDecN4 struct. Declaration public XMDecN4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public int W { get; set; } Property Value Type Description Int32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMDecN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMDecN4 other) Parameters Type Name Description XMDecN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMDecN4 . Declaration public static XMDecN4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMDecN4 A XMDecN4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMDecN4 . Declaration public static XMDecN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMDecN4 A XMDecN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMDecN4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMDecN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMDecN4, XMDecN4) Compares two XMDecN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMDecN4 left, XMDecN4 right) Parameters Type Name Description XMDecN4 left The left XMDecN4 to compare. XMDecN4 right The right XMDecN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMDecN4 to XMVector) Converts a XMDecN4 to a XMVector . Declaration public static implicit operator XMVector(XMDecN4 value) Parameters Type Name Description XMDecN4 value A XMDecN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMDecN4 to UInt32) Converts a XMDecN4 to a packed value. Declaration public static implicit operator uint (XMDecN4 value) Parameters Type Name Description XMDecN4 value A XMDecN4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMDecN4) Converts a XMVector to a XMDecN4 . Declaration public static implicit operator XMDecN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMDecN4 A XMDecN4 . | Improve this Doc View Source Implicit(UInt32 to XMDecN4) Converts a packed value to a XMDecN4 . Declaration public static implicit operator XMDecN4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMDecN4 A XMDecN4 . | Improve this Doc View Source Inequality(XMDecN4, XMDecN4) Compares two XMDecN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMDecN4 left, XMDecN4 right) Parameters Type Name Description XMDecN4 left The left XMDecN4 to compare. XMDecN4 right The right XMDecN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMDec4.html",
    "title": "Struct XMDec4",
    "keywords": "Struct XMDec4 A 4D vector with x-,y-, and z- components represented as 10 bit signed integer values, and the w-component as a 2 bit signed integer value. Implements IEquatable < XMDec4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMDec4 : IEquatable<XMDec4> Constructors | Improve this Doc View Source XMDec4(Single, Single, Single, Single) Initializes a new instance of the XMDec4 struct. Declaration public XMDec4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMDec4(Single[]) Initializes a new instance of the XMDec4 struct. Declaration public XMDec4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMDec4(UInt32) Initializes a new instance of the XMDec4 struct. Declaration public XMDec4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public int W { get; set; } Property Value Type Description Int32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public int Y { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public int Z { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(XMDec4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMDec4 other) Parameters Type Name Description XMDec4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMDec4 . Declaration public static XMDec4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMDec4 A XMDec4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMDec4 . Declaration public static XMDec4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMDec4 A XMDec4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMDec4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMDec4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMDec4, XMDec4) Compares two XMDec4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMDec4 left, XMDec4 right) Parameters Type Name Description XMDec4 left The left XMDec4 to compare. XMDec4 right The right XMDec4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMDec4 to XMVector) Converts a XMDec4 to a XMVector . Declaration public static implicit operator XMVector(XMDec4 value) Parameters Type Name Description XMDec4 value A XMDec4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMDec4 to UInt32) Converts a XMDec4 to a packed value. Declaration public static implicit operator uint (XMDec4 value) Parameters Type Name Description XMDec4 value A XMDec4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMDec4) Converts a XMVector to a XMDec4 . Declaration public static implicit operator XMDec4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMDec4 A XMDec4 . | Improve this Doc View Source Implicit(UInt32 to XMDec4) Converts a packed value to a XMDec4 . Declaration public static implicit operator XMDec4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMDec4 A XMDec4 . | Improve this Doc View Source Inequality(XMDec4, XMDec4) Compares two XMDec4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMDec4 left, XMDec4 right) Parameters Type Name Description XMDec4 left The left XMDec4 to compare. XMDec4 right The right XMDec4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMColorRgba.html",
    "title": "Struct XMColorRgba",
    "keywords": "Struct XMColorRgba A 32-bit Alpha Red Green Blue (ARGB) color vector, where each color channel is specified as an unsigned 8 bit integer. Implements IEquatable < XMColorRgba > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMColorRgba : IEquatable<XMColorRgba> Constructors | Improve this Doc View Source XMColorRgba(Single, Single, Single, Single) Initializes a new instance of the XMColorRgba struct. Declaration public XMColorRgba(float r, float g, float b, float a) Parameters Type Name Description Single r The red component. Single g The green component. Single b The blue component. Single a The alpha component. | Improve this Doc View Source XMColorRgba(Single[]) Initializes a new instance of the XMColorRgba struct. Declaration public XMColorRgba(float[] values) Parameters Type Name Description Single [] values The components of the color. | Improve this Doc View Source XMColorRgba(UInt32) Initializes a new instance of the XMColorRgba struct. Declaration public XMColorRgba(uint color) Parameters Type Name Description UInt32 color A packed value representing the color. Properties | Improve this Doc View Source Alpha Gets or sets the alpha component. Declaration public byte Alpha { get; set; } Property Value Type Description Byte | Improve this Doc View Source Blue Gets or sets the blue component. Declaration public byte Blue { get; set; } Property Value Type Description Byte | Improve this Doc View Source Green Gets or sets the green component. Declaration public byte Green { get; set; } Property Value Type Description Byte | Improve this Doc View Source Red Gets or sets the red component. Declaration public byte Red { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMColorRgba) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMColorRgba other) Parameters Type Name Description XMColorRgba other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromArgb(UInt32) Converts a packed value to a XMColorRgba . Declaration public static XMColorRgba FromArgb(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMColorRgba A XMColorRgba . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMColorRgba . Declaration public static XMColorRgba FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMColorRgba A XMColorRgba . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToArgb() Converts a XMColorRgba to a packed value. Declaration public uint ToArgb() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMColorRgba to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMColorRgba, XMColorRgba) Compares two XMColorRgba objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMColorRgba left, XMColorRgba right) Parameters Type Name Description XMColorRgba left The left XMColorRgba to compare. XMColorRgba right The right XMColorRgba to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMColorRgba to XMVector) Converts a XMColorRgba to a XMVector . Declaration public static implicit operator XMVector(XMColorRgba value) Parameters Type Name Description XMColorRgba value A XMColorRgba . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMColorRgba to UInt32) Converts a XMColorRgba to a packed value. Declaration public static implicit operator uint (XMColorRgba color) Parameters Type Name Description XMColorRgba color A XMColorRgba . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMColorRgba) Converts a XMVector to a XMColorRgba . Declaration public static implicit operator XMColorRgba(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMColorRgba A XMColorRgba . | Improve this Doc View Source Implicit(UInt32 to XMColorRgba) Converts a packed value to a XMColorRgba . Declaration public static implicit operator XMColorRgba(uint color) Parameters Type Name Description UInt32 color A packed value. Returns Type Description XMColorRgba A XMColorRgba . | Improve this Doc View Source Inequality(XMColorRgba, XMColorRgba) Compares two XMColorRgba objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMColorRgba left, XMColorRgba right) Parameters Type Name Description XMColorRgba left The left XMColorRgba to compare. XMColorRgba right The right XMColorRgba to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN4.html",
    "title": "Struct XMByteN4",
    "keywords": "Struct XMByteN4 A 3D vector for storing signed, normalized values as signed 8-bits (1 byte) integers. Implements IEquatable < XMByteN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMByteN4 : IEquatable<XMByteN4> Constructors | Improve this Doc View Source XMByteN4(SByte, SByte, SByte, SByte) Initializes a new instance of the XMByteN4 struct. Declaration public XMByteN4(sbyte x, sbyte y, sbyte z, sbyte w) Parameters Type Name Description SByte x The x-coordinate of the vector. SByte y The y-coordinate of the vector. SByte z The z-coordinate of the vector. SByte w The w-coordinate of the vector. | Improve this Doc View Source XMByteN4(SByte[]) Initializes a new instance of the XMByteN4 struct. Declaration public XMByteN4(sbyte[] array) Parameters Type Name Description SByte [] array The components of the vector. | Improve this Doc View Source XMByteN4(Single, Single, Single, Single) Initializes a new instance of the XMByteN4 struct. Declaration public XMByteN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMByteN4(Single[]) Initializes a new instance of the XMByteN4 struct. Declaration public XMByteN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMByteN4(UInt32) Initializes a new instance of the XMByteN4 struct. Declaration public XMByteN4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public sbyte W { get; set; } Property Value Type Description SByte | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public sbyte X { get; set; } Property Value Type Description SByte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public sbyte Y { get; set; } Property Value Type Description SByte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public sbyte Z { get; set; } Property Value Type Description SByte Methods | Improve this Doc View Source Equals(XMByteN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMByteN4 other) Parameters Type Name Description XMByteN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMByteN4 . Declaration public static XMByteN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByteN4 A XMByteN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMByteN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMByteN4, XMByteN4) Compares two XMByteN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMByteN4 left, XMByteN4 right) Parameters Type Name Description XMByteN4 left The left XMByteN4 to compare. XMByteN4 right The right XMByteN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMByteN4 to XMVector) Converts a XMByteN4 to a XMVector . Declaration public static implicit operator XMVector(XMByteN4 value) Parameters Type Name Description XMByteN4 value A XMByteN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMByteN4) Converts a XMVector to a XMByteN4 . Declaration public static implicit operator XMByteN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByteN4 A XMByteN4 . | Improve this Doc View Source Inequality(XMByteN4, XMByteN4) Compares two XMByteN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMByteN4 left, XMByteN4 right) Parameters Type Name Description XMByteN4 left The left XMByteN4 to compare. XMByteN4 right The right XMByteN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMByteN2.html",
    "title": "Struct XMByteN2",
    "keywords": "Struct XMByteN2 A 2D vector for storing signed, normalized values as signed 8-bits (1 byte) integers. Implements IEquatable < XMByteN2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMByteN2 : IEquatable<XMByteN2> Constructors | Improve this Doc View Source XMByteN2(SByte, SByte) Initializes a new instance of the XMByteN2 struct. Declaration public XMByteN2(sbyte x, sbyte y) Parameters Type Name Description SByte x The x-coordinate of the vector. SByte y The y-coordinate of the vector. | Improve this Doc View Source XMByteN2(SByte[]) Initializes a new instance of the XMByteN2 struct. Declaration public XMByteN2(sbyte[] array) Parameters Type Name Description SByte [] array The components of the vector. | Improve this Doc View Source XMByteN2(Single, Single) Initializes a new instance of the XMByteN2 struct. Declaration public XMByteN2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMByteN2(Single[]) Initializes a new instance of the XMByteN2 struct. Declaration public XMByteN2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMByteN2(UInt16) Initializes a new instance of the XMByteN2 struct. Declaration public XMByteN2(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public sbyte X { get; set; } Property Value Type Description SByte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public sbyte Y { get; set; } Property Value Type Description SByte Methods | Improve this Doc View Source Equals(XMByteN2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMByteN2 other) Parameters Type Name Description XMByteN2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMByteN2 . Declaration public static XMByteN2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByteN2 A XMByteN2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMByteN2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMByteN2, XMByteN2) Compares two XMByteN2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMByteN2 left, XMByteN2 right) Parameters Type Name Description XMByteN2 left The left XMByteN2 to compare. XMByteN2 right The right XMByteN2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMByteN2 to XMVector) Converts a XMByteN2 to a XMVector . Declaration public static implicit operator XMVector(XMByteN2 value) Parameters Type Name Description XMByteN2 value A XMByteN2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMByteN2) Converts a XMVector to a XMByteN2 . Declaration public static implicit operator XMByteN2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMByteN2 A XMByteN2 . | Improve this Doc View Source Inequality(XMByteN2, XMByteN2) Compares two XMByteN2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMByteN2 left, XMByteN2 right) Parameters Type Name Description XMByteN2 left The left XMByteN2 to compare. XMByteN2 right The right XMByteN2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.html",
    "title": "Class DxgiSwapChain1",
    "keywords": "Class DxgiSwapChain1 An IDXGISwapChain interface implements one or more surfaces for storing rendered data before presenting it to an output. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSwapChain1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSwapChain1 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the swap chain. Declaration public DxgiSwapChainDesc Description { get; } Property Value Type Description DxgiSwapChainDesc | Improve this Doc View Source FrameStatistics Gets performance statistics about the last render frame. Declaration public DxgiFrameStatistics FrameStatistics { get; } Property Value Type Description DxgiFrameStatistics | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source LastPresentCount Gets the number of times that IDXGISwapChain::Present or IDXGISwapChain1::Present1 has been called. Declaration public uint LastPresentCount { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source GetBuffer(UInt32, Guid) Accesses one of the swap-chain's back buffers. Declaration public object GetBuffer(uint buffer, Guid riid) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Guid riid The type of interface used to manipulate the buffer. Returns Type Description Object A pointer to a back-buffer interface. | Improve this Doc View Source GetContainingOutput() Get the output (the display monitor) that contains the majority of the client area of the target window. Declaration public DxgiOutput1 GetContainingOutput() Returns Type Description DxgiOutput1 The output interface. | Improve this Doc View Source GetFullscreenState() Get the state associated with full-screen mode. Declaration public bool GetFullscreenState() Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetFullscreenState(out DxgiOutput1) Get the state associated with full-screen mode. Declaration public bool GetFullscreenState(out DxgiOutput1 target) Parameters Type Name Description DxgiOutput1 target The output target when the mode is full screen. Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetSurface(UInt32) Accesses one of the swap-chain's back buffers. Declaration public DxgiSurface1 GetSurface(uint buffer) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Returns Type Description DxgiSurface1 A back-buffer surface. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions) Presents a rendered image to the user. Declaration public void Present(uint syncInterval, DxgiPresentOptions options) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options The swap-chain presentation options. | Improve this Doc View Source ResizeBuffers(UInt32, UInt32, UInt32, DxgiFormat, DxgiSwapChainOptions) Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized. Declaration public void ResizeBuffers(uint bufferCount, uint width, uint height, DxgiFormat format, DxgiSwapChainOptions options) Parameters Type Name Description UInt32 bufferCount The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. UInt32 width New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. UInt32 height New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. DxgiFormat format A DXGI_FORMAT -typed value for the new format of the back buffer. Set this value to DXGI_FORMAT_UNKNOWN to preserve the existing format of the back buffer. DxgiSwapChainOptions options The options for swap-chain behavior. | Improve this Doc View Source ResizeTarget(DxgiModeDesc) Resizes the output target. Declaration public void ResizeTarget(DxgiModeDesc targetParameters) Parameters Type Name Description DxgiModeDesc targetParameters A DXGI_MODE_DESC structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is DXGI_FORMAT_UNKNOWN , ResizeTarget uses the existing format. | Improve this Doc View Source SetFullscreenState(Boolean) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source SetFullscreenState(Boolean, DxgiOutput1) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen, DxgiOutput1 target) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. DxgiOutput1 target A pointer to an DXGIOutput1 interface for the output target that contains the swap chain. Implements System.IDisposable IDxgiReleasable Extension Methods DxgiSwapChainExtensions.GetTexture2D(DxgiSwapChain1, UInt32)"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.html",
    "title": "Class DxgiSwapChain",
    "keywords": "Class DxgiSwapChain An IDXGISwapChain interface implements one or more surfaces for storing rendered data before presenting it to an output. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSwapChain Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSwapChain : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the swap chain. Declaration public DxgiSwapChainDesc Description { get; } Property Value Type Description DxgiSwapChainDesc | Improve this Doc View Source FrameStatistics Gets performance statistics about the last render frame. Declaration public DxgiFrameStatistics FrameStatistics { get; } Property Value Type Description DxgiFrameStatistics | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source LastPresentCount Gets the number of times that IDXGISwapChain::Present or IDXGISwapChain1::Present1 has been called. Declaration public uint LastPresentCount { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source GetBuffer(UInt32, Guid) Accesses one of the swap-chain's back buffers. Declaration public object GetBuffer(uint buffer, Guid riid) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Guid riid The type of interface used to manipulate the buffer. Returns Type Description Object A pointer to a back-buffer interface. | Improve this Doc View Source GetContainingOutput() Get the output (the display monitor) that contains the majority of the client area of the target window. Declaration public DxgiOutput GetContainingOutput() Returns Type Description DxgiOutput The output interface. | Improve this Doc View Source GetFullscreenState() Get the state associated with full-screen mode. Declaration public bool GetFullscreenState() Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetFullscreenState(out DxgiOutput) Get the state associated with full-screen mode. Declaration public bool GetFullscreenState(out DxgiOutput target) Parameters Type Name Description DxgiOutput target The output target when the mode is full screen. Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetSurface(UInt32) Accesses one of the swap-chain's back buffers. Declaration public DxgiSurface GetSurface(uint buffer) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Returns Type Description DxgiSurface A back-buffer surface. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions) Presents a rendered image to the user. Declaration public void Present(uint syncInterval, DxgiPresentOptions options) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options The swap-chain presentation options. | Improve this Doc View Source ResizeBuffers(UInt32, UInt32, UInt32, DxgiFormat, DxgiSwapChainOptions) Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized. Declaration public void ResizeBuffers(uint bufferCount, uint width, uint height, DxgiFormat format, DxgiSwapChainOptions options) Parameters Type Name Description UInt32 bufferCount The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. UInt32 width New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. UInt32 height New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. DxgiFormat format A DXGI_FORMAT -typed value for the new format of the back buffer. Set this value to DXGI_FORMAT_UNKNOWN to preserve the existing format of the back buffer. DxgiSwapChainOptions options The options for swap-chain behavior. | Improve this Doc View Source ResizeTarget(DxgiModeDesc) Resizes the output target. Declaration public void ResizeTarget(DxgiModeDesc targetParameters) Parameters Type Name Description DxgiModeDesc targetParameters A DXGI_MODE_DESC structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is DXGI_FORMAT_UNKNOWN , ResizeTarget uses the existing format. | Improve this Doc View Source SetFullscreenState(Boolean) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source SetFullscreenState(Boolean, DxgiOutput) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen, DxgiOutput target) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. DxgiOutput target A pointer to an DXGIOutput interface for the output target that contains the swap chain. Implements System.IDisposable IDxgiReleasable Extension Methods DxgiSwapChainExtensions.GetTexture2D(DxgiSwapChain, UInt32)"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.html",
    "title": "Struct DxgiSurfaceDesc",
    "keywords": "Struct DxgiSurfaceDesc Describes a surface. Implements IEquatable < DxgiSurfaceDesc > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiSurfaceDesc : IEquatable<DxgiSurfaceDesc> Properties | Improve this Doc View Source Format Gets or sets a member of the DxgiFormat enumeration that describes the surface format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets a value describing the surface height. Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SampleDesc Gets or sets a DxgiSampleDesc structure that describes multi-sampling parameters for the surface. Declaration public DxgiSampleDesc SampleDesc { get; set; } Property Value Type Description DxgiSampleDesc | Improve this Doc View Source Width Gets or sets a value describing the surface width. Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiSurfaceDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiSurfaceDesc other) Parameters Type Name Description DxgiSurfaceDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiSurfaceDesc, DxgiSurfaceDesc) Compares two DxgiSurfaceDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiSurfaceDesc left, DxgiSurfaceDesc right) Parameters Type Name Description DxgiSurfaceDesc left The left DxgiSurfaceDesc to compare. DxgiSurfaceDesc right The right DxgiSurfaceDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiSurfaceDesc, DxgiSurfaceDesc) Compares two DxgiSurfaceDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiSurfaceDesc left, DxgiSurfaceDesc right) Parameters Type Name Description DxgiSurfaceDesc left The left DxgiSurfaceDesc to compare. DxgiSurfaceDesc right The right DxgiSurfaceDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface3.html",
    "title": "Class DxgiSurface3",
    "keywords": "Class DxgiSurface3 The IDXGISurface2 interface extends the IDXGISurface1 interface by adding support for sub-resource surfaces and getting a handle to a shared resource. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSurface3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSurface3 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiSurface3(Object) Initializes a new instance of the DxgiSurface3 class. Declaration public DxgiSurface3(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDXGISurface2 interface. Fields | Improve this Doc View Source InterfaceGuid The interface GUID. Declaration public static readonly Guid InterfaceGuid Field Value Type Description Guid Properties | Improve this Doc View Source Description Gets a description of the surface. Declaration public DxgiSurfaceDesc Description { get; } Property Value Type Description DxgiSurfaceDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source GetDC(Boolean) Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI). Declaration public IntPtr GetDC(bool discard) Parameters Type Name Description Boolean discard A value indicating whether to preserve Direct3D contents in the GDI DC. Returns Type Description IntPtr An HDC handle that represents the current device context for GDI rendering. | Improve this Doc View Source Map(DxgiMapOptions) Get a pointer to the data contained in the surface, and deny GPU access to the surface. Declaration public DxgiMappedRect Map(DxgiMapOptions options) Parameters Type Name Description DxgiMapOptions options CPU read-write flags. These flags can be combined with a logical OR. Returns Type Description DxgiMappedRect The surface data. | Improve this Doc View Source ReleaseDC(DxgiRect) Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render. Declaration public void ReleaseDC(DxgiRect dirtyRect) Parameters Type Name Description DxgiRect dirtyRect A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region. | Improve this Doc View Source Unmap() Invalidate the pointer to the surface retrieved by IDXGISurface::Map and re-enable GPU access to the resource. Declaration public void Unmap() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix4X3F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix4X3F.html",
    "title": "Struct D2D1Matrix4X3F",
    "keywords": "Struct D2D1Matrix4X3F Represents a 4-by-3 matrix. Implements IEquatable < D2D1Matrix4X3F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Matrix4X3F : IEquatable<D2D1Matrix4X3F> Properties | Improve this Doc View Source M11 Gets or sets the value in the first row and first column of the matrix. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column of the matrix. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column of the matrix. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column of the matrix. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column of the matrix. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column of the matrix. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column of the matrix. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column of the matrix. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column of the matrix. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column of the matrix. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column of the matrix. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column of the matrix. Declaration public float M43 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Matrix4X3F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Matrix4X3F other) Parameters Type Name Description D2D1Matrix4X3F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Matrix4X3F, D2D1Matrix4X3F) Compares two D2D1Matrix4X3F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Matrix4X3F left, D2D1Matrix4X3F right) Parameters Type Name Description D2D1Matrix4X3F left The left D2D1Matrix4X3F to compare. D2D1Matrix4X3F right The right D2D1Matrix4X3F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Matrix4X3F, D2D1Matrix4X3F) Compares two D2D1Matrix4X3F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Matrix4X3F left, D2D1Matrix4X3F right) Parameters Type Name Description D2D1Matrix4X3F left The left D2D1Matrix4X3F to compare. D2D1Matrix4X3F right The right D2D1Matrix4X3F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix3X2F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Matrix3X2F.html",
    "title": "Struct D2D1Matrix3X2F",
    "keywords": "Struct D2D1Matrix3X2F Represents a 3-by-2 matrix. Implements IEquatable < D2D1Matrix3X2F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Matrix3X2F : IEquatable<D2D1Matrix3X2F> Constructors | Improve this Doc View Source D2D1Matrix3X2F(Single, Single, Single, Single, Single, Single) Initializes a new instance of the D2D1Matrix3X2F struct. Declaration public D2D1Matrix3X2F(float m11, float m12, float m21, float m22, float m31, float m32) Parameters Type Name Description Single m11 The value in the first row and first column of the matrix. Single m12 The value in the first row and second column of the matrix. Single m21 The value in the second row and first column of the matrix. Single m22 The value in the second row and second column of the matrix. Single m31 The value in the third row and first column of the matrix. Single m32 The value in the third row and second column of the matrix. | Improve this Doc View Source D2D1Matrix3X2F(Single[]) Initializes a new instance of the D2D1Matrix3X2F struct. Declaration public D2D1Matrix3X2F(float[] values) Parameters Type Name Description Single [] values The values of the matrix. Properties | Improve this Doc View Source Determinant Gets the determinant of the matrix. Declaration public float Determinant { get; } Property Value Type Description Single | Improve this Doc View Source Identity Gets an identity matrix. Declaration public static D2D1Matrix3X2F Identity { get; } Property Value Type Description D2D1Matrix3X2F | Improve this Doc View Source IsIdentity Gets a value indicating whether the matrix is the identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInvertible Gets a value indicating whether the matrix is invertible. Declaration public bool IsInvertible { get; } Property Value Type Description Boolean | Improve this Doc View Source M11 Gets or sets the value in the first row and first column of the matrix. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column of the matrix. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column of the matrix. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column of the matrix. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column of the matrix. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column of the matrix. Declaration public float M32 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Matrix3X2F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Matrix3X2F other) Parameters Type Name Description D2D1Matrix3X2F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source Invert() Inverts the matrix, if it is invertible. Declaration public bool Invert() Returns Type Description Boolean true if the matrix was inverted; otherwise, false . | Improve this Doc View Source Multiply(D2D1Matrix3X2F, D2D1Matrix3X2F) Multiplies the two matrices and stores the result in this matrix. Declaration public static D2D1Matrix3X2F Multiply(D2D1Matrix3X2F a, D2D1Matrix3X2F b) Parameters Type Name Description D2D1Matrix3X2F a The first matrix to multiply. D2D1Matrix3X2F b The second matrix to multiply. Returns Type Description D2D1Matrix3X2F The result matrix. | Improve this Doc View Source Rotation(Single) Creates a rotation transformation that has the specified angle. Declaration public static D2D1Matrix3X2F Rotation(float angle) Parameters Type Name Description Single angle The rotation angle in degrees. A positive angle creates a clockwise rotation, and a negative angle creates a counterclockwise rotation. Returns Type Description D2D1Matrix3X2F The new rotation transformation. | Improve this Doc View Source Rotation(Single, D2D1Point2F) Creates a rotation transformation that has the specified angle and center point. Declaration public static D2D1Matrix3X2F Rotation(float angle, D2D1Point2F center) Parameters Type Name Description Single angle The rotation angle in degrees. A positive angle creates a clockwise rotation, and a negative angle creates a counterclockwise rotation. D2D1Point2F center The point about which the rotation is performed. Returns Type Description D2D1Matrix3X2F The new rotation transformation. | Improve this Doc View Source Scale(D2D1SizeF) Creates a scale transformation that has the specified scale factors. Declaration public static D2D1Matrix3X2F Scale(D2D1SizeF size) Parameters Type Name Description D2D1SizeF size The x-axis and y-axis scale factors of the scale transformation. Returns Type Description D2D1Matrix3X2F The new scale transformation. | Improve this Doc View Source Scale(D2D1SizeF, D2D1Point2F) Creates a scale transformation that has the specified scale factors and center point. Declaration public static D2D1Matrix3X2F Scale(D2D1SizeF size, D2D1Point2F center) Parameters Type Name Description D2D1SizeF size The x-axis and y-axis scale factors of the scale transformation. D2D1Point2F center The point about which the scale is performed. Returns Type Description D2D1Matrix3X2F The new scale transformation. | Improve this Doc View Source Scale(Single, Single) Creates a scale transformation that has the specified scale factors. Declaration public static D2D1Matrix3X2F Scale(float x, float y) Parameters Type Name Description Single x The x-axis scale factor of the scale transformation. Single y The y-axis scale factor of the scale transformation. Returns Type Description D2D1Matrix3X2F The new scale transformation. | Improve this Doc View Source Scale(Single, Single, D2D1Point2F) Creates a scale transformation that has the specified scale factors and center point. Declaration public static D2D1Matrix3X2F Scale(float x, float y, D2D1Point2F center) Parameters Type Name Description Single x The x-axis scale factor of the scale transformation. Single y The y-axis scale factor of the scale transformation. D2D1Point2F center The point about which the scale is performed. Returns Type Description D2D1Matrix3X2F The new scale transformation. | Improve this Doc View Source Skew(Single, Single) Creates a skew transformation that has the specified x-axis and y-axis values. Declaration public static D2D1Matrix3X2F Skew(float angleX, float angleY) Parameters Type Name Description Single angleX The x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. Single angleY The y-axis skew angle, which is measured in degrees clockwise from the x-axis. Returns Type Description D2D1Matrix3X2F The new skew transformation. | Improve this Doc View Source Skew(Single, Single, D2D1Point2F) Creates a skew transformation that has the specified x-axis and y-axis values and center point. Declaration public static D2D1Matrix3X2F Skew(float angleX, float angleY, D2D1Point2F center) Parameters Type Name Description Single angleX The x-axis skew angle, which is measured in degrees counterclockwise from the y-axis. Single angleY The y-axis skew angle, which is measured in degrees clockwise from the x-axis. D2D1Point2F center The point about which the skew is performed. Returns Type Description D2D1Matrix3X2F The new skew transformation. | Improve this Doc View Source TranformPoint(D2D1Point2F) Uses this matrix to transform the specified point and returns the result. Declaration public D2D1Point2F TranformPoint(D2D1Point2F point) Parameters Type Name Description D2D1Point2F point The point to transform. Returns Type Description D2D1Point2F The result point. | Improve this Doc View Source Translation(D2D1SizeF) Creates a translation transformation that has the specified x and y displacements. Declaration public static D2D1Matrix3X2F Translation(D2D1SizeF size) Parameters Type Name Description D2D1SizeF size The distance to translate along the x-axis and the y-axis. Returns Type Description D2D1Matrix3X2F A transformation matrix that translates an object the specified horizontal and vertical distance. | Improve this Doc View Source Translation(Single, Single) Creates a translation transformation that has the specified x and y displacements. Declaration public static D2D1Matrix3X2F Translation(float x, float y) Parameters Type Name Description Single x The distance to translate along the x-axis. Single y The distance to translate along the y-axis. Returns Type Description D2D1Matrix3X2F A transformation matrix that translates an object the specified horizontal and vertical distance. Operators | Improve this Doc View Source Equality(D2D1Matrix3X2F, D2D1Matrix3X2F) Compares two D2D1Matrix3X2F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Matrix3X2F left, D2D1Matrix3X2F right) Parameters Type Name Description D2D1Matrix3X2F left The left D2D1Matrix3X2F to compare. D2D1Matrix3X2F right The right D2D1Matrix3X2F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Matrix3X2F, D2D1Matrix3X2F) Compares two D2D1Matrix3X2F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Matrix3X2F left, D2D1Matrix3X2F right) Parameters Type Name Description D2D1Matrix3X2F left The left D2D1Matrix3X2F to compare. D2D1Matrix3X2F right The right D2D1Matrix3X2F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . | Improve this Doc View Source Multiply(D2D1Matrix3X2F, D2D1Matrix3X2F) Multiplies this matrix with the specified matrix and returns the result. Declaration public static D2D1Matrix3X2F operator *(D2D1Matrix3X2F left, D2D1Matrix3X2F right) Parameters Type Name Description D2D1Matrix3X2F left The left matrix. D2D1Matrix3X2F right The right matrix. Returns Type Description D2D1Matrix3X2F The result matrix | Improve this Doc View Source Multiply(D2D1Point2F, D2D1Matrix3X2F) Uses this matrix to transform the specified point and returns the result. Declaration public static D2D1Point2F operator *(D2D1Point2F point, D2D1Matrix3X2F matrix) Parameters Type Name Description D2D1Point2F point The point to transform. D2D1Matrix3X2F matrix The transform matrix. Returns Type Description D2D1Point2F The result point. Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1LayerOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1LayerOptions.html",
    "title": "Enum D2D1LayerOptions",
    "keywords": "Enum D2D1LayerOptions Specifies options that can be applied when a layer resource is applied to create a layer. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1LayerOptions Fields Name Description InitializeForClearType The layer renders correctly for ClearType text. If the render target is set to ClearType, the layer continues to render ClearType. If the render target is set to ClearType and this option is not specified, the render target will be set to render gray-scale until the layer is popped. None The text in this layer does not use ClearType antialiasing."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Layer.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Layer.html",
    "title": "Class D2D1Layer",
    "keywords": "Class D2D1Layer Represents the backing store required to render a layer. Inheritance Object D2D1Resource D2D1Layer Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1Layer : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source Size Gets the size of the layer in device-independent pixels. Declaration public D2D1SizeF Size { get; } Property Value Type Description D2D1SizeF Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GeometrySimplificationOption.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GeometrySimplificationOption.html",
    "title": "Enum D2D1GeometrySimplificationOption",
    "keywords": "Enum D2D1GeometrySimplificationOption Specifies how simple the output of a simplified geometry sink should be. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1GeometrySimplificationOption Fields Name Description CubicsAndLines The output can contain cubic Bezier curves and line segments. Lines The output is flattened so that it contains only line segments."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GeometryRelation.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GeometryRelation.html",
    "title": "Enum D2D1GeometryRelation",
    "keywords": "Enum D2D1GeometryRelation Describes how one geometry object is spatially related to another geometry object. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1GeometryRelation Fields Name Description Contains The object entirely contains the passed in geometry. Disjoint The two geometries do not intersect at all. IsContained The passed in geometry is entirely contained by the object. Overlap The two geometries overlap but neither completely contains the other. Unknown The relation between the geometries couldn't be determined. This value is never returned by any D2D method."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GeometryGroup.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GeometryGroup.html",
    "title": "Class D2D1GeometryGroup",
    "keywords": "Class D2D1GeometryGroup Represents a composite geometry, composed of other D2D1Geometry objects. Inheritance Object D2D1Resource D2D1Geometry D2D1GeometryGroup Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1GeometryGroup : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source FillMode Gets a value indicating how the intersecting areas of the geometries contained in this geometry group are combined. Declaration public D2D1FillMode FillMode { get; } Property Value Type Description D2D1FillMode | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Methods | Improve this Doc View Source GetSourceGeometries() Retrieves the geometries in the geometry group. Declaration public D2D1Geometry[] GetSourceGeometries() Returns Type Description D2D1Geometry [] An array of geometries to be filled by this method. | Improve this Doc View Source GetSourceGeometryCount() Gets the number of geometry objects in the geometry group. Declaration public uint GetSourceGeometryCount() Returns Type Description UInt32 The number of geometries in the geometry group. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Geometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Geometry.html",
    "title": "Class D2D1Geometry",
    "keywords": "Class D2D1Geometry Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes. Inheritance Object D2D1Resource D2D1Geometry D2D1EllipseGeometry D2D1GeometryGroup D2D1PathGeometry D2D1RectangleGeometry D2D1RoundedRectangleGeometry D2D1TransformedGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.Handle D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1Geometry : D2D1Resource, IDisposable, ID2D1Releasable Methods | Improve this Doc View Source CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) Performs a combine operation between the two geometries to produce a resulting geometry. Declaration public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1CombineMode combineMode, D2D1Matrix3X2F inputGeometryTransform, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to combine with this instance. D2D1CombineMode combineMode The type of combine operation to perform. D2D1Matrix3X2F inputGeometryTransform The transform to apply to inputGeometry before combining. D2D1SimplifiedGeometrySink geometrySink The result of the combine operation. | Improve this Doc View Source CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) Performs a combine operation between the two geometries to produce a resulting geometry. Declaration public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1CombineMode combineMode, D2D1Matrix3X2F inputGeometryTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to combine with this instance. D2D1CombineMode combineMode The type of combine operation to perform. D2D1Matrix3X2F inputGeometryTransform The transform to apply to inputGeometry before combining. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The result of the combine operation. | Improve this Doc View Source CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) Performs a combine operation between the two geometries to produce a resulting geometry. Declaration public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1CombineMode combineMode, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to combine with this instance. D2D1CombineMode combineMode The type of combine operation to perform. D2D1SimplifiedGeometrySink geometrySink The result of the combine operation. | Improve this Doc View Source CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) Performs a combine operation between the two geometries to produce a resulting geometry. Declaration public void CombineWithGeometry(D2D1Geometry inputGeometry, D2D1CombineMode combineMode, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to combine with this instance. D2D1CombineMode combineMode The type of combine operation to perform. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The result of the combine operation. | Improve this Doc View Source CompareWithGeometry(D2D1Geometry) Describes the intersection between this geometry and the specified geometry. Declaration public D2D1GeometryRelation CompareWithGeometry(D2D1Geometry inputGeometry) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to test. Returns Type Description D2D1GeometryRelation A value that describes how this geometry is related to inputGeometry. | Improve this Doc View Source CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) Describes the intersection between this geometry and the specified geometry. Declaration public D2D1GeometryRelation CompareWithGeometry(D2D1Geometry inputGeometry, D2D1Matrix3X2F inputGeometryTransform) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to test. D2D1Matrix3X2F inputGeometryTransform The transform to apply to inputGeometry. Returns Type Description D2D1GeometryRelation A value that describes how this geometry is related to inputGeometry. | Improve this Doc View Source CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) Describes the intersection between this geometry and the specified geometry. Declaration public D2D1GeometryRelation CompareWithGeometry(D2D1Geometry inputGeometry, D2D1Matrix3X2F inputGeometryTransform, float flatteningTolerance) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to test. D2D1Matrix3X2F inputGeometryTransform The transform to apply to inputGeometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description D2D1GeometryRelation A value that describes how this geometry is related to inputGeometry. | Improve this Doc View Source CompareWithGeometry(D2D1Geometry, Single) Describes the intersection between this geometry and the specified geometry. Declaration public D2D1GeometryRelation CompareWithGeometry(D2D1Geometry inputGeometry, float flatteningTolerance) Parameters Type Name Description D2D1Geometry inputGeometry The geometry to test. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description D2D1GeometryRelation A value that describes how this geometry is related to inputGeometry. | Improve this Doc View Source ComputeArea() Computes the area of the geometry. Declaration public float ComputeArea() Returns Type Description Single The area of the transformed, flattened version of this geometry. | Improve this Doc View Source ComputeArea(D2D1Matrix3X2F) Computes the area of the geometry. Declaration public float ComputeArea(D2D1Matrix3X2F worldTransform) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to this geometry before computing its area. Returns Type Description Single The area of the transformed, flattened version of this geometry. | Improve this Doc View Source ComputeArea(D2D1Matrix3X2F, Single) Computes the area of the geometry. Declaration public float ComputeArea(D2D1Matrix3X2F worldTransform, float flatteningTolerance) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to this geometry before computing its area. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description Single The area of the transformed, flattened version of this geometry. | Improve this Doc View Source ComputeArea(Single) Computes the area of the geometry. Declaration public float ComputeArea(float flatteningTolerance) Parameters Type Name Description Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description Single The area of the transformed, flattened version of this geometry. | Improve this Doc View Source ComputeLength() Computes the length of the geometry. Declaration public float ComputeLength() Returns Type Description Single The length of the geometry. For closed geometries, the length includes an implicit closing segment. | Improve this Doc View Source ComputeLength(D2D1Matrix3X2F) Computes the length of the geometry. Declaration public float ComputeLength(D2D1Matrix3X2F worldTransform) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to the geometry before calculating its length. Returns Type Description Single The length of the geometry. For closed geometries, the length includes an implicit closing segment. | Improve this Doc View Source ComputeLength(D2D1Matrix3X2F, Single) Computes the length of the geometry. Declaration public float ComputeLength(D2D1Matrix3X2F worldTransform, float flatteningTolerance) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to the geometry before calculating its length. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description Single The length of the geometry. For closed geometries, the length includes an implicit closing segment. | Improve this Doc View Source ComputeLength(Single) Computes the length of the geometry. Declaration public float ComputeLength(float flatteningTolerance) Parameters Type Name Description Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Returns Type Description Single The length of the geometry. For closed geometries, the length includes an implicit closing segment. | Improve this Doc View Source ComputePointAtLength(Single, D2D1Matrix3X2F, out D2D1Point2F, out D2D1Point2F) Computes the point and tangent a given distance along the path. Declaration public void ComputePointAtLength(float length, D2D1Matrix3X2F worldTransform, out D2D1Point2F point, out D2D1Point2F unitTangentVector) Parameters Type Name Description Single length The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. D2D1Matrix3X2F worldTransform The transform to apply to the geometry before calculating the specified point and tangent. D2D1Point2F point The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values. D2D1Point2F unitTangentVector The tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter. | Improve this Doc View Source ComputePointAtLength(Single, D2D1Matrix3X2F, Single, out D2D1Point2F, out D2D1Point2F) Computes the point and tangent a given distance along the path. Declaration public void ComputePointAtLength(float length, D2D1Matrix3X2F worldTransform, float flatteningTolerance, out D2D1Point2F point, out D2D1Point2F unitTangentVector) Parameters Type Name Description Single length The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. D2D1Matrix3X2F worldTransform The transform to apply to the geometry before calculating the specified point and tangent. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1Point2F point The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values. D2D1Point2F unitTangentVector The tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter. | Improve this Doc View Source ComputePointAtLength(Single, out D2D1Point2F, out D2D1Point2F) Computes the point and tangent a given distance along the path. Declaration public void ComputePointAtLength(float length, out D2D1Point2F point, out D2D1Point2F unitTangentVector) Parameters Type Name Description Single length The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. D2D1Point2F point The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values. D2D1Point2F unitTangentVector The tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter. | Improve this Doc View Source ComputePointAtLength(Single, Single, out D2D1Point2F, out D2D1Point2F) Computes the point and tangent a given distance along the path. Declaration public void ComputePointAtLength(float length, float flatteningTolerance, out D2D1Point2F point, out D2D1Point2F unitTangentVector) Parameters Type Name Description Single length The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1Point2F point The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values. D2D1Point2F unitTangentVector The tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter. | Improve this Doc View Source FillContainPoint(D2D1Point2F) Indicates whether the area filled by the geometry would contain the specified point. Declaration public bool FillContainPoint(D2D1Point2F point) Parameters Type Name Description D2D1Point2F point The point to test. Returns Type Description Boolean When this method returns, contains a boolean value that is true if the area filled by the geometry contains point; otherwise, false . | Improve this Doc View Source FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) Indicates whether the area filled by the geometry would contain the specified point. Declaration public bool FillContainPoint(D2D1Point2F point, D2D1Matrix3X2F worldTransform) Parameters Type Name Description D2D1Point2F point The point to test. D2D1Matrix3X2F worldTransform The transform to apply to the geometry prior to testing for containment. Returns Type Description Boolean When this method returns, contains a boolean value that is true if the area filled by the geometry contains point; otherwise, false . | Improve this Doc View Source FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) Indicates whether the area filled by the geometry would contain the specified point. Declaration public bool FillContainPoint(D2D1Point2F point, D2D1Matrix3X2F worldTransform, float flatteningTolerance) Parameters Type Name Description D2D1Point2F point The point to test. D2D1Matrix3X2F worldTransform The transform to apply to the geometry prior to testing for containment. Single flatteningTolerance The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Returns Type Description Boolean When this method returns, contains a boolean value that is true if the area filled by the geometry contains point; otherwise, false . | Improve this Doc View Source FillContainPoint(D2D1Point2F, Single) Indicates whether the area filled by the geometry would contain the specified point. Declaration public bool FillContainPoint(D2D1Point2F point, float flatteningTolerance) Parameters Type Name Description D2D1Point2F point The point to test. Single flatteningTolerance The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Returns Type Description Boolean When this method returns, contains a boolean value that is true if the area filled by the geometry contains point; otherwise, false . | Improve this Doc View Source GetBounds() Retrieves the bounds of the geometry. Declaration public D2D1RectF GetBounds() Returns Type Description D2D1RectF The bounds of this geometry. | Improve this Doc View Source GetBounds(D2D1Matrix3X2F) Retrieves the bounds of the geometry. Declaration public D2D1RectF GetBounds(D2D1Matrix3X2F worldTransform) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to this geometry before calculating its bounds, or NULL. Returns Type Description D2D1RectF The bounds of this geometry. | Improve this Doc View Source GetWidenedBounds(Single, D2D1StrokeStyle) Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix. Declaration public D2D1RectF GetWidenedBounds(float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry by stroking its outline. D2D1StrokeStyle strokeStyle The style of the stroke that widens the geometry. Returns Type Description D2D1RectF The bounds of the widened geometry. | Improve this Doc View Source GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix. Declaration public D2D1RectF GetWidenedBounds(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry by stroking its outline. D2D1StrokeStyle strokeStyle The style of the stroke that widens the geometry. D2D1Matrix3X2F worldTransform A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked. Returns Type Description D2D1RectF The bounds of the widened geometry. | Improve this Doc View Source GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix. Declaration public D2D1RectF GetWidenedBounds(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform, float flatteningTolerance) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry by stroking its outline. D2D1StrokeStyle strokeStyle The style of the stroke that widens the geometry. D2D1Matrix3X2F worldTransform A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Smaller values produce more accurate results but cause slower execution. Returns Type Description D2D1RectF The bounds of the widened geometry. | Improve this Doc View Source GetWidenedBounds(Single, D2D1StrokeStyle, Single) Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix. Declaration public D2D1RectF GetWidenedBounds(float strokeWidth, D2D1StrokeStyle strokeStyle, float flatteningTolerance) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry by stroking its outline. D2D1StrokeStyle strokeStyle The style of the stroke that widens the geometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Smaller values produce more accurate results but cause slower execution. Returns Type Description D2D1RectF The bounds of the widened geometry. | Improve this Doc View Source Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) Computes the outline of the geometry. The result is written back into a simplified geometry sink. Declaration public void Outline(D2D1Matrix3X2F worldTransform, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to the geometry outline. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the geometry's transformed outline is appended. | Improve this Doc View Source Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) Computes the outline of the geometry. The result is written back into a simplified geometry sink. Declaration public void Outline(D2D1Matrix3X2F worldTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to the geometry outline. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the geometry's transformed outline is appended. | Improve this Doc View Source Outline(D2D1SimplifiedGeometrySink) Computes the outline of the geometry. The result is written back into a simplified geometry sink. Declaration public void Outline(D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the geometry's transformed outline is appended. | Improve this Doc View Source Outline(Single, D2D1SimplifiedGeometrySink) Computes the outline of the geometry. The result is written back into a simplified geometry sink. Declaration public void Outline(float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the geometry's transformed outline is appended. | Improve this Doc View Source Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an D2D1SimplifiedGeometrySink . Declaration public void Simplify(D2D1GeometrySimplificationOption simplificationOption, D2D1Matrix3X2F worldTransform, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1GeometrySimplificationOption simplificationOption A value that specifies whether the simplified geometry should contain curves. D2D1Matrix3X2F worldTransform The transform to apply to the simplified geometry. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the simplified geometry is appended. | Improve this Doc View Source Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an D2D1SimplifiedGeometrySink . Declaration public void Simplify(D2D1GeometrySimplificationOption simplificationOption, D2D1Matrix3X2F worldTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1GeometrySimplificationOption simplificationOption A value that specifies whether the simplified geometry should contain curves. D2D1Matrix3X2F worldTransform The transform to apply to the simplified geometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the simplified geometry is appended. | Improve this Doc View Source Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an D2D1SimplifiedGeometrySink . Declaration public void Simplify(D2D1GeometrySimplificationOption simplificationOption, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1GeometrySimplificationOption simplificationOption A value that specifies whether the simplified geometry should contain curves. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the simplified geometry is appended. | Improve this Doc View Source Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an D2D1SimplifiedGeometrySink . Declaration public void Simplify(D2D1GeometrySimplificationOption simplificationOption, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description D2D1GeometrySimplificationOption simplificationOption A value that specifies whether the simplified geometry should contain curves. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the simplified geometry is appended. | Improve this Doc View Source StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. Declaration public bool StrokeContainsPoint(D2D1Point2F point, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1Point2F point The point to test for containment. Single strokeWidth The thickness of the stroke to apply. D2D1StrokeStyle strokeStyle The style of stroke to apply. Returns Type Description Boolean A value set to true if the geometry's stroke contains the specified point; otherwise, false . | Improve this Doc View Source StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. Declaration public bool StrokeContainsPoint(D2D1Point2F point, float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform) Parameters Type Name Description D2D1Point2F point The point to test for containment. Single strokeWidth The thickness of the stroke to apply. D2D1StrokeStyle strokeStyle The style of stroke to apply. D2D1Matrix3X2F worldTransform The transform to apply to the stroked geometry. Returns Type Description Boolean A value set to true if the geometry's stroke contains the specified point; otherwise, false . | Improve this Doc View Source StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. Declaration public bool StrokeContainsPoint(D2D1Point2F point, float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform, float flatteningTolerance) Parameters Type Name Description D2D1Point2F point The point to test for containment. Single strokeWidth The thickness of the stroke to apply. D2D1StrokeStyle strokeStyle The style of stroke to apply. D2D1Matrix3X2F worldTransform The transform to apply to the stroked geometry. Single flatteningTolerance The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution. Returns Type Description Boolean A value set to true if the geometry's stroke contains the specified point; otherwise, false . | Improve this Doc View Source StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform. Declaration public bool StrokeContainsPoint(D2D1Point2F point, float strokeWidth, D2D1StrokeStyle strokeStyle, float flatteningTolerance) Parameters Type Name Description D2D1Point2F point The point to test for containment. Single strokeWidth The thickness of the stroke to apply. D2D1StrokeStyle strokeStyle The style of stroke to apply. Single flatteningTolerance The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution. Returns Type Description Boolean A value set to true if the geometry's stroke contains the specified point; otherwise, false . | Improve this Doc View Source Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) Tessellates a geometry into triangles. Declaration public void Tessellate(D2D1Matrix3X2F worldTransform, D2D1TessellationSink tessellationSink) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to this geometry. D2D1TessellationSink tessellationSink The D2D1TessellationSink to which the tessellated is appended. | Improve this Doc View Source Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) Tessellates a geometry into triangles. Declaration public void Tessellate(D2D1Matrix3X2F worldTransform, float flatteningTolerance, D2D1TessellationSink tessellationSink) Parameters Type Name Description D2D1Matrix3X2F worldTransform The transform to apply to this geometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1TessellationSink tessellationSink The D2D1TessellationSink to which the tessellated is appended. | Improve this Doc View Source Tessellate(D2D1TessellationSink) Tessellates a geometry into triangles. Declaration public void Tessellate(D2D1TessellationSink tessellationSink) Parameters Type Name Description D2D1TessellationSink tessellationSink The D2D1TessellationSink to which the tessellated is appended. | Improve this Doc View Source Tessellate(Single, D2D1TessellationSink) Tessellates a geometry into triangles. Declaration public void Tessellate(float flatteningTolerance, D2D1TessellationSink tessellationSink) Parameters Type Name Description Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1TessellationSink tessellationSink The D2D1TessellationSink to which the tessellated is appended. | Improve this Doc View Source Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) Get the geometry and widen it as well as apply an optional pen style. Declaration public void Widen(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry. D2D1StrokeStyle strokeStyle The style of stroke to apply to the geometry. D2D1Matrix3X2F worldTransform The transform to apply to the geometry after widening it. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the widened geometry is appended. | Improve this Doc View Source Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) Get the geometry and widen it as well as apply an optional pen style. Declaration public void Widen(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1Matrix3X2F worldTransform, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry. D2D1StrokeStyle strokeStyle The style of stroke to apply to the geometry. D2D1Matrix3X2F worldTransform The transform to apply to the geometry after widening it. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the widened geometry is appended. | Improve this Doc View Source Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) Get the geometry and widen it as well as apply an optional pen style. Declaration public void Widen(float strokeWidth, D2D1StrokeStyle strokeStyle, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry. D2D1StrokeStyle strokeStyle The style of stroke to apply to the geometry. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the widened geometry is appended. | Improve this Doc View Source Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) Get the geometry and widen it as well as apply an optional pen style. Declaration public void Widen(float strokeWidth, D2D1StrokeStyle strokeStyle, float flatteningTolerance, D2D1SimplifiedGeometrySink geometrySink) Parameters Type Name Description Single strokeWidth The amount by which to widen the geometry. D2D1StrokeStyle strokeStyle The style of stroke to apply to the geometry. Single flatteningTolerance The maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. D2D1SimplifiedGeometrySink geometrySink The D2D1SimplifiedGeometrySink to which the widened geometry is appended. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Gamma.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Gamma.html",
    "title": "Enum D2D1Gamma",
    "keywords": "Enum D2D1Gamma Specifies which gamma is used for interpolation. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1Gamma Fields Name Description Gamma10 Interpolation is performed in the linear-gamma color space. Gamma22 Interpolation is performed in the standard RGB (sRGB) gamma."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FillMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FillMode.html",
    "title": "Enum D2D1FillMode",
    "keywords": "Enum D2D1FillMode Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1FillMode Fields Name Description Alternate Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction, and then counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is in the fill region; if even, the point is outside the fill region. Winding Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction, and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left, as long as left and right are seen from the perspective of the ray. After counting the crossings, if the result is zero, then the point is outside the path. Otherwise, it is inside the path."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FigureEnd.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FigureEnd.html",
    "title": "Enum D2D1FigureEnd",
    "keywords": "Enum D2D1FigureEnd Indicates whether the figure is open or closed on its end point. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1FigureEnd Fields Name Description Closed The figure is closed. Open The figure is open."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FigureBegin.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FigureBegin.html",
    "title": "Enum D2D1FigureBegin",
    "keywords": "Enum D2D1FigureBegin Indicates whether the given figure is filled or hollow. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1FigureBegin Fields Name Description Filled The figure is filled. Hollow The figure is hollow."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FeatureLevel.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FeatureLevel.html",
    "title": "Enum D2D1FeatureLevel",
    "keywords": "Enum D2D1FeatureLevel Describes the minimum DirectX support required for hardware rendering by a render target. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1FeatureLevel Fields Name Description Default The caller does not require a particular underlying D3D device level. FeatureLevel100 The D3D device level is DX10 compatible. FeatureLevel91 The D3D device level is DX9 compatible."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FactoryType.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FactoryType.html",
    "title": "Enum D2D1FactoryType",
    "keywords": "Enum D2D1FactoryType Specifies the threading model of the created factory and all of its derived resources. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1FactoryType Fields Name Description MultiThreaded The resulting factory may be invoked from multiple threads. Returned resources use interlocked reference counting and their state is protected. SingleThreaded The resulting factory and derived resources may only be invoked serially. Reference counts on resources are interlocked, however, resource and render target state is not protected from multi-threaded access."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapRenderTarget.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapRenderTarget.html",
    "title": "Class D2D1BitmapRenderTarget",
    "keywords": "Class D2D1BitmapRenderTarget Renders to an intermediate texture created by the CreateCompatibleRenderTarget() method. Inheritance Object D2D1Resource D2D1RenderTarget D2D1BitmapRenderTarget Implements IDisposable ID2D1Releasable Inherited Members D2D1RenderTarget.Transform D2D1RenderTarget.AntialiasMode D2D1RenderTarget.TextAntialiasMode D2D1RenderTarget.PixelFormat D2D1RenderTarget.Size D2D1RenderTarget.PixelSize D2D1RenderTarget.MaximumBitmapSize D2D1RenderTarget.CreateBitmap(D2D1SizeU, IntPtr, UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, Byte[], UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object, D2D1BitmapProperties) D2D1RenderTarget.CreateSharedBitmap(Guid, Object) D2D1RenderTarget.CreateSharedBitmap(Guid, Object, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties, D2D1BrushProperties) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF, D2D1BrushProperties) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[], D2D1Gamma, D2D1ExtendMode) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[]) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget() D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat) D2D1RenderTarget.CreateLayer() D2D1RenderTarget.CreateLayer(D2D1SizeF) D2D1RenderTarget.CreateMesh() D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush, D2D1Brush) D2D1RenderTarget.FillMesh(D2D1Mesh, D2D1Brush) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode, D2D1RectF) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions, DWriteMeasuringMode) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush, DWriteMeasuringMode) D2D1RenderTarget.SetTextRenderingParams() D2D1RenderTarget.SetTextRenderingParams(DWriteRenderingParams) D2D1RenderTarget.GetTextRenderingParams() D2D1RenderTarget.SetTags(UInt64, UInt64) D2D1RenderTarget.GetTags(UInt64, UInt64) D2D1RenderTarget.PushLayer(D2D1LayerParameters, D2D1Layer) D2D1RenderTarget.PopLayer() D2D1RenderTarget.Flush() D2D1RenderTarget.Flush(UInt64, UInt64) D2D1RenderTarget.SaveDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.RestoreDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.PushAxisAlignedClip(D2D1RectF, D2D1AntialiasMode) D2D1RenderTarget.PopAxisAlignedClip() D2D1RenderTarget.Clear() D2D1RenderTarget.Clear(D2D1ColorF) D2D1RenderTarget.BeginDraw() D2D1RenderTarget.EndDraw() D2D1RenderTarget.EndDraw(UInt64, UInt64) D2D1RenderTarget.EndDrawIgnoringRecreateTargetError() D2D1RenderTarget.SetDpi(Single, Single) D2D1RenderTarget.GetDpi(Single, Single) D2D1RenderTarget.IsSupported(D2D1RenderTargetProperties) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1BitmapRenderTarget : D2D1RenderTarget, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Bitmap Gets the bitmap for this render target. The returned bitmap can be used for drawing operations. Declaration public D2D1Bitmap Bitmap { get; } Property Value Type Description D2D1Bitmap | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapInterpolationMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapInterpolationMode.html",
    "title": "Enum D2D1BitmapInterpolationMode",
    "keywords": "Enum D2D1BitmapInterpolationMode Specifies the algorithm that is used when images are scaled or rotated. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1BitmapInterpolationMode Fields Name Description Linear Linear filtering. NearestNeighbor Nearest Neighbor filtering. Also known as nearest pixel or nearest point sampling."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMMatrix.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMMatrix.html",
    "title": "Struct XMMatrix",
    "keywords": "Struct XMMatrix Describes a 4*4 matrix. Implements IEquatable < XMMatrix > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMMatrix : IEquatable<XMMatrix> Constructors | Improve this Doc View Source XMMatrix(XMVector, XMVector, XMVector, XMVector) Initializes a new instance of the XMMatrix struct. Declaration public XMMatrix(XMVector r1, XMVector r2, XMVector r3, XMVector r4) Parameters Type Name Description XMVector r1 The first row. XMVector r2 The second row. XMVector r3 The third row. XMVector r4 The fourth row. | Improve this Doc View Source XMMatrix(XMVector[]) Initializes a new instance of the XMMatrix struct. Declaration public XMMatrix(XMVector[] rows) Parameters Type Name Description XMVector [] rows The rows. | Improve this Doc View Source XMMatrix(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Initializes a new instance of the XMMatrix struct. Declaration public XMMatrix(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) Parameters Type Name Description Single m11 The value in the first row and first column. Single m12 The value in the first row and second column. Single m13 The value in the first row and third column. Single m14 The value in the first row and fourth column. Single m21 The value in the second row and first column. Single m22 The value in the second row and second column. Single m23 The value in the second row and third column. Single m24 The value in the second row and fourth column. Single m31 The value in the third row and first column. Single m32 The value in the third row and second column. Single m33 The value in the third row and third column. Single m34 The value in the third row and fourth column. Single m41 The value in the fourth row and first column. Single m42 The value in the fourth row and second column. Single m43 The value in the fourth row and third column. Single m44 The value in the fourth row and fourth column. | Improve this Doc View Source XMMatrix(Single[]) Initializes a new instance of the XMMatrix struct. Declaration public XMMatrix(float[] array) Parameters Type Name Description Single [] array The values. Properties | Improve this Doc View Source Identity Gets the identity matrix. Declaration public static XMMatrix Identity { get; } Property Value Type Description XMMatrix | Improve this Doc View Source Item[Int32, Int32] Gets or sets a value specified by row and column. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description Int32 row The row of the value. Int32 column The column of the value. Property Value Type Description Single A float value. | Improve this Doc View Source M11 Gets or sets the value in the first row and first column. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M13 Gets or sets the value in the first row and third column. Declaration public float M13 { get; set; } Property Value Type Description Single | Improve this Doc View Source M14 Gets or sets the value in the first row and fourth column. Declaration public float M14 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M23 Gets or sets the value in the second row and third column. Declaration public float M23 { get; set; } Property Value Type Description Single | Improve this Doc View Source M24 Gets or sets the value in the second row and fourth column. Declaration public float M24 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column. Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source M33 Gets or sets the value in the third row and third column. Declaration public float M33 { get; set; } Property Value Type Description Single | Improve this Doc View Source M34 Gets or sets the value in the third row and fourth column. Declaration public float M34 { get; set; } Property Value Type Description Single | Improve this Doc View Source M41 Gets or sets the value in the fourth row and first column. Declaration public float M41 { get; set; } Property Value Type Description Single | Improve this Doc View Source M42 Gets or sets the value in the fourth row and second column. Declaration public float M42 { get; set; } Property Value Type Description Single | Improve this Doc View Source M43 Gets or sets the value in the fourth row and third column. Declaration public float M43 { get; set; } Property Value Type Description Single | Improve this Doc View Source M44 Gets or sets the value in the fourth row and fourth column. Declaration public float M44 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Add(XMMatrix, XMMatrix) Computes the sum of two matrices. Declaration public static XMMatrix Add(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns a matrix that is the sum of the two matrices. | Improve this Doc View Source AffineTransformation(XMVector, XMVector, XMVector, XMVector) Builds an affine transformation matrix. Declaration public static XMMatrix AffineTransformation(XMVector scaling, XMVector rotationOrigin, XMVector rotationQuaternion, XMVector translation) Parameters Type Name Description XMVector scaling Vector of scaling factors for each dimension. XMVector rotationOrigin Point identifying the center of rotation. XMVector rotationQuaternion Rotation factors. XMVector translation Translation offsets. Returns Type Description XMMatrix Returns the affine transformation matrix, built from the scaling, rotation, and translation information. | Improve this Doc View Source AffineTransformation2D(XMVector, XMVector, Single, XMVector) Builds a 2D affine transformation matrix in the xy plane. Declaration public static XMMatrix AffineTransformation2D(XMVector scaling, XMVector rotationOrigin, float rotation, XMVector translation) Parameters Type Name Description XMVector scaling 2D vector of scaling factors for the x-coordinate and y-coordinate. XMVector rotationOrigin 2D vector describing the center of rotation. Single rotation Radian angle of rotation. XMVector translation 2D vector translation offsets. Returns Type Description XMMatrix Returns the 2D affine transformation matrix. | Improve this Doc View Source Decompose(out XMVector, out XMVector, out XMVector) Breaks down a general 3D transformation matrix into its scalar, rotational, and translational components. Declaration public bool Decompose(out XMVector scale, out XMVector rotationQuaternion, out XMVector translation) Parameters Type Name Description XMVector scale The scaling factors applied along the x, y, and z-axes. XMVector rotationQuaternion A quaternion that describes the rotation. XMVector translation A translation along the x, y, and z-axes. Returns Type Description Boolean If the function succeeds, the return value is true. If the function fails, the return value is false. | Improve this Doc View Source Determinant() Computes the determinant of a matrix. Declaration public XMVector Determinant() Returns Type Description XMVector Returns a vector. The determinant of M is replicated into each component. | Improve this Doc View Source Divide(XMMatrix, Single) Divide each element of a matrix by a scalar. Declaration public static XMMatrix Divide(XMMatrix m, float s) Parameters Type Name Description XMMatrix m The matrix. Single s The scalar. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source Equals(XMMatrix) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMMatrix other) Parameters Type Name Description XMMatrix other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source Inverse() Computes the inverse of a matrix. Declaration public XMMatrix Inverse() Returns Type Description XMMatrix Returns the matrix inverse of M. If there is no inverse (that is, if the determinant is 0), returns an infinite matrix. | Improve this Doc View Source Inverse(out XMVector) Computes the inverse of a matrix. Declaration public XMMatrix Inverse(out XMVector determinant) Parameters Type Name Description XMVector determinant A vector, each of whose components is the determinant of M. Returns Type Description XMMatrix Returns the matrix inverse of M. If there is no inverse (that is, if the determinant is 0), returns an infinite matrix. | Improve this Doc View Source IsIdentity() Tests whether a matrix is the identity matrix. Declaration public bool IsIdentity() Returns Type Description Boolean Returns true if M is the identity matrix, and false otherwise. | Improve this Doc View Source IsInfinite() Tests whether any of the elements of a matrix are positive or negative infinity. Declaration public bool IsInfinite() Returns Type Description Boolean Returns true if any element of M is either positive or negative infinity, and false otherwise. | Improve this Doc View Source IsNaN() Tests whether any of the elements of a matrix are NaN. Declaration public bool IsNaN() Returns Type Description Boolean Returns true if any element of M is NaN, and false otherwise. | Improve this Doc View Source LoadFloat3X3(XMFloat3X3) Loads an XMFloat3X3 into an XMMatrix . Declaration public static XMMatrix LoadFloat3X3(XMFloat3X3 source) Parameters Type Name Description XMFloat3X3 source The structure to load. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source LoadFloat4X3(XMFloat4X3) Loads an XMFloat4X3 into an XMMatrix . Declaration public static XMMatrix LoadFloat4X3(XMFloat4X3 source) Parameters Type Name Description XMFloat4X3 source The structure to load. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source LoadFloat4X4(XMFloat4X4) Loads an XMFloat4X4 into an XMMatrix . Declaration public static XMMatrix LoadFloat4X4(XMFloat4X4 source) Parameters Type Name Description XMFloat4X4 source The structure to load. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source LookAtLH(XMVector, XMVector, XMVector) Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point. Declaration public static XMMatrix LookAtLH(XMVector eyePosition, XMVector focusPosition, XMVector directionUp) Parameters Type Name Description XMVector eyePosition Position of the camera. XMVector focusPosition Position of the focal point. XMVector directionUp Up direction of the camera. Returns Type Description XMMatrix Returns a view matrix that transforms a point from world space into view space. | Improve this Doc View Source LookAtRH(XMVector, XMVector, XMVector) Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point. Declaration public static XMMatrix LookAtRH(XMVector eyePosition, XMVector focusPosition, XMVector directionUp) Parameters Type Name Description XMVector eyePosition Position of the camera. XMVector focusPosition Position of the focal point. XMVector directionUp Up direction of the camera. Returns Type Description XMMatrix Returns a view matrix that transforms a point from world space into view space. | Improve this Doc View Source LookToLH(XMVector, XMVector, XMVector) Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction. Declaration public static XMMatrix LookToLH(XMVector eyePosition, XMVector eyeDirection, XMVector directionUp) Parameters Type Name Description XMVector eyePosition Position of the camera. XMVector eyeDirection Direction of the camera. XMVector directionUp Up direction of the camera. Returns Type Description XMMatrix Returns a view matrix that transforms a point from world space into view space. | Improve this Doc View Source LookToRH(XMVector, XMVector, XMVector) Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction. Declaration public static XMMatrix LookToRH(XMVector eyePosition, XMVector eyeDirection, XMVector directionUp) Parameters Type Name Description XMVector eyePosition Position of the camera. XMVector eyeDirection Direction of the camera. XMVector directionUp Up direction of the camera. Returns Type Description XMMatrix Returns a view matrix that transforms a point from world space into view space. | Improve this Doc View Source Multiply(XMMatrix, XMMatrix) Computes the product of two matrices. Declaration public static XMMatrix Multiply(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns the product of M1 and M2. | Improve this Doc View Source Multiply(XMMatrix, Single) Multiply each element of a matrix by a scalar. Declaration public static XMMatrix Multiply(XMMatrix m, float s) Parameters Type Name Description XMMatrix m The matrix. Single s The scalar. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source MultiplyTranspose(XMMatrix, XMMatrix) Computes the transpose of the product of two matrices. Declaration public static XMMatrix MultiplyTranspose(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns the transpose of the product of M1 and M2. | Improve this Doc View Source Negate(XMMatrix) Computes the negation of a matrix. Declaration public static XMMatrix Negate(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix. Returns Type Description XMMatrix Returns the negation of the matrix. | Improve this Doc View Source OrthographicLH(Single, Single, Single, Single) Builds an orthogonal projection matrix for a left-handed coordinate system. Declaration public static XMMatrix OrthographicLH(float viewWidth, float viewHeight, float nearZ, float farZ) Parameters Type Name Description Single viewWidth Width of the frustum at the near clipping plane. Single viewHeight Height of the frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the orthogonal projection matrix. | Improve this Doc View Source OrthographicOffCenterLH(Single, Single, Single, Single, Single, Single) Builds a custom orthogonal projection matrix for a left-handed coordinate system. Declaration public static XMMatrix OrthographicOffCenterLH(float viewLeft, float viewRight, float viewBottom, float viewTop, float nearZ, float farZ) Parameters Type Name Description Single viewLeft Minimum x-value of the view volume. Single viewRight Maximum x-value of the view volume. Single viewBottom Minimum y-value of the view volume. Single viewTop Maximum y-value of the view volume. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the custom orthogonal projection matrix. | Improve this Doc View Source OrthographicOffCenterRH(Single, Single, Single, Single, Single, Single) Builds a custom orthogonal projection matrix for a right-handed coordinate system. Declaration public static XMMatrix OrthographicOffCenterRH(float viewLeft, float viewRight, float viewBottom, float viewTop, float nearZ, float farZ) Parameters Type Name Description Single viewLeft Minimum x-value of the view volume. Single viewRight Maximum x-value of the view volume. Single viewBottom Minimum y-value of the view volume. Single viewTop Maximum y-value of the view volume. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the custom orthogonal projection matrix. | Improve this Doc View Source OrthographicRH(Single, Single, Single, Single) Builds an orthogonal projection matrix for a right-handed coordinate system. Declaration public static XMMatrix OrthographicRH(float viewWidth, float viewHeight, float nearZ, float farZ) Parameters Type Name Description Single viewWidth Width of the frustum at the near clipping plane. Single viewHeight Height of the frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the orthogonal projection matrix. | Improve this Doc View Source PerspectiveFovLH(Single, Single, Single, Single) Builds a left-handed perspective projection matrix based on a field of view. Declaration public static XMMatrix PerspectiveFovLH(float fovAngleY, float aspectHByW, float nearZ, float farZ) Parameters Type Name Description Single fovAngleY Top-down field-of-view angle in radians. Single aspectHByW Aspect ratio of view-space X:Y. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the perspective projection matrix. | Improve this Doc View Source PerspectiveFovRH(Single, Single, Single, Single) Builds a right-handed perspective projection matrix based on a field of view. Declaration public static XMMatrix PerspectiveFovRH(float fovAngleY, float aspectHByW, float nearZ, float farZ) Parameters Type Name Description Single fovAngleY Top-down field-of-view angle in radians. Single aspectHByW Aspect ratio of view-space X:Y. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the perspective projection matrix. | Improve this Doc View Source PerspectiveLH(Single, Single, Single, Single) Builds a left-handed perspective projection matrix. Declaration public static XMMatrix PerspectiveLH(float viewWidth, float viewHeight, float nearZ, float farZ) Parameters Type Name Description Single viewWidth Width of the frustum at the near clipping plane. Single viewHeight Height of the frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the perspective projection matrix. | Improve this Doc View Source PerspectiveOffCenterLH(Single, Single, Single, Single, Single, Single) Builds a custom version of a left-handed perspective projection matrix. Declaration public static XMMatrix PerspectiveOffCenterLH(float viewLeft, float viewRight, float viewBottom, float viewTop, float nearZ, float farZ) Parameters Type Name Description Single viewLeft The x-coordinate of the left side of the clipping frustum at the near clipping plane. Single viewRight The x-coordinate of the right side of the clipping frustum at the near clipping plane. Single viewBottom The y-coordinate of the bottom side of the clipping frustum at the near clipping plane. Single viewTop The y-coordinate of the top side of the clipping frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the custom perspective projection matrix. | Improve this Doc View Source PerspectiveOffCenterRH(Single, Single, Single, Single, Single, Single) Builds a custom version of a right-handed perspective projection matrix. Declaration public static XMMatrix PerspectiveOffCenterRH(float viewLeft, float viewRight, float viewBottom, float viewTop, float nearZ, float farZ) Parameters Type Name Description Single viewLeft The x-coordinate of the left side of the clipping frustum at the near clipping plane. Single viewRight The x-coordinate of the right side of the clipping frustum at the near clipping plane. Single viewBottom The y-coordinate of the bottom side of the clipping frustum at the near clipping plane. Single viewTop The y-coordinate of the top side of the clipping frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the custom perspective projection matrix. | Improve this Doc View Source PerspectiveRH(Single, Single, Single, Single) Builds a right-handed perspective projection matrix. Declaration public static XMMatrix PerspectiveRH(float viewWidth, float viewHeight, float nearZ, float farZ) Parameters Type Name Description Single viewWidth Width of the frustum at the near clipping plane. Single viewHeight Height of the frustum at the near clipping plane. Single nearZ Distance to the near clipping plane. Single farZ Distance to the far clipping plane. Returns Type Description XMMatrix Returns the perspective projection matrix. | Improve this Doc View Source Plus(XMMatrix) Performance an identity operation on a matrix. Declaration public static XMMatrix Plus(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix. Returns Type Description XMMatrix Returns the matrix. | Improve this Doc View Source Reflect(XMVector) Builds a transformation matrix designed to reflect vectors through a given plane. Declaration public static XMMatrix Reflect(XMVector reflectionPlane) Parameters Type Name Description XMVector reflectionPlane Plane to reflect through. Returns Type Description XMMatrix Returns the transformation matrix. | Improve this Doc View Source RotationAxis(XMVector, Single) Builds a matrix that rotates around an arbitrary axis. Declaration public static XMMatrix RotationAxis(XMVector axis, float angle) Parameters Type Name Description XMVector axis Vector describing the axis of rotation. Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationNormal(XMVector, Single) Builds a matrix that rotates around an arbitrary normal vector. Declaration public static XMMatrix RotationNormal(XMVector normalAxis, float angle) Parameters Type Name Description XMVector normalAxis Normal vector describing the axis of rotation. Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationQuaternion(XMVector) Builds a rotation matrix from a quaternion. Declaration public static XMMatrix RotationQuaternion(XMVector quaternion) Parameters Type Name Description XMVector quaternion Quaternion defining the rotation. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationRollPitchYaw(Single, Single, Single) Builds a rotation matrix based on a given pitch, yaw, and roll (Euler angles). Declaration public static XMMatrix RotationRollPitchYaw(float pitch, float yaw, float roll) Parameters Type Name Description Single pitch Angle of rotation around the x-axis, in radians. Single yaw Angle of rotation around the y-axis, in radians. Single roll Angle of rotation around the z-axis, in radians. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationRollPitchYawFromVector(XMVector) Builds a rotation matrix based on a vector containing the Euler angles (pitch, yaw, and roll). Declaration public static XMMatrix RotationRollPitchYawFromVector(XMVector angles) Parameters Type Name Description XMVector angles 3D vector containing the Euler angles in the order pitch, then yaw, and then roll. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationX(Single) Builds a matrix that rotates around the x-axis. Declaration public static XMMatrix RotationX(float angle) Parameters Type Name Description Single angle Angle of rotation around the x-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationY(Single) Builds a matrix that rotates around the y-axis. Declaration public static XMMatrix RotationY(float angle) Parameters Type Name Description Single angle Angle of rotation around the y-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source RotationZ(Single) Builds a matrix that rotates around the z-axis. Declaration public static XMMatrix RotationZ(float angle) Parameters Type Name Description Single angle Angle of rotation around the z-axis, in radians. Angles are measured clockwise when looking along the rotation axis toward the origin. Returns Type Description XMMatrix Returns the rotation matrix. | Improve this Doc View Source Scaling(Single, Single, Single) Builds a matrix that scales along the x-axis, y-axis, and z-axis. Declaration public static XMMatrix Scaling(float scaleX, float scaleY, float scaleZ) Parameters Type Name Description Single scaleX Scaling factor along the x-axis. Single scaleY Scaling factor along the y-axis. Single scaleZ Scaling factor along the z-axis. Returns Type Description XMMatrix Returns the scaling matrix. | Improve this Doc View Source ScalingFromVector(XMVector) Builds a scaling matrix from a 3D vector. Declaration public static XMMatrix ScalingFromVector(XMVector scale) Parameters Type Name Description XMVector scale 3D vector describing the scaling along the x-axis, y-axis, and z-axis. Returns Type Description XMMatrix Returns the scaling matrix. | Improve this Doc View Source Shadow(XMVector, XMVector) Builds a transformation matrix that flattens geometry into a plane. Declaration public static XMMatrix Shadow(XMVector shadowPlane, XMVector lightPosition) Parameters Type Name Description XMVector shadowPlane Reference plane. XMVector lightPosition 4D vector describing the light's position. If the light's w-component is 0.0f, the ray from the origin to the light represents a directional light. If it is 1.0f, the light is a point light. Returns Type Description XMMatrix Returns the transformation matrix that flattens the geometry into the plane ShadowPlane. | Improve this Doc View Source StoreFloat3X3(out XMFloat3X3) Stores an XMMatrix in an XMFloat3X3 . Declaration public void StoreFloat3X3(out XMFloat3X3 destination) Parameters Type Name Description XMFloat3X3 destination The destination structure | Improve this Doc View Source StoreFloat4X3(out XMFloat4X3) Stores an XMMatrix in an XMFloat4X3 . Declaration public void StoreFloat4X3(out XMFloat4X3 destination) Parameters Type Name Description XMFloat4X3 destination The destination structure | Improve this Doc View Source StoreFloat4X4(out XMFloat4X4) Stores an XMMatrix in an XMFloat4X4 . Declaration public void StoreFloat4X4(out XMFloat4X4 destination) Parameters Type Name Description XMFloat4X4 destination The destination structure | Improve this Doc View Source Subtract(XMMatrix, XMMatrix) Computes the difference of two matrices. Declaration public static XMMatrix Subtract(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns a matrix that is the difference of the two matrices. | Improve this Doc View Source ToArray() Convert a matrix to an array of float. Declaration public float[] ToArray() Returns Type Description Single [] An array of float. | Improve this Doc View Source Transformation(XMVector, XMVector, XMVector, XMVector, XMVector, XMVector) Builds a transformation matrix. Declaration public static XMMatrix Transformation(XMVector scalingOrigin, XMVector scalingOrientationQuaternion, XMVector scaling, XMVector rotationOrigin, XMVector rotationQuaternion, XMVector translation) Parameters Type Name Description XMVector scalingOrigin 3D vector describing the center of the scaling. XMVector scalingOrientationQuaternion Quaternion describing the orientation of the scaling. XMVector scaling 3D vector containing the scaling factors for the x-axis, y-axis, and z-axis. XMVector rotationOrigin 3D vector describing the center of the rotation. XMVector rotationQuaternion Quaternion describing the rotation around the origin indicated by RotationOrigin. XMVector translation 3D vector describing the translations along the x-axis, y-axis, and z-axis. Returns Type Description XMMatrix Returns the transformation matrix. | Improve this Doc View Source Transformation2D(XMVector, Single, XMVector, XMVector, Single, XMVector) Builds a 2D transformation matrix in the xy plane. Declaration public static XMMatrix Transformation2D(XMVector scalingOrigin, float scalingOrientation, XMVector scaling, XMVector rotationOrigin, float rotation, XMVector translation) Parameters Type Name Description XMVector scalingOrigin 2D vector describing the center of the scaling. Single scalingOrientation Scaling rotation factor. XMVector scaling 2D vector containing the scaling factors for the x-axis and y-axis. XMVector rotationOrigin 2D vector describing the center of the rotation. Single rotation Angle of rotation, in radians. XMVector translation 2D vector describing the translation. Returns Type Description XMMatrix Returns the transformation matrix. | Improve this Doc View Source Translation(Single, Single, Single) Builds a translation matrix from the specified offsets. Declaration public static XMMatrix Translation(float offsetX, float offsetY, float offsetZ) Parameters Type Name Description Single offsetX Translation along the x-axis. Single offsetY Translation along the y-axis. Single offsetZ Translation along the z-axis. Returns Type Description XMMatrix Returns the translation matrix. | Improve this Doc View Source TranslationFromVector(XMVector) Builds a translation matrix from a vector. Declaration public static XMMatrix TranslationFromVector(XMVector offset) Parameters Type Name Description XMVector offset 3D vector describing the translations along the x-axis, y-axis, and z-axis. Returns Type Description XMMatrix Returns the translation matrix. | Improve this Doc View Source Transpose() Computes the transpose of a matrix. Declaration public XMMatrix Transpose() Returns Type Description XMMatrix Returns the transpose. Operators | Improve this Doc View Source Addition(XMMatrix, XMMatrix) Computes the sum of two matrices. Declaration public static XMMatrix operator +(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns a matrix that is the sum of the two matrices. | Improve this Doc View Source Division(XMMatrix, Single) Divide each element of a matrix by a scalar. Declaration public static XMMatrix operator /(XMMatrix m, float s) Parameters Type Name Description XMMatrix m The matrix. Single s The scalar. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source Equality(XMMatrix, XMMatrix) Compares two XMMatrix objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMMatrix left, XMMatrix right) Parameters Type Name Description XMMatrix left The left XMMatrix to compare. XMMatrix right The right XMMatrix to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMMatrix to Single[]) Convert a matrix to an array of float. Declaration public static implicit operator float[](XMMatrix value) Parameters Type Name Description XMMatrix value The matrix. Returns Type Description Single [] An array of float. | Improve this Doc View Source Inequality(XMMatrix, XMMatrix) Compares two XMMatrix objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMMatrix left, XMMatrix right) Parameters Type Name Description XMMatrix left The left XMMatrix to compare. XMMatrix right The right XMMatrix to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . | Improve this Doc View Source Multiply(XMMatrix, XMMatrix) Computes the product of two matrices. Declaration public static XMMatrix operator *(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns the product of M1 and M2. | Improve this Doc View Source Multiply(XMMatrix, Single) Multiply each element of a matrix by a scalar. Declaration public static XMMatrix operator *(XMMatrix m, float s) Parameters Type Name Description XMMatrix m The matrix. Single s The scalar. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source Multiply(Single, XMMatrix) Multiply each element of a matrix by a scalar. Declaration public static XMMatrix operator *(float s, XMMatrix m) Parameters Type Name Description Single s The scalar. XMMatrix m The matrix. Returns Type Description XMMatrix A matrix. | Improve this Doc View Source Subtraction(XMMatrix, XMMatrix) Computes the difference of two matrices. Declaration public static XMMatrix operator -(XMMatrix m1, XMMatrix m2) Parameters Type Name Description XMMatrix m1 The first matrix. XMMatrix m2 The second matrix. Returns Type Description XMMatrix Returns a matrix that is the difference of the two matrices. | Improve this Doc View Source UnaryNegation(XMMatrix) Computes the negation of a matrix. Declaration public static XMMatrix operator -(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix. Returns Type Description XMMatrix Returns the negation of the matrix. | Improve this Doc View Source UnaryPlus(XMMatrix) Performance an identity operation on a matrix. Declaration public static XMMatrix operator +(XMMatrix m) Parameters Type Name Description XMMatrix m The matrix. Returns Type Description XMMatrix Returns the matrix. Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.XMMath.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMMath.html",
    "title": "Class XMMath",
    "keywords": "Class XMMath Constants and functions provided by XMMath. Inheritance Object XMMath Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMMath Fields | Improve this Doc View Source OneDivPI An optimal representation of 1/π. Declaration public const float OneDivPI = 0.318309873F Field Value Type Description Single | Improve this Doc View Source OneDivTwoPI An optimal representation of 2/π. Declaration public const float OneDivTwoPI = 0.159154937F Field Value Type Description Single | Improve this Doc View Source PI An optimal representation of π. Declaration public const float PI = 3.14159274F Field Value Type Description Single | Improve this Doc View Source PIDivFour An optimal representation of π/4. Declaration public const float PIDivFour = 0.7853982F Field Value Type Description Single | Improve this Doc View Source PIDivTwo An optimal representation of π/2. Declaration public const float PIDivTwo = 1.57079637F Field Value Type Description Single | Improve this Doc View Source TwoPI An optimal representation of 2*π. Declaration public const float TwoPI = 6.28318548F Field Value Type Description Single Methods | Improve this Doc View Source ConvertToDegrees(Single) Converts an angle measured in radians into one measured in degrees. Declaration public static float ConvertToDegrees(float radians) Parameters Type Name Description Single radians Size of an angle in radians. Returns Type Description Single Size of the angle in degrees. | Improve this Doc View Source ConvertToRadians(Single) Converts an angle measured in degrees into one measured in radians. Declaration public static float ConvertToRadians(float degrees) Parameters Type Name Description Single degrees Size of an angle in degrees. Returns Type Description Single Size of the angle in radians. | Improve this Doc View Source FresnelTerm(XMVector, XMVector) Calculates the Fresnel term for unpolarized light. Declaration public static XMVector FresnelTerm(XMVector cosIncidentAngle, XMVector refractionIndex) Parameters Type Name Description XMVector cosIncidentAngle Vector consisting of the cosines of the incident angles. XMVector refractionIndex Vector consisting of the refraction indices of the materials corresponding to the incident angles. Returns Type Description XMVector Returns a vector containing the Fresnel term of each component."
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShortN2.html",
    "title": "Struct XMUShortN2",
    "keywords": "Struct XMUShortN2 A 2D vector for storing unsigned, normalized values as unsigned 16-bit integers. Implements IEquatable < XMUShortN2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUShortN2 : IEquatable<XMUShortN2> Constructors | Improve this Doc View Source XMUShortN2(Single, Single) Initializes a new instance of the XMUShortN2 struct. Declaration public XMUShortN2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMUShortN2(Single[]) Initializes a new instance of the XMUShortN2 struct. Declaration public XMUShortN2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUShortN2(UInt16, UInt16) Initializes a new instance of the XMUShortN2 struct. Declaration public XMUShortN2(ushort x, ushort y) Parameters Type Name Description UInt16 x The x-coordinate of the vector. UInt16 y The y-coordinate of the vector. | Improve this Doc View Source XMUShortN2(UInt16[]) Initializes a new instance of the XMUShortN2 struct. Declaration public XMUShortN2(ushort[] array) Parameters Type Name Description UInt16 [] array The components of the vector. | Improve this Doc View Source XMUShortN2(UInt32) Initializes a new instance of the XMUShortN2 struct. Declaration public XMUShortN2(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public ushort X { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Y Gets or sets the x-coordinate of the vector. Declaration public ushort Y { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(XMUShortN2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUShortN2 other) Parameters Type Name Description XMUShortN2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUShortN2 . Declaration public static XMUShortN2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShortN2 A XMUShortN2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUShortN2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUShortN2, XMUShortN2) Compares two XMUShortN2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUShortN2 left, XMUShortN2 right) Parameters Type Name Description XMUShortN2 left The left XMUShortN2 to compare. XMUShortN2 right The right XMUShortN2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUShortN2 to XMVector) Converts a XMUShortN2 to a XMVector . Declaration public static implicit operator XMVector(XMUShortN2 value) Parameters Type Name Description XMUShortN2 value A XMUShortN2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUShortN2) Converts a XMVector to a XMUShortN2 . Declaration public static implicit operator XMUShortN2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShortN2 A XMUShortN2 . | Improve this Doc View Source Inequality(XMUShortN2, XMUShortN2) Compares two XMUShortN2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUShortN2 left, XMUShortN2 right) Parameters Type Name Description XMUShortN2 left The left XMUShortN2 to compare. XMUShortN2 right The right XMUShortN2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort4.html",
    "title": "Struct XMUShort4",
    "keywords": "Struct XMUShort4 A 4D vector consisting of 16-bit unsigned integer components. Implements IEquatable < XMUShort4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUShort4 : IEquatable<XMUShort4> Constructors | Improve this Doc View Source XMUShort4(Single, Single, Single, Single) Initializes a new instance of the XMUShort4 struct. Declaration public XMUShort4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUShort4(Single[]) Initializes a new instance of the XMUShort4 struct. Declaration public XMUShort4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUShort4(UInt16, UInt16, UInt16, UInt16) Initializes a new instance of the XMUShort4 struct. Declaration public XMUShort4(ushort x, ushort y, ushort z, ushort w) Parameters Type Name Description UInt16 x The x-coordinate of the vector. UInt16 y The y-coordinate of the vector. UInt16 z The z-coordinate of the vector. UInt16 w The w-coordinate of the vector. | Improve this Doc View Source XMUShort4(UInt16[]) Initializes a new instance of the XMUShort4 struct. Declaration public XMUShort4(ushort[] array) Parameters Type Name Description UInt16 [] array The components of the vector. | Improve this Doc View Source XMUShort4(UInt64) Initializes a new instance of the XMUShort4 struct. Declaration public XMUShort4(ulong packed) Parameters Type Name Description UInt64 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public ushort W { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public ushort X { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public ushort Y { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public ushort Z { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(XMUShort4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUShort4 other) Parameters Type Name Description XMUShort4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUShort4 . Declaration public static XMUShort4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShort4 A XMUShort4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUShort4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUShort4, XMUShort4) Compares two XMUShort4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUShort4 left, XMUShort4 right) Parameters Type Name Description XMUShort4 left The left XMUShort4 to compare. XMUShort4 right The right XMUShort4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUShort4 to XMVector) Converts a XMUShort4 to a XMVector . Declaration public static implicit operator XMVector(XMUShort4 value) Parameters Type Name Description XMUShort4 value A XMUShort4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUShort4) Converts a XMVector to a XMUShort4 . Declaration public static implicit operator XMUShort4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShort4 A XMUShort4 . | Improve this Doc View Source Inequality(XMUShort4, XMUShort4) Compares two XMUShort4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUShort4 left, XMUShort4 right) Parameters Type Name Description XMUShort4 left The left XMUShort4 to compare. XMUShort4 right The right XMUShort4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUShort2.html",
    "title": "Struct XMUShort2",
    "keywords": "Struct XMUShort2 A 2D vector consisting of 16-bit unsigned integer components. Implements IEquatable < XMUShort2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUShort2 : IEquatable<XMUShort2> Constructors | Improve this Doc View Source XMUShort2(Single, Single) Initializes a new instance of the XMUShort2 struct. Declaration public XMUShort2(float x, float y) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. | Improve this Doc View Source XMUShort2(Single[]) Initializes a new instance of the XMUShort2 struct. Declaration public XMUShort2(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUShort2(UInt16, UInt16) Initializes a new instance of the XMUShort2 struct. Declaration public XMUShort2(ushort x, ushort y) Parameters Type Name Description UInt16 x The x-coordinate of the vector. UInt16 y The y-coordinate of the vector. | Improve this Doc View Source XMUShort2(UInt16[]) Initializes a new instance of the XMUShort2 struct. Declaration public XMUShort2(ushort[] array) Parameters Type Name Description UInt16 [] array The components of the vector. | Improve this Doc View Source XMUShort2(UInt32) Initializes a new instance of the XMUShort2 struct. Declaration public XMUShort2(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public ushort X { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public ushort Y { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(XMUShort2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUShort2 other) Parameters Type Name Description XMUShort2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUShort2 . Declaration public static XMUShort2 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShort2 A XMUShort2 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToVector() Converts a XMUShort2 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUShort2, XMUShort2) Compares two XMUShort2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUShort2 left, XMUShort2 right) Parameters Type Name Description XMUShort2 left The left XMUShort2 to compare. XMUShort2 right The right XMUShort2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUShort2 to XMVector) Converts a XMUShort2 to a XMVector . Declaration public static implicit operator XMVector(XMUShort2 value) Parameters Type Name Description XMUShort2 value A XMUShort2 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMVector to XMUShort2) Converts a XMVector to a XMUShort2 . Declaration public static implicit operator XMUShort2(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUShort2 A XMUShort2 . | Improve this Doc View Source Inequality(XMUShort2, XMUShort2) Compares two XMUShort2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUShort2 left, XMUShort2 right) Parameters Type Name Description XMUShort2 left The left XMUShort2 to compare. XMUShort2 right The right XMUShort2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUNibble4.html",
    "title": "Struct XMUNibble4",
    "keywords": "Struct XMUNibble4 A 4D vector with four unsigned 4-bit integer components. Implements IEquatable < XMUNibble4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUNibble4 : IEquatable<XMUNibble4> Constructors | Improve this Doc View Source XMUNibble4(Byte, Byte, Byte, Byte) Initializes a new instance of the XMUNibble4 struct. Declaration public XMUNibble4(byte x, byte y, byte z, byte w) Parameters Type Name Description Byte x The x-coordinate of the vector. Byte y The y-coordinate of the vector. Byte z The z-coordinate of the vector. Byte w The w-coordinate of the vector. | Improve this Doc View Source XMUNibble4(Byte[]) Initializes a new instance of the XMUNibble4 struct. Declaration public XMUNibble4(byte[] array) Parameters Type Name Description Byte [] array The components of the vector. | Improve this Doc View Source XMUNibble4(Single, Single, Single, Single) Initializes a new instance of the XMUNibble4 struct. Declaration public XMUNibble4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUNibble4(Single[]) Initializes a new instance of the XMUNibble4 struct. Declaration public XMUNibble4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUNibble4(UInt16) Initializes a new instance of the XMUNibble4 struct. Declaration public XMUNibble4(ushort packed) Parameters Type Name Description UInt16 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public byte W { get; set; } Property Value Type Description Byte | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public byte X { get; set; } Property Value Type Description Byte | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public byte Y { get; set; } Property Value Type Description Byte | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public byte Z { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(XMUNibble4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUNibble4 other) Parameters Type Name Description XMUNibble4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt16) Converts a packed value to a XMUNibble4 . Declaration public static XMUNibble4 FromPacked(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMUNibble4 A XMUNibble4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUNibble4 . Declaration public static XMUNibble4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUNibble4 A XMUNibble4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMUNibble4 to a packed value. Declaration public ushort ToPacked() Returns Type Description UInt16 A packed value. | Improve this Doc View Source ToVector() Converts a XMUNibble4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUNibble4, XMUNibble4) Compares two XMUNibble4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUNibble4 left, XMUNibble4 right) Parameters Type Name Description XMUNibble4 left The left XMUNibble4 to compare. XMUNibble4 right The right XMUNibble4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUNibble4 to XMVector) Converts a XMUNibble4 to a XMVector . Declaration public static implicit operator XMVector(XMUNibble4 value) Parameters Type Name Description XMUNibble4 value A XMUNibble4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMUNibble4 to UInt16) Converts a XMUNibble4 to a packed value. Declaration public static implicit operator ushort (XMUNibble4 value) Parameters Type Name Description XMUNibble4 value A XMUNibble4 . Returns Type Description UInt16 A packed value. | Improve this Doc View Source Implicit(XMVector to XMUNibble4) Converts a XMVector to a XMUNibble4 . Declaration public static implicit operator XMUNibble4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUNibble4 A XMUNibble4 . | Improve this Doc View Source Implicit(UInt16 to XMUNibble4) Converts a packed value to a XMUNibble4 . Declaration public static implicit operator XMUNibble4(ushort value) Parameters Type Name Description UInt16 value A packed value. Returns Type Description XMUNibble4 A XMUNibble4 . | Improve this Doc View Source Inequality(XMUNibble4, XMUNibble4) Compares two XMUNibble4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUNibble4 left, XMUNibble4 right) Parameters Type Name Description XMUNibble4 left The left XMUNibble4 to compare. XMUNibble4 right The right XMUNibble4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4XR.html",
    "title": "Struct XMUDecN4XR",
    "keywords": "Struct XMUDecN4XR A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component. Implements IEquatable < XMUDecN4XR > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUDecN4XR : IEquatable<XMUDecN4XR> Constructors | Improve this Doc View Source XMUDecN4XR(Single, Single, Single, Single) Initializes a new instance of the XMUDecN4XR struct. Declaration public XMUDecN4XR(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUDecN4XR(Single[]) Initializes a new instance of the XMUDecN4XR struct. Declaration public XMUDecN4XR(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUDecN4XR(UInt32) Initializes a new instance of the XMUDecN4XR struct. Declaration public XMUDecN4XR(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public uint Z { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUDecN4XR) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUDecN4XR other) Parameters Type Name Description XMUDecN4XR other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMUDecN4XR . Declaration public static XMUDecN4XR FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDecN4XR A XMUDecN4XR . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUDecN4XR . Declaration public static XMUDecN4XR FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDecN4XR A XMUDecN4XR . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMUDecN4XR to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMUDecN4XR to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUDecN4XR, XMUDecN4XR) Compares two XMUDecN4XR objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUDecN4XR left, XMUDecN4XR right) Parameters Type Name Description XMUDecN4XR left The left XMUDecN4XR to compare. XMUDecN4XR right The right XMUDecN4XR to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUDecN4XR to XMVector) Converts a XMUDecN4XR to a XMVector . Declaration public static implicit operator XMVector(XMUDecN4XR value) Parameters Type Name Description XMUDecN4XR value A XMUDecN4XR . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMUDecN4XR to UInt32) Converts a XMUDecN4XR to a packed value. Declaration public static implicit operator uint (XMUDecN4XR value) Parameters Type Name Description XMUDecN4XR value A XMUDecN4XR . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMUDecN4XR) Converts a XMVector to a XMUDecN4XR . Declaration public static implicit operator XMUDecN4XR(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDecN4XR A XMUDecN4XR . | Improve this Doc View Source Implicit(UInt32 to XMUDecN4XR) Converts a packed value to a XMUDecN4XR . Declaration public static implicit operator XMUDecN4XR(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDecN4XR A XMUDecN4XR . | Improve this Doc View Source Inequality(XMUDecN4XR, XMUDecN4XR) Compares two XMUDecN4XR objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUDecN4XR left, XMUDecN4XR right) Parameters Type Name Description XMUDecN4XR left The left XMUDecN4XR to compare. XMUDecN4XR right The right XMUDecN4XR to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDecN4.html",
    "title": "Struct XMUDecN4",
    "keywords": "Struct XMUDecN4 A 4D vector for storing unsigned, normalized integer values as 10 bit unsigned x-, y-, and z-components and a 2-bit unsigned w-component. Implements IEquatable < XMUDecN4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUDecN4 : IEquatable<XMUDecN4> Constructors | Improve this Doc View Source XMUDecN4(Single, Single, Single, Single) Initializes a new instance of the XMUDecN4 struct. Declaration public XMUDecN4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUDecN4(Single[]) Initializes a new instance of the XMUDecN4 struct. Declaration public XMUDecN4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUDecN4(UInt32) Initializes a new instance of the XMUDecN4 struct. Declaration public XMUDecN4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public uint Z { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUDecN4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUDecN4 other) Parameters Type Name Description XMUDecN4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMUDecN4 . Declaration public static XMUDecN4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDecN4 A XMUDecN4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUDecN4 . Declaration public static XMUDecN4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDecN4 A XMUDecN4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMUDecN4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMUDecN4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUDecN4, XMUDecN4) Compares two XMUDecN4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUDecN4 left, XMUDecN4 right) Parameters Type Name Description XMUDecN4 left The left XMUDecN4 to compare. XMUDecN4 right The right XMUDecN4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUDecN4 to XMVector) Converts a XMUDecN4 to a XMVector . Declaration public static implicit operator XMVector(XMUDecN4 value) Parameters Type Name Description XMUDecN4 value A XMUDecN4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMUDecN4 to UInt32) Converts a XMUDecN4 to a packed value. Declaration public static implicit operator uint (XMUDecN4 value) Parameters Type Name Description XMUDecN4 value A XMUDecN4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMUDecN4) Converts a XMVector to a XMUDecN4 . Declaration public static implicit operator XMUDecN4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDecN4 A XMUDecN4 . | Improve this Doc View Source Implicit(UInt32 to XMUDecN4) Converts a packed value to a XMUDecN4 . Declaration public static implicit operator XMUDecN4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDecN4 A XMUDecN4 . | Improve this Doc View Source Inequality(XMUDecN4, XMUDecN4) Compares two XMUDecN4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUDecN4 left, XMUDecN4 right) Parameters Type Name Description XMUDecN4 left The left XMUDecN4 to compare. XMUDecN4 right The right XMUDecN4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.PackedVector.XMUDec4.html",
    "title": "Struct XMUDec4",
    "keywords": "Struct XMUDec4 A 4D vector with x-,y-, and z- components represented as 10 bit unsigned integer values, and the w-component as a 2 bit unsigned integer value. Implements IEquatable < XMUDec4 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DXMath.PackedVector Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public struct XMUDec4 : IEquatable<XMUDec4> Constructors | Improve this Doc View Source XMUDec4(Single, Single, Single, Single) Initializes a new instance of the XMUDec4 struct. Declaration public XMUDec4(float x, float y, float z, float w) Parameters Type Name Description Single x The x-coordinate of the vector. Single y The y-coordinate of the vector. Single z The z-coordinate of the vector. Single w The w-coordinate of the vector. | Improve this Doc View Source XMUDec4(Single[]) Initializes a new instance of the XMUDec4 struct. Declaration public XMUDec4(float[] array) Parameters Type Name Description Single [] array The components of the vector. | Improve this Doc View Source XMUDec4(UInt32) Initializes a new instance of the XMUDec4 struct. Declaration public XMUDec4(uint packed) Parameters Type Name Description UInt32 packed A packed value representing the vector. Properties | Improve this Doc View Source W Gets or sets the w-coordinate of the vector. Declaration public uint W { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source X Gets or sets the x-coordinate of the vector. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the vector. Declaration public uint Y { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Z Gets or sets the z-coordinate of the vector. Declaration public uint Z { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(XMUDec4) Determines whether the specified object is equal to the current object. Declaration public bool Equals(XMUDec4 other) Parameters Type Name Description XMUDec4 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromPacked(UInt32) Converts a packed value to a XMUDec4 . Declaration public static XMUDec4 FromPacked(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDec4 A XMUDec4 . | Improve this Doc View Source FromVector(XMVector) Converts a XMVector to a XMUDec4 . Declaration public static XMUDec4 FromVector(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDec4 A XMUDec4 . | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToPacked() Converts a XMUDec4 to a packed value. Declaration public uint ToPacked() Returns Type Description UInt32 A packed value. | Improve this Doc View Source ToVector() Converts a XMUDec4 to a XMVector . Declaration public XMVector ToVector() Returns Type Description XMVector A XMVector . Operators | Improve this Doc View Source Equality(XMUDec4, XMUDec4) Compares two XMUDec4 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(XMUDec4 left, XMUDec4 right) Parameters Type Name Description XMUDec4 left The left XMUDec4 to compare. XMUDec4 right The right XMUDec4 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Implicit(XMUDec4 to XMVector) Converts a XMUDec4 to a XMVector . Declaration public static implicit operator XMVector(XMUDec4 value) Parameters Type Name Description XMUDec4 value A XMUDec4 . Returns Type Description XMVector A XMVector . | Improve this Doc View Source Implicit(XMUDec4 to UInt32) Converts a XMUDec4 to a packed value. Declaration public static implicit operator uint (XMUDec4 value) Parameters Type Name Description XMUDec4 value A XMUDec4 . Returns Type Description UInt32 A packed value. | Improve this Doc View Source Implicit(XMVector to XMUDec4) Converts a XMVector to a XMUDec4 . Declaration public static implicit operator XMUDec4(XMVector value) Parameters Type Name Description XMVector value A XMVector . Returns Type Description XMUDec4 A XMUDec4 . | Improve this Doc View Source Implicit(UInt32 to XMUDec4) Converts a packed value to a XMUDec4 . Declaration public static implicit operator XMUDec4(uint value) Parameters Type Name Description UInt32 value A packed value. Returns Type Description XMUDec4 A XMUDec4 . | Improve this Doc View Source Inequality(XMUDec4, XMUDec4) Compares two XMUDec4 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(XMUDec4 left, XMUDec4 right) Parameters Type Name Description XMUDec4 left The left XMUDec4 to compare. XMUDec4 right The right XMUDec4 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.html",
    "title": "Struct D3D11DepthStencilViewDesc",
    "keywords": "Struct D3D11DepthStencilViewDesc Specifies the subresources of a texture that are accessible from a depth-stencil view. Implements IEquatable < D3D11DepthStencilViewDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11DepthStencilViewDesc : IEquatable<D3D11DepthStencilViewDesc> Constructors | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension, DxgiFormat) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32, D3D11DepthStencilViewOptions) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize, D3D11DepthStencilViewOptions options) Parameters Type Name Description D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. D3D11DepthStencilViewOptions options A value that describes whether the texture is read only. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension, DxgiFormat) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture1D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32, D3D11DepthStencilViewOptions) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture1D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize, D3D11DepthStencilViewOptions options) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. D3D11DepthStencilViewOptions options A value that describes whether the texture is read only. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension, DxgiFormat) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11DepthStencilViewDesc(D3D11Texture2D, D3D11DsvDimension, DxgiFormat, UInt32, UInt32, UInt32, D3D11DepthStencilViewOptions) Initializes a new instance of the D3D11DepthStencilViewDesc struct. Declaration public D3D11DepthStencilViewDesc(D3D11Texture2D texture, D3D11DsvDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize, D3D11DepthStencilViewOptions options) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11DsvDimension viewDimension The depth-stencil type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. D3D11DepthStencilViewOptions options A value that describes whether the texture is read only. Properties | Improve this Doc View Source Format Gets or sets the resource data format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Options Gets or sets a value that describes whether the texture is read only. Declaration public D3D11DepthStencilViewOptions Options { get; set; } Property Value Type Description D3D11DepthStencilViewOptions | Improve this Doc View Source Texture1D Gets or sets a 1D texture subresource. Declaration public D3D11Texture1DDsv Texture1D { get; set; } Property Value Type Description D3D11Texture1DDsv | Improve this Doc View Source Texture1DArray Gets or sets an array of 1D texture subresources. Declaration public D3D11Texture1DArrayDsv Texture1DArray { get; set; } Property Value Type Description D3D11Texture1DArrayDsv | Improve this Doc View Source Texture2D Gets or sets a 2D texture subresource. Declaration public D3D11Texture2DDsv Texture2D { get; set; } Property Value Type Description D3D11Texture2DDsv | Improve this Doc View Source Texture2DArray Gets or sets an array of 2D texture subresources. Declaration public D3D11Texture2DArrayDsv Texture2DArray { get; set; } Property Value Type Description D3D11Texture2DArrayDsv | Improve this Doc View Source Texture2DMs Gets or sets a multisampled 2D texture. Declaration public D3D11Texture2DMsDsv Texture2DMs { get; set; } Property Value Type Description D3D11Texture2DMsDsv | Improve this Doc View Source Texture2DMsArray Gets or sets an array of multisampled 2D textures. Declaration public D3D11Texture2DMsArrayDsv Texture2DMsArray { get; set; } Property Value Type Description D3D11Texture2DMsArrayDsv | Improve this Doc View Source ViewDimension Gets or sets the type of resource. Specifies how a depth-stencil resource will be accessed; the value is stored in the union in this structure. Declaration public D3D11DsvDimension ViewDimension { get; set; } Property Value Type Description D3D11DsvDimension Methods | Improve this Doc View Source Equals(D3D11DepthStencilViewDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11DepthStencilViewDesc other) Parameters Type Name Description D3D11DepthStencilViewDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11DepthStencilViewDesc, D3D11DepthStencilViewDesc) Compares two D3D11DepthStencilViewDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11DepthStencilViewDesc left, D3D11DepthStencilViewDesc right) Parameters Type Name Description D3D11DepthStencilViewDesc left The left D3D11DepthStencilViewDesc to compare. D3D11DepthStencilViewDesc right The right D3D11DepthStencilViewDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11DepthStencilViewDesc, D3D11DepthStencilViewDesc) Compares two D3D11DepthStencilViewDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11DepthStencilViewDesc left, D3D11DepthStencilViewDesc right) Parameters Type Name Description D3D11DepthStencilViewDesc left The left D3D11DepthStencilViewDesc to compare. D3D11DepthStencilViewDesc right The right D3D11DepthStencilViewDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.html",
    "title": "Class D3D11DepthStencilView",
    "keywords": "Class D3D11DepthStencilView A depth-stencil-view interface accesses a texture resource during depth-stencil testing. Inheritance Object D3D11DeviceChild D3D11View D3D11DepthStencilView Implements IDisposable ID3D11Releasable Inherited Members D3D11View.GetResource() D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11DepthStencilView : D3D11View, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the depth-stencil view. Declaration public D3D11DepthStencilViewDesc Description { get; } Property Value Type Description D3D11DepthStencilViewDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.html",
    "title": "Class D3D11DepthStencilState",
    "keywords": "Class D3D11DepthStencilState The depth-stencil-state interface holds a description for depth-stencil state that you can bind to the output-merger stage. Inheritance Object D3D11DeviceChild D3D11DepthStencilState Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11DepthStencilState : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the description for depth-stencil state that you used to create the depth-stencil-state object. Declaration public D3D11DepthStencilDesc Description { get; } Property Value Type Description D3D11DepthStencilDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.html",
    "title": "Enum D3D11CounterDataType",
    "keywords": "Enum D3D11CounterDataType Data type of a performance counter. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11CounterDataType Fields Name Description Float32 32-bit floating point. UInt16 16-bit unsigned integer. UInt32 32-bit unsigned integer. UInt64 64-bit unsigned integer."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Counter.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Counter.html",
    "title": "Class D3D11Counter",
    "keywords": "Class D3D11Counter This interface encapsulates methods for measuring GPU performance. Inheritance Object D3D11DeviceChild D3D11Asynchronous D3D11Counter Implements IDisposable ID3D11Releasable Inherited Members D3D11Asynchronous.DataSize D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Counter : D3D11Asynchronous, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets a counter description. Declaration public D3D11CounterDesc Description { get; } Property Value Type Description D3D11CounterDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.html",
    "title": "Struct D3D11Texture2DMsArrayDsv",
    "keywords": "Struct D3D11Texture2DMsArrayDsv Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view. Implements IEquatable < D3D11Texture2DMsArrayDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsArrayDsv : IEquatable<D3D11Texture2DMsArrayDsv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DMsArrayDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsArrayDsv other) Parameters Type Name Description D3D11Texture2DMsArrayDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsArrayDsv, D3D11Texture2DMsArrayDsv) Compares two D3D11Texture2DMsArrayDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsArrayDsv left, D3D11Texture2DMsArrayDsv right) Parameters Type Name Description D3D11Texture2DMsArrayDsv left The left D3D11Texture2DMsArrayDsv to compare. D3D11Texture2DMsArrayDsv right The right D3D11Texture2DMsArrayDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsArrayDsv, D3D11Texture2DMsArrayDsv) Compares two D3D11Texture2DMsArrayDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsArrayDsv left, D3D11Texture2DMsArrayDsv right) Parameters Type Name Description D3D11Texture2DMsArrayDsv left The left D3D11Texture2DMsArrayDsv to compare. D3D11Texture2DMsArrayDsv right The right D3D11Texture2DMsArrayDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.html",
    "title": "Struct D3D11Texture2DDsv",
    "keywords": "Struct D3D11Texture2DDsv Specifies the subresource from a 2D texture that is accessible to a depth-stencil view. Implements IEquatable < D3D11Texture2DDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DDsv : IEquatable<D3D11Texture2DDsv> Properties | Improve this Doc View Source MipSlice Gets or sets the index of the first mipmap level to use. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DDsv other) Parameters Type Name Description D3D11Texture2DDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DDsv, D3D11Texture2DDsv) Compares two D3D11Texture2DDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DDsv left, D3D11Texture2DDsv right) Parameters Type Name Description D3D11Texture2DDsv left The left D3D11Texture2DDsv to compare. D3D11Texture2DDsv right The right D3D11Texture2DDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DDsv, D3D11Texture2DDsv) Compares two D3D11Texture2DDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DDsv left, D3D11Texture2DDsv right) Parameters Type Name Description D3D11Texture2DDsv left The left D3D11Texture2DDsv to compare. D3D11Texture2DDsv right The right D3D11Texture2DDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.html",
    "title": "Struct D3D11Texture1DRtv",
    "keywords": "Struct D3D11Texture1DRtv Specifies the subresource from a 1D texture to use in a render-target view. Implements IEquatable < D3D11Texture1DRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DRtv : IEquatable<D3D11Texture1DRtv> Properties | Improve this Doc View Source MipSlice Gets or sets the index of the mipmap level to use mip slice. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DRtv other) Parameters Type Name Description D3D11Texture1DRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DRtv, D3D11Texture1DRtv) Compares two D3D11Texture1DRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DRtv left, D3D11Texture1DRtv right) Parameters Type Name Description D3D11Texture1DRtv left The left D3D11Texture1DRtv to compare. D3D11Texture1DRtv right The right D3D11Texture1DRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DRtv, D3D11Texture1DRtv) Compares two D3D11Texture1DRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DRtv left, D3D11Texture1DRtv right) Parameters Type Name Description D3D11Texture1DRtv left The left D3D11Texture1DDsv to compare. D3D11Texture1DRtv right The right D3D11Texture1DDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.html",
    "title": "Struct D3D11Texture1DDsv",
    "keywords": "Struct D3D11Texture1DDsv Specifies the subresource from a 1D texture that is accessible to a depth-stencil view. Implements IEquatable < D3D11Texture1DDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DDsv : IEquatable<D3D11Texture1DDsv> Properties | Improve this Doc View Source MipSlice Gets or sets the index of the first mipmap level to use. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DDsv other) Parameters Type Name Description D3D11Texture1DDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DDsv, D3D11Texture1DDsv) Compares two D3D11Texture1DDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DDsv left, D3D11Texture1DDsv right) Parameters Type Name Description D3D11Texture1DDsv left The left D3D11Texture1DDsv to compare. D3D11Texture1DDsv right The right D3D11Texture1DDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DDsv, D3D11Texture1DDsv) Compares two D3D11Texture1DDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DDsv left, D3D11Texture1DDsv right) Parameters Type Name Description D3D11Texture1DDsv left The left D3D11Texture1DDsv to compare. D3D11Texture1DDsv right The right D3D11Texture1DDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.html",
    "title": "Struct D3D11CounterInfo",
    "keywords": "Struct D3D11CounterInfo Information about the video card's performance counter capabilities. Implements IEquatable < D3D11CounterInfo > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11CounterInfo : IEquatable<D3D11CounterInfo> Properties | Improve this Doc View Source LastDeviceDependantCounter Gets the largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Declaration public D3D11CounterType LastDeviceDependantCounter { get; } Property Value Type Description D3D11CounterType | Improve this Doc View Source NumDetectableParallelUnits Gets the number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Declaration public byte NumDetectableParallelUnits { get; } Property Value Type Description Byte | Improve this Doc View Source NumSimultaneousCounters Gets the number of counters that can be simultaneously supported. Declaration public uint NumSimultaneousCounters { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11CounterInfo) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11CounterInfo other) Parameters Type Name Description D3D11CounterInfo other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11CounterInfo, D3D11CounterInfo) Compares two D3D11CounterInfo objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11CounterInfo left, D3D11CounterInfo right) Parameters Type Name Description D3D11CounterInfo left The left D3D11CounterInfo to compare. D3D11CounterInfo right The right D3D11CounterInfo to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11CounterInfo, D3D11CounterInfo) Compares two D3D11CounterInfo objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11CounterInfo left, D3D11CounterInfo right) Parameters Type Name Description D3D11CounterInfo left The left D3D11CounterInfo to compare. D3D11CounterInfo right The right D3D11CounterInfo to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.html",
    "title": "Struct D3D11CounterDesc",
    "keywords": "Struct D3D11CounterDesc Describes a counter. Implements IEquatable < D3D11CounterDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11CounterDesc : IEquatable<D3D11CounterDesc> Constructors | Improve this Doc View Source D3D11CounterDesc(D3D11CounterType) Initializes a new instance of the D3D11CounterDesc struct. Declaration public D3D11CounterDesc(D3D11CounterType counter) Parameters Type Name Description D3D11CounterType counter The type of the counter. Properties | Improve this Doc View Source Counter Gets or sets the type of the counter. Declaration public D3D11CounterType Counter { get; set; } Property Value Type Description D3D11CounterType Methods | Improve this Doc View Source Equals(D3D11CounterDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11CounterDesc other) Parameters Type Name Description D3D11CounterDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11CounterDesc, D3D11CounterDesc) Compares two D3D11CounterDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11CounterDesc left, D3D11CounterDesc right) Parameters Type Name Description D3D11CounterDesc left The left D3D11CounterDesc to compare. D3D11CounterDesc right The right D3D11CounterDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11CounterDesc, D3D11CounterDesc) Compares two D3D11CounterDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11CounterDesc left, D3D11CounterDesc right) Parameters Type Name Description D3D11CounterDesc left The left D3D11CounterDesc to compare. D3D11CounterDesc right The right D3D11CounterDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.html",
    "title": "Class D3D11ClassLinkage",
    "keywords": "Class D3D11ClassLinkage This interface encapsulates an HLSL dynamic linkage. Inheritance Object D3D11DeviceChild D3D11ClassLinkage Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11ClassLinkage : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Methods | Improve this Doc View Source CreateClassInstance(String, UInt32, UInt32, UInt32, UInt32) Initializes a class-instance object that represents an HLSL class instance. Declaration public D3D11ClassInstance CreateClassInstance(string classTypeName, uint constantBufferOffset, uint constantVectorOffset, uint textureOffset, uint samplerOffset) Parameters Type Name Description String classTypeName The type name of a class to initialize. UInt32 constantBufferOffset Identifies the constant buffer that contains the class data. UInt32 constantVectorOffset The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset. UInt32 textureOffset The texture slot for the first texture; there may be multiple textures following the offset. UInt32 samplerOffset The sampler slot for the first sampler; there may be multiple samplers following the offset. Returns Type Description D3D11ClassInstance A class instance interface. | Improve this Doc View Source GetClassInstance(String, UInt32) Gets the class-instance object that represents the specified HLSL class. Declaration public D3D11ClassInstance GetClassInstance(string name, uint index) Parameters Type Name Description String name The name of a class for which to get the class instance. UInt32 index The index of the class instance. Returns Type Description D3D11ClassInstance A class instance interface. Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.html",
    "title": "Struct D3D11ClassInstanceDesc",
    "keywords": "Struct D3D11ClassInstanceDesc Describes an HLSL class instance. Implements IEquatable < D3D11ClassInstanceDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11ClassInstanceDesc : IEquatable<D3D11ClassInstanceDesc> Properties | Improve this Doc View Source BaseConstantBufferOffset Gets the base constant buffer offset associated with an HLSL class; the default value is 0. Declaration public uint BaseConstantBufferOffset { get; } Property Value Type Description UInt32 | Improve this Doc View Source BaseSampler Gets the base sampler associated with an HLSL class; the default value is 15. Declaration public uint BaseSampler { get; } Property Value Type Description UInt32 | Improve this Doc View Source BaseTexture Gets the base texture associated with an HLSL class; the default value is 127. Declaration public uint BaseTexture { get; } Property Value Type Description UInt32 | Improve this Doc View Source ConstanceBuffer Gets a value indicating the constant buffer associated with an HLSL class; the default value is 0. Declaration public uint ConstanceBuffer { get; } Property Value Type Description UInt32 | Improve this Doc View Source InstanceId Gets the instance ID of an HLSL class; the default value is 0. Declaration public uint InstanceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source InstanceIndex Gets the instance index of an HLSL class; the default value is 0. Declaration public uint InstanceIndex { get; } Property Value Type Description UInt32 | Improve this Doc View Source IsCreated Gets a value indicating whether the class was created; the default value is false. Declaration public bool IsCreated { get; } Property Value Type Description Boolean | Improve this Doc View Source TypeId Gets the type ID of an HLSL class; the default value is 0. Declaration public uint TypeId { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11ClassInstanceDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11ClassInstanceDesc other) Parameters Type Name Description D3D11ClassInstanceDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11ClassInstanceDesc, D3D11ClassInstanceDesc) Compares two D3D11ClassInstanceDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11ClassInstanceDesc left, D3D11ClassInstanceDesc right) Parameters Type Name Description D3D11ClassInstanceDesc left The left D3D11ClassInstanceDesc to compare. D3D11ClassInstanceDesc right The right D3D11ClassInstanceDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11ClassInstanceDesc, D3D11ClassInstanceDesc) Compares two D3D11ClassInstanceDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11ClassInstanceDesc left, D3D11ClassInstanceDesc right) Parameters Type Name Description D3D11ClassInstanceDesc left The left D3D11ClassInstanceDesc to compare. D3D11ClassInstanceDesc right The right D3D11ClassInstanceDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.html",
    "title": "Class D3D11ClassInstance",
    "keywords": "Class D3D11ClassInstance This interface encapsulates an HLSL class. Inheritance Object D3D11DeviceChild D3D11ClassInstance Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11ClassInstance : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets a description of the current HLSL class. Declaration public D3D11ClassInstanceDesc Description { get; } Property Value Type Description D3D11ClassInstanceDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle | Improve this Doc View Source InstanceName Gets the instance name of the current HLSL class. Declaration public string InstanceName { get; } Property Value Type Description String | Improve this Doc View Source TypeName Gets the type of the current HLSL class. Declaration public string TypeName { get; } Property Value Type Description String Methods | Improve this Doc View Source GetClassLinkage() Gets the D3D11ClassLinkage object associated with the current HLSL class. Declaration public D3D11ClassLinkage GetClassLinkage() Returns Type Description D3D11ClassLinkage A class linkage object. Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.html",
    "title": "Enum D3D11BufferUavOptions",
    "keywords": "Enum D3D11BufferUavOptions Identifies unordered-access view options for a buffer resource. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11BufferUavOptions Fields Name Description Append Allow data to be appended to the end of the buffer. Counter Allow data to be appended to the end of the buffer. None No option. Raw Resource contains raw, unstructured data. Requires the UAV format to be DxgiFormat ."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferUav.html",
    "title": "Struct D3D11BufferUav",
    "keywords": "Struct D3D11BufferUav Describes the elements in a buffer to use in a unordered-access view. Implements IEquatable < D3D11BufferUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BufferUav : IEquatable<D3D11BufferUav> Properties | Improve this Doc View Source FirstElement Gets or sets the zero-based index of the first element to be accessed. Declaration public uint FirstElement { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source NumElements Gets or sets the number of elements in the resource. For structured buffers, this is the number of structures in the buffer. Declaration public uint NumElements { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Options Gets or sets the view options for the resource. Declaration public D3D11BufferUavOptions Options { get; set; } Property Value Type Description D3D11BufferUavOptions Methods | Improve this Doc View Source Equals(D3D11BufferUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BufferUav other) Parameters Type Name Description D3D11BufferUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11BufferUav, D3D11BufferUav) Compares two D3D11BufferUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BufferUav left, D3D11BufferUav right) Parameters Type Name Description D3D11BufferUav left The left D3D11BufferUav to compare. D3D11BufferUav right The right D3D11BufferUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BufferUav, D3D11BufferUav) Compares two D3D11BufferUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BufferUav left, D3D11BufferUav right) Parameters Type Name Description D3D11BufferUav left The left D3D11BufferUav to compare. D3D11BufferUav right The right D3D11BufferUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.html",
    "title": "Struct D3D11BufferSrv",
    "keywords": "Struct D3D11BufferSrv Specifies the elements in a buffer resource to use in a shader resource view. Implements IEquatable < D3D11BufferSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BufferSrv : IEquatable<D3D11BufferSrv> Properties | Improve this Doc View Source ElementOffset Gets or sets the offset of the first element in the view to access, relative to element 0. Declaration public uint ElementOffset { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source ElementWidth Gets or sets the width of each element (in bytes). This can be determined from the format stored in the shader resource-view description. Declaration public uint ElementWidth { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstElement Gets or sets the number of bytes between the beginning of the buffer and the first element to access. Declaration public uint FirstElement { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source NumElements Gets or sets the total number of elements in the view. Declaration public uint NumElements { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11BufferSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BufferSrv other) Parameters Type Name Description D3D11BufferSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11BufferSrv, D3D11BufferSrv) Compares two D3D11BufferSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BufferSrv left, D3D11BufferSrv right) Parameters Type Name Description D3D11BufferSrv left The left D3D11BufferSrv to compare. D3D11BufferSrv right The right D3D11BufferSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BufferSrv, D3D11BufferSrv) Compares two D3D11BufferSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BufferSrv left, D3D11BufferSrv right) Parameters Type Name Description D3D11BufferSrv left The left D3D11BufferSrv to compare. D3D11BufferSrv right The right D3D11BufferSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1SweepDirection.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1SweepDirection.html",
    "title": "Enum D2D1SweepDirection",
    "keywords": "Enum D2D1SweepDirection Defines the direction that an elliptical arc is drawn. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1SweepDirection Fields Name Description Clockwise Arcs are drawn in a clockwise (positive-angle) direction. CounterClockwise Arcs are drawn in a counterclockwise (negative-angle) direction."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1StrokeStyleProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1StrokeStyleProperties.html",
    "title": "Struct D2D1StrokeStyleProperties",
    "keywords": "Struct D2D1StrokeStyleProperties Describes the stroke that outlines a shape. Implements IEquatable < D2D1StrokeStyleProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1StrokeStyleProperties : IEquatable<D2D1StrokeStyleProperties> Constructors | Improve this Doc View Source D2D1StrokeStyleProperties(D2D1CapStyle, D2D1CapStyle, D2D1CapStyle, D2D1LineJoin, Single, D2D1DashStyle, Single) Initializes a new instance of the D2D1StrokeStyleProperties struct. Declaration public D2D1StrokeStyleProperties(D2D1CapStyle startCap, D2D1CapStyle endCap, D2D1CapStyle dashCap, D2D1LineJoin lineJoin, float miterLimit, D2D1DashStyle dashStyle, float dashOffset) Parameters Type Name Description D2D1CapStyle startCap The cap applied to the start of all the open figures in a stroked geometry. D2D1CapStyle endCap The cap applied to the end of all the open figures in a stroked geometry. D2D1CapStyle dashCap The shape at either end of each dash segment. D2D1LineJoin lineJoin A value that describes how segments are joined. Single miterLimit The limit of the thickness of the join on a mitered corner. This value is always treated as though it is greater than or equal to 1.0f. D2D1DashStyle dashStyle A value that specifies whether the stroke has a dash pattern and, if so, the dash style. Single dashOffset A value that specifies an offset in the dash sequence. A positive dash offset value shifts the dash pattern, in units of stroke width, toward the start of the stroked geometry. A negative dash offset value shifts the dash pattern, in units of stroke width, toward the end of the stroked geometry. Properties | Improve this Doc View Source DashCap Gets or sets the shape at either end of each dash segment. Declaration public D2D1CapStyle DashCap { get; set; } Property Value Type Description D2D1CapStyle | Improve this Doc View Source DashOffset Gets or sets a value that specifies an offset in the dash sequence. A positive dash offset value shifts the dash pattern, in units of stroke width, toward the start of the stroked geometry. A negative dash offset value shifts the dash pattern, in units of stroke width, toward the end of the stroked geometry. Declaration public float DashOffset { get; set; } Property Value Type Description Single | Improve this Doc View Source DashStyle Gets or sets a value that specifies whether the stroke has a dash pattern and, if so, the dash style. Declaration public D2D1DashStyle DashStyle { get; set; } Property Value Type Description D2D1DashStyle | Improve this Doc View Source Default Gets default properties (Flat, Flat, Flat, Miter, 10, Solid, 0). Declaration public static D2D1StrokeStyleProperties Default { get; } Property Value Type Description D2D1StrokeStyleProperties | Improve this Doc View Source EndCap Gets or sets the cap applied to the end of all the open figures in a stroked geometry. Declaration public D2D1CapStyle EndCap { get; set; } Property Value Type Description D2D1CapStyle | Improve this Doc View Source LineJoin Gets or sets a value that describes how segments are joined. Declaration public D2D1LineJoin LineJoin { get; set; } Property Value Type Description D2D1LineJoin | Improve this Doc View Source MiterLimit Gets or sets the limit of the thickness of the join on a mitered corner. This value is always treated as though it is greater than or equal to 1.0f. Declaration public float MiterLimit { get; set; } Property Value Type Description Single | Improve this Doc View Source StartCap Gets or sets the cap applied to the start of all the open figures in a stroked geometry. Declaration public D2D1CapStyle StartCap { get; set; } Property Value Type Description D2D1CapStyle Methods | Improve this Doc View Source Equals(D2D1StrokeStyleProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1StrokeStyleProperties other) Parameters Type Name Description D2D1StrokeStyleProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1StrokeStyleProperties, D2D1StrokeStyleProperties) Compares two D2D1StrokeStyleProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1StrokeStyleProperties left, D2D1StrokeStyleProperties right) Parameters Type Name Description D2D1StrokeStyleProperties left The left D2D1StrokeStyleProperties to compare. D2D1StrokeStyleProperties right The right D2D1StrokeStyleProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1StrokeStyleProperties, D2D1StrokeStyleProperties) Compares two D2D1StrokeStyleProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1StrokeStyleProperties left, D2D1StrokeStyleProperties right) Parameters Type Name Description D2D1StrokeStyleProperties left The left D2D1StrokeStyleProperties to compare. D2D1StrokeStyleProperties right The right D2D1StrokeStyleProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1SimplifiedGeometrySink.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1SimplifiedGeometrySink.html",
    "title": "Class D2D1SimplifiedGeometrySink",
    "keywords": "Class D2D1SimplifiedGeometrySink Describes a geometric path that does not contain quadratic bezier curves or arcs. Inheritance Object D2D1SimplifiedGeometrySink D2D1GeometrySink Implements IDisposable ID2D1Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1SimplifiedGeometrySink : IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public abstract object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source AddBeziers(D2D1BezierSegment[]) Creates a sequence of cubic Bezier curves and adds them to the geometry sink. Declaration public void AddBeziers(D2D1BezierSegment[] beziers) Parameters Type Name Description D2D1BezierSegment [] beziers An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure(D2D1Point2F, D2D1FigureBegin) ) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point. | Improve this Doc View Source AddLines(D2D1Point2F[]) Creates a sequence of lines using the specified points and adds them to the geometry sink. Declaration public void AddLines(D2D1Point2F[] points) Parameters Type Name Description D2D1Point2F [] points An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure(D2D1Point2F, D2D1FigureBegin) ) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. | Improve this Doc View Source BeginFigure(D2D1Point2F, D2D1FigureBegin) Starts a new figure at the specified point. Declaration public void BeginFigure(D2D1Point2F startPoint, D2D1FigureBegin figureBegin) Parameters Type Name Description D2D1Point2F startPoint The point at which to begin the new figure. D2D1FigureBegin figureBegin Whether the new figure should be hollow or filled. | Improve this Doc View Source Close() Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state. Declaration public void Close() | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D2D1SimplifiedGeometrySink object. Declaration public void Dispose() | Improve this Doc View Source EndFigure(D2D1FigureEnd) Ends the current figure; optionally, closes it. Declaration public void EndFigure(D2D1FigureEnd figureEnd) Parameters Type Name Description D2D1FigureEnd figureEnd A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure(D2D1Point2F, D2D1FigureBegin) . | Improve this Doc View Source Release() Releases the managed reference to the COM D2D1 interface. Declaration public void Release() | Improve this Doc View Source SetFillMode(D2D1FillMode) Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside. Declaration public void SetFillMode(D2D1FillMode fillMode) Parameters Type Name Description D2D1FillMode fillMode The method used to determine whether a given point is part of the geometry. | Improve this Doc View Source SetSegmentOptions(D2D1PathSegmentOptions) Specifies stroke and join options to be applied to new segments added to the geometry sink. Declaration public void SetSegmentOptions(D2D1PathSegmentOptions vertexOptions) Parameters Type Name Description D2D1PathSegmentOptions vertexOptions Stroke and join options to be applied to new segments added to the geometry sink. | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D2D1SimplifiedGeometrySink to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D2D1SimplifiedGeometrySink value) Parameters Type Name Description D2D1SimplifiedGeometrySink value A D2D1 object. Returns Type Description Boolean A boolean Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RoundedRectangleGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RoundedRectangleGeometry.html",
    "title": "Class D2D1RoundedRectangleGeometry",
    "keywords": "Class D2D1RoundedRectangleGeometry Describes a rounded rectangle. Inheritance Object D2D1Resource D2D1Geometry D2D1RoundedRectangleGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1RoundedRectangleGeometry : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source RoundedRect Gets a rounded rectangle that describes this rounded rectangle geometry. Declaration public D2D1RoundedRect RoundedRect { get; } Property Value Type Description D2D1RoundedRect Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RoundedRect.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RoundedRect.html",
    "title": "Struct D2D1RoundedRect",
    "keywords": "Struct D2D1RoundedRect Contains the dimensions and corner radii of a rounded rectangle. Implements IEquatable < D2D1RoundedRect > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RoundedRect : IEquatable<D2D1RoundedRect> Constructors | Improve this Doc View Source D2D1RoundedRect(D2D1RectF, Single, Single) Initializes a new instance of the D2D1RoundedRect struct. Declaration public D2D1RoundedRect(D2D1RectF rect, float radiusX, float radiusY) Parameters Type Name Description D2D1RectF rect The coordinates of the rectangle. Single radiusX The x-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. Single radiusY The y-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. Properties | Improve this Doc View Source RadiusX Gets or sets the x-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. Declaration public float RadiusX { get; set; } Property Value Type Description Single | Improve this Doc View Source RadiusY Gets or sets the y-radius for the quarter ellipse that is drawn to replace every corner of the rectangle. Declaration public float RadiusY { get; set; } Property Value Type Description Single | Improve this Doc View Source Rect Gets or sets the coordinates of the rectangle. Declaration public D2D1RectF Rect { get; set; } Property Value Type Description D2D1RectF Methods | Improve this Doc View Source Equals(D2D1RoundedRect) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RoundedRect other) Parameters Type Name Description D2D1RoundedRect other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RoundedRect, D2D1RoundedRect) Compares two D2D1RoundedRect objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RoundedRect left, D2D1RoundedRect right) Parameters Type Name Description D2D1RoundedRect left The left D2D1RoundedRect to compare. D2D1RoundedRect right The right D2D1RoundedRect to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RoundedRect, D2D1RoundedRect) Compares two D2D1RoundedRect objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RoundedRect left, D2D1RoundedRect right) Parameters Type Name Description D2D1RoundedRect left The left D2D1RoundedRect to compare. D2D1RoundedRect right The right D2D1RoundedRect to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Resource.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Resource.html",
    "title": "Class D2D1Resource",
    "keywords": "Class D2D1Resource The root interface for all resources in D2D. Inheritance Object D2D1Resource D2D1Brush D2D1DrawingStateBlock D2D1Geometry D2D1GradientStopCollection D2D1Image D2D1Layer D2D1Mesh D2D1RenderTarget D2D1StrokeStyle Implements IDisposable ID2D1Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1Resource : IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public abstract object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D2D1Resource object. Declaration public void Dispose() | Improve this Doc View Source GetFactory() Retrieve the factory associated with this resource. Declaration public D2D1Factory GetFactory() Returns Type Description D2D1Factory The factory that created this resource. | Improve this Doc View Source Release() Releases the managed reference to the COM D2D1 interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D2D1Resource to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D2D1Resource value) Parameters Type Name Description D2D1Resource value A D2D1 object. Returns Type Description Boolean A boolean Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RectU.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RectU.html",
    "title": "Struct D2D1RectU",
    "keywords": "Struct D2D1RectU Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). Implements IEquatable < D2D1RectU > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RectU : IEquatable<D2D1RectU> Constructors | Improve this Doc View Source D2D1RectU(UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D2D1RectU struct. Declaration public D2D1RectU(uint left, uint top, uint right, uint bottom) Parameters Type Name Description UInt32 left The x-coordinate of the upper-left corner of the rectangle. UInt32 top The y-coordinate of the upper-left corner of the rectangle. UInt32 right The x-coordinate of the lower-right corner of the rectangle. UInt32 bottom The y-coordinate of the lower-right corner of the rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of the rectangle. Declaration public uint Bottom { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of the rectangle. Declaration public uint Left { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of the rectangle. Declaration public uint Right { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of the rectangle. Declaration public uint Top { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D2D1RectU) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RectU other) Parameters Type Name Description D2D1RectU other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RectU, D2D1RectU) Compares two D2D1RectU objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RectU left, D2D1RectU right) Parameters Type Name Description D2D1RectU left The left D2D1RectU to compare. D2D1RectU right The right D2D1RectU to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RectU, D2D1RectU) Compares two D2D1RectU objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RectU left, D2D1RectU right) Parameters Type Name Description D2D1RectU left The left D2D1RectU to compare. D2D1RectU right The right D2D1RectU to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RectL.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RectL.html",
    "title": "Struct D2D1RectL",
    "keywords": "Struct D2D1RectL Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). Implements IEquatable < D2D1RectL > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RectL : IEquatable<D2D1RectL> Constructors | Improve this Doc View Source D2D1RectL(Int32, Int32, Int32, Int32) Initializes a new instance of the D2D1RectL struct. Declaration public D2D1RectL(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left The x-coordinate of the upper-left corner of the rectangle. Int32 top The y-coordinate of the upper-left corner of the rectangle. Int32 right The x-coordinate of the lower-right corner of the rectangle. Int32 bottom The y-coordinate of the lower-right corner of the rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of the rectangle. Declaration public int Bottom { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of the rectangle. Declaration public int Left { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of the rectangle. Declaration public int Right { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of the rectangle. Declaration public int Top { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(D2D1RectL) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RectL other) Parameters Type Name Description D2D1RectL other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RectL, D2D1RectL) Compares two D2D1RectL objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RectL left, D2D1RectL right) Parameters Type Name Description D2D1RectL left The left D2D1RectL to compare. D2D1RectL right The right D2D1RectL to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RectL, D2D1RectL) Compares two D2D1RectL objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RectL left, D2D1RectL right) Parameters Type Name Description D2D1RectL left The left D2D1RectL to compare. D2D1RectL right The right D2D1RectL to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Point2F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Point2F.html",
    "title": "Struct D2D1Point2F",
    "keywords": "Struct D2D1Point2F Represents an x-coordinate and y-coordinate pair in two-dimensional space. Implements IEquatable < D2D1Point2F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Point2F : IEquatable<D2D1Point2F> Constructors | Improve this Doc View Source D2D1Point2F(Single, Single) Initializes a new instance of the D2D1Point2F struct. Declaration public D2D1Point2F(float x, float y) Parameters Type Name Description Single x The x-coordinate of the point. Single y The y-coordinate of the point. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Point2F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Point2F other) Parameters Type Name Description D2D1Point2F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Point2F, D2D1Point2F) Compares two D2D1Point2F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Point2F left, D2D1Point2F right) Parameters Type Name Description D2D1Point2F left The left D2D1Point2F to compare. D2D1Point2F right The right D2D1Point2F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Point2F, D2D1Point2F) Compares two D2D1Point2F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Point2F left, D2D1Point2F right) Parameters Type Name Description D2D1Point2F left The left D2D1Point2F to compare. D2D1Point2F right The right D2D1Point2F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiObject.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiObject.html",
    "title": "Class DxgiObject",
    "keywords": "Class DxgiObject An IDXGIObject interface is a base interface for all DXGI objects. IDXGIObject supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object. Inheritance Object DxgiObject DxgiAdapter DxgiAdapter1 DxgiAdapter2 DxgiAdapter3 DxgiDevice DxgiDevice1 DxgiDevice2 DxgiDevice3 DxgiDeviceSubObject DxgiFactory DxgiFactory1 DxgiFactory2 DxgiFactory3 DxgiOutput DxgiOutput1 DxgiOutput2 DxgiOutput3 Implements IDisposable IDxgiReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public abstract class DxgiObject : IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public abstract object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DxgiObject object. Declaration public void Dispose() | Improve this Doc View Source GetPrivateDataText(Guid) Gets an application-defined data from the object that is associated with a GUID. Declaration public string GetPrivateDataText(Guid name) Parameters Type Name Description Guid name A GUID identifying the data. Returns Type Description String The object's text. | Improve this Doc View Source Release() Releases the managed reference to the COM DXGI interface. Declaration public void Release() | Improve this Doc View Source SetPrivateDataText(Guid, String) Sets an application-defined data to the object and associates that data with a GUID. Declaration public void SetPrivateDataText(Guid name, string text) Parameters Type Name Description Guid name A GUID that identifies the data. String text The object's text. | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DxgiObject to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DxgiObject value) Parameters Type Name Description DxgiObject value A DXGI object. Returns Type Description Boolean A boolean Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.html",
    "title": "Enum DxgiModeScanlineOrder",
    "keywords": "Enum DxgiModeScanlineOrder Indicate the method the raster uses to create an image on a surface. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiModeScanlineOrder Fields Name Description LowerFieldFirst The image is created beginning with the lower field. Progressive The image is created from the first scanline to the last without skipping any. Unspecified Scanline order is unspecified. UpperFieldFirst The image is created beginning with the upper field."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiModeScaling.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiModeScaling.html",
    "title": "Enum DxgiModeScaling",
    "keywords": "Enum DxgiModeScaling Indicate how an image is stretched to fit a given monitor's resolution. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiModeScaling Fields Name Description Centered Specifies no scaling. The image is centered on the display. Stretched Specifies stretched scaling. Unspecified Unspecified scaling."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.html",
    "title": "Enum DxgiModeRotation",
    "keywords": "Enum DxgiModeRotation Indicate how the back buffers should be rotated to fit the physical rotation of a monitor. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiModeRotation Fields Name Description Identity Specifies no rotation. Rotate180 Specifies 180 degrees of rotation. Rotate270 Specifies 270 degrees of rotation. Rotate90 Specifies 90 degrees of rotation. Unspecified Unspecified rotation."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.html",
    "title": "Enum DxgiEnumModes",
    "keywords": "Enum DxgiEnumModes Options for enumerating display modes. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiEnumModes Fields Name Description DisabledStereo Include stereo modes that are hidden because the user has disabled stereo. Control panel applications can use this option to show stereo capabilities that have been disabled as part of a user interface that enables and disables stereo. Interlaced Include interlaced modes. None Include centered modes. Scaling Include stretched-scaling modes. Stereo Include stereo modes."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiDeviceSubObject.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiDeviceSubObject.html",
    "title": "Class DxgiDeviceSubObject",
    "keywords": "Class DxgiDeviceSubObject Inherited from objects that are tied to the device so that they can retrieve a pointer to it. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiKeyedMutex DxgiResource DxgiResource1 DxgiResource2 DxgiResource3 DxgiSurface DxgiSurface1 DxgiSurface2 DxgiSurface3 DxgiSwapChain DxgiSwapChain1 DxgiSwapChain2 DxgiSwapChain3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.Handle DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public abstract class DxgiDeviceSubObject : DxgiObject, IDisposable, IDxgiReleasable Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice3.html",
    "title": "Class DxgiDevice3",
    "keywords": "Class DxgiDevice3 The IDXGIDevice3 interface implements a derived class for DXGI objects that produce image data. The interface exposes a method to trim graphics memory usage by the DXGI device. Inheritance Object DxgiObject DxgiDevice3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiDevice3 : DxgiObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiDevice3(Object) Initializes a new instance of the DxgiDevice3 class. Declaration public DxgiDevice3(object device) Parameters Type Name Description Object device A device interface which implements the IDxgiDevice3 interface. Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source MaximumFrameLatency Gets or sets the number of frames that the system is allowed to queue for rendering. Declaration public uint MaximumFrameLatency { get; set; } Property Value Type Description UInt32 The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16. Methods | Improve this Doc View Source GetAdapter() Returns the adapter for the specified device. Declaration public DxgiAdapter3 GetAdapter() Returns Type Description DxgiAdapter3 The adapter for the specified device. | Improve this Doc View Source OfferResources(DxgiResource3[], DxgiOfferResourcePriority) Allows the operating system to free the video memory of resources by discarding their content. Declaration public void OfferResources(DxgiResource3[] resources, DxgiOfferResourcePriority priority) Parameters Type Name Description DxgiResource3 [] resources An array of pointers to IDXGIResource interfaces for the resources to offer. DxgiOfferResourcePriority priority A DXGI_OFFER_RESOURCE_PRIORITY -typed value that indicates how valuable data is. | Improve this Doc View Source QueryResourceResidency(DxgiResource3[]) Gets the residency status of an array of resources. Declaration public DxgiResidency[] QueryResourceResidency(DxgiResource3[] resources) Parameters Type Name Description DxgiResource3 [] resources An array of IDXGIResource interfaces. Returns Type Description DxgiResidency [] An array of DXGI_RESIDENCY flags. Each element describes the residency status for corresponding element in the resources argument array. | Improve this Doc View Source ReclaimResources(DxgiResource3[]) Restores access to resources that were previously offered by calling IDXGIDevice2::OfferResources . Declaration public bool[] ReclaimResources(DxgiResource3[] resources) Parameters Type Name Description DxgiResource3 [] resources An array of pointers to IDXGIResource interfaces for the resources to reclaim. Returns Type Description Boolean [] A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to TRUE if the corresponding resource’s content was discarded and is now undefined, or to FALSE if the corresponding resource’s old content is still intact. The caller can pass in NULL , if the caller intends to fill the resources with new content regardless of whether the old content was discarded. | Improve this Doc View Source Trim() Trims the graphics memory allocated by the IDXGIDevice3 DXGI device on the app's behalf. Declaration public void Trim() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice2.html",
    "title": "Class DxgiDevice2",
    "keywords": "Class DxgiDevice2 The IDXGIDevice2 interface implements a derived class for DXGI objects that produce image data. The interface exposes methods to block CPU processing until the GPU completes processing, and to offer resources to the operating system. Inheritance Object DxgiObject DxgiDevice2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiDevice2 : DxgiObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiDevice2(Object) Initializes a new instance of the DxgiDevice2 class. Declaration public DxgiDevice2(object device) Parameters Type Name Description Object device A device interface which implements the IDxgiDevice2 interface. Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source MaximumFrameLatency Gets or sets the number of frames that the system is allowed to queue for rendering. Declaration public uint MaximumFrameLatency { get; set; } Property Value Type Description UInt32 The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16. Methods | Improve this Doc View Source GetAdapter() Returns the adapter for the specified device. Declaration public DxgiAdapter2 GetAdapter() Returns Type Description DxgiAdapter2 The adapter for the specified device. | Improve this Doc View Source OfferResources(DxgiResource2[], DxgiOfferResourcePriority) Allows the operating system to free the video memory of resources by discarding their content. Declaration public void OfferResources(DxgiResource2[] resources, DxgiOfferResourcePriority priority) Parameters Type Name Description DxgiResource2 [] resources An array of pointers to IDXGIResource interfaces for the resources to offer. DxgiOfferResourcePriority priority A DXGI_OFFER_RESOURCE_PRIORITY -typed value that indicates how valuable data is. | Improve this Doc View Source QueryResourceResidency(DxgiResource2[]) Gets the residency status of an array of resources. Declaration public DxgiResidency[] QueryResourceResidency(DxgiResource2[] resources) Parameters Type Name Description DxgiResource2 [] resources An array of IDXGIResource interfaces. Returns Type Description DxgiResidency [] An array of DXGI_RESIDENCY flags. Each element describes the residency status for corresponding element in the resources argument array. | Improve this Doc View Source ReclaimResources(DxgiResource2[]) Restores access to resources that were previously offered by calling IDXGIDevice2::OfferResources . Declaration public bool[] ReclaimResources(DxgiResource2[] resources) Parameters Type Name Description DxgiResource2 [] resources An array of pointers to IDXGIResource interfaces for the resources to reclaim. Returns Type Description Boolean [] A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to TRUE if the corresponding resource’s content was discarded and is now undefined, or to FALSE if the corresponding resource’s old content is still intact. The caller can pass in NULL , if the caller intends to fill the resources with new content regardless of whether the old content was discarded. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice1.html",
    "title": "Class DxgiDevice1",
    "keywords": "Class DxgiDevice1 An IDXGIDevice1 interface implements a derived class for DXGI objects that produce image data. Inheritance Object DxgiObject DxgiDevice1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiDevice1 : DxgiObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiDevice1(Object) Initializes a new instance of the DxgiDevice1 class. Declaration public DxgiDevice1(object device) Parameters Type Name Description Object device A device interface which implements the IDxgiDevice1 interface. Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source MaximumFrameLatency Gets or sets the number of frames that the system is allowed to queue for rendering. Declaration public uint MaximumFrameLatency { get; set; } Property Value Type Description UInt32 The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16. Methods | Improve this Doc View Source GetAdapter() Returns the adapter for the specified device. Declaration public DxgiAdapter1 GetAdapter() Returns Type Description DxgiAdapter1 The adapter for the specified device. | Improve this Doc View Source QueryResourceResidency(DxgiResource1[]) Gets the residency status of an array of resources. Declaration public DxgiResidency[] QueryResourceResidency(DxgiResource1[] resources) Parameters Type Name Description DxgiResource1 [] resources An array of IDXGIResource interfaces. Returns Type Description DxgiResidency [] An array of DXGI_RESIDENCY flags. Each element describes the residency status for corresponding element in the resources argument array. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ClearOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ClearOptions.html",
    "title": "Enum D3D11ClearOptions",
    "keywords": "Enum D3D11ClearOptions Specifies the parts of the depth stencil to clear. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11ClearOptions Fields Name Description Depth Clear the depth buffer. None No option. Stencil Clear the stencil buffer."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.html",
    "title": "Struct D3D11BufferExSrv",
    "keywords": "Struct D3D11BufferExSrv Describes the elements in a raw buffer resource to use in a shader resource view. Implements IEquatable < D3D11BufferExSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BufferExSrv : IEquatable<D3D11BufferExSrv> Properties | Improve this Doc View Source FirstElement Gets or sets the index of the first element to be accessed by the view. Declaration public uint FirstElement { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source NumElements Gets or sets the number of elements in the resource. Declaration public uint NumElements { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Options Gets or sets the view options for the buffer. Declaration public D3D11BufferExSrvOptions Options { get; set; } Property Value Type Description D3D11BufferExSrvOptions Methods | Improve this Doc View Source Equals(D3D11BufferExSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BufferExSrv other) Parameters Type Name Description D3D11BufferExSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11BufferExSrv, D3D11BufferExSrv) Compares two D3D11BufferExSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BufferExSrv left, D3D11BufferExSrv right) Parameters Type Name Description D3D11BufferExSrv left The left D3D11BufferExSrv to compare. D3D11BufferExSrv right The right D3D11BufferExSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BufferExSrv, D3D11BufferExSrv) Compares two D3D11BufferExSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BufferExSrv left, D3D11BufferExSrv right) Parameters Type Name Description D3D11BufferExSrv left The left D3D11BufferExSrv to compare. D3D11BufferExSrv right The right D3D11BufferExSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1InterpolationModeDefinition.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1InterpolationModeDefinition.html",
    "title": "Enum D2D1InterpolationModeDefinition",
    "keywords": "Enum D2D1InterpolationModeDefinition This defines the superset of interpolation mode supported by D2D APIs and built-in effects Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1InterpolationModeDefinition Fields Name Description Anisotropic Uses anisotropic filtering to sample a pattern according to the transformed shape of the bitmap. Cubic Uses a 16 sample cubic kernel for interpolation. This mode uses the most processing time, but outputs a higher quality image. Fant Fant interpolation mode. HighQualityCubic Uses a variable size high quality cubic kernel to perform a pre-downscale the image if downscaling is involved in the transform matrix. Then uses the cubic interpolation mode for the final output. Linear Uses a four point sample and linear interpolation. This mode uses more processing time than the nearest neighbor mode, but outputs a higher quality image. MipmapLinear Mipmap Linear interpolation mode. MultiSampleLinear Uses 4 linear samples within a single pixel for good edge anti-aliasing. This mode is good for scaling down by small amounts on images with few pixels. NearestNeighbor Samples the nearest single point and uses that exact color. This mode uses less processing time, but outputs the lowest quality image."
  },
  "index.html": {
    "href": "index.html",
    "title": "JeremyAnsel.DirectX",
    "keywords": "JeremyAnsel.DirectX JeremyAnsel.DirectX.DXMath: JeremyAnsel.DirectX.Dxgi: JeremyAnsel.DirectX.DWrite: JeremyAnsel.DirectX.D2D1: JeremyAnsel.DirectX.D3D10: JeremyAnsel.DirectX.D3D11: JeremyAnsel.DirectX.D3DCompiler: JeremyAnsel.DirectX contains managed wrappers around DirectX APIs."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "JeremyAnsel.DirectX",
    "keywords": "JeremyAnsel.DirectX This is the documentation for JeremyAnsel.DirectX. JeremyAnsel.DirectX contains managed wrappers around DirectX APIs."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiDevice.html",
    "title": "Class DxgiDevice",
    "keywords": "Class DxgiDevice An IDXGIDevice interface implements a derived class for DXGI objects that produce image data. Inheritance Object DxgiObject DxgiDevice Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiDevice : DxgiObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiDevice(Object) Initializes a new instance of the DxgiDevice class. Declaration public DxgiDevice(object device) Parameters Type Name Description Object device A device interface which implements the IDxgiDevice interface. Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source GetAdapter() Returns the adapter for the specified device. Declaration public DxgiAdapter GetAdapter() Returns Type Description DxgiAdapter The adapter for the specified device. | Improve this Doc View Source QueryResourceResidency(DxgiResource[]) Gets the residency status of an array of resources. Declaration public DxgiResidency[] QueryResourceResidency(DxgiResource[] resources) Parameters Type Name Description DxgiResource [] resources An array of IDXGIResource interfaces. Returns Type Description DxgiResidency [] An array of DXGI_RESIDENCY flags. Each element describes the residency status for corresponding element in the resources argument array. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions.html",
    "title": "Enum DxgiCreateFactoryOptions",
    "keywords": "Enum DxgiCreateFactoryOptions Options for factory creation. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiCreateFactoryOptions Fields Name Description Debug Debug factory. None No option."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.html",
    "title": "Enum DxgiCpuAccess",
    "keywords": "Enum DxgiCpuAccess CPU data access patterns. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiCpuAccess Fields Name Description Dynamic Frequent CPU write-only access, high-performance GPU read-only access. None Maps should be validated to fail on this access. ReadWrite Frequent CPU read/write access, non-optimal GPU read-only access. Scratch Frequent CPU read/write access, no GPU access."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.html",
    "title": "Enum DxgiComputePreemptionGranularity",
    "keywords": "Enum DxgiComputePreemptionGranularity Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current compute task. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiComputePreemptionGranularity Fields Name Description DispatchBoundary Indicates the preemption granularity as a dispatch. A dispatch is a part of a compute packet. DmaBufferBoundary Indicates the preemption granularity as a compute packet. InstructionBoundary Indicates the preemption granularity as a compute instruction in a thread. ThreadBoundary Indicates the preemption granularity as a thread in a thread group. A thread is a part of a thread group. ThreadGroupBoundary Indicates the preemption granularity as a thread group. A thread group is a part of a dispatch."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.html",
    "title": "Struct DxgiColorRgba",
    "keywords": "Struct DxgiColorRgba The structure represents a color value with alpha, which is used for transparency. Implements IEquatable < DxgiColorRgba > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiColorRgba : IEquatable<DxgiColorRgba> Properties | Improve this Doc View Source Alpha Gets or sets value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque. Declaration public float Alpha { get; set; } Property Value Type Description Single | Improve this Doc View Source Blue Gets or sets a value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present. Declaration public float Blue { get; set; } Property Value Type Description Single | Improve this Doc View Source Green Gets or sets a value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present. Declaration public float Green { get; set; } Property Value Type Description Single | Improve this Doc View Source Red Gets or sets a value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present. Declaration public float Red { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DxgiColorRgba) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiColorRgba other) Parameters Type Name Description DxgiColorRgba other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiColorRgba, DxgiColorRgba) Compares two DxgiColorRgba objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiColorRgba left, DxgiColorRgba right) Parameters Type Name Description DxgiColorRgba left The left DxgiColorRgba to compare. DxgiColorRgba right The right DxgiColorRgba to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiColorRgba, DxgiColorRgba) Compares two DxgiColorRgba objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiColorRgba left, DxgiColorRgba right) Parameters Type Name Description DxgiColorRgba left The left DxgiColorRgba to compare. DxgiColorRgba right The right DxgiColorRgba to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.html",
    "title": "Struct DxgiColorRgb",
    "keywords": "Struct DxgiColorRgb Represents an RGB color. Implements IEquatable < DxgiColorRgb > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiColorRgb : IEquatable<DxgiColorRgb> Properties | Improve this Doc View Source Blue Gets or sets a value representing the color of the blue component. The range of this value is between 0 and 1. Declaration public float Blue { get; set; } Property Value Type Description Single | Improve this Doc View Source Green Gets or sets a value representing the color of the green component. The range of this value is between 0 and 1. Declaration public float Green { get; set; } Property Value Type Description Single | Improve this Doc View Source Red Gets or sets a value representing the color of the red component. The range of this value is between 0 and 1. Declaration public float Red { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DxgiColorRgb) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiColorRgb other) Parameters Type Name Description DxgiColorRgb other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiColorRgb, DxgiColorRgb) Compares two DxgiColorRgb objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiColorRgb left, DxgiColorRgb right) Parameters Type Name Description DxgiColorRgb left The left DxgiColorRgb to compare. DxgiColorRgb right The right DxgiColorRgb to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiColorRgb, DxgiColorRgb) Compares two DxgiColorRgb objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiColorRgb left, DxgiColorRgb right) Parameters Type Name Description DxgiColorRgb left The left DxgiColorRgb to compare. DxgiColorRgb right The right DxgiColorRgb to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.html",
    "title": "Enum DxgiAlphaMode",
    "keywords": "Enum DxgiAlphaMode Identifies the alpha value, transparency behavior, of a surface. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiAlphaMode Fields Name Description Ignore Indicates to ignore the transparency behavior. Premultiplied Indicates that the transparency behavior is pre-multiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and pre-multiplied alpha. Typically, no color channel value is greater than the alpha channel value. If a color channel value in a pre-multiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend. Straight Indicates that the transparency behavior is not pre-multiplied. The alpha channel indicates the transparency of the color. Unspecified Indicates that the transparency behavior is not specified."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterType.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterType.html",
    "title": "Enum DxgiAdapterType",
    "keywords": "Enum DxgiAdapterType Identifies the type of DXGI adapter. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiAdapterType Fields Name Description None Specifies no flags. Remote Specifies a remote adapter. Software Specifies a software adapter."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.html",
    "title": "Struct DxgiAdapterDesc2",
    "keywords": "Struct DxgiAdapterDesc2 Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.2. Implements IEquatable < DxgiAdapterDesc2 > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiAdapterDesc2 : IEquatable<DxgiAdapterDesc2> Properties | Improve this Doc View Source AdapterDescription Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”. Declaration public string AdapterDescription { get; } Property Value Type Description String | Improve this Doc View Source AdapterLuid Gets a unique value that identifies the adapter. Declaration public ulong AdapterLuid { get; } Property Value Type Description UInt64 | Improve this Doc View Source AdapterType Gets a value of the DxgiAdapterType enumeration that describes the adapter type. Declaration public DxgiAdapterType AdapterType { get; } Property Value Type Description DxgiAdapterType | Improve this Doc View Source ComputePreemptionGranularity Gets a value of the DxgiComputePreemptionGranularity enumeration that describes the granularity level at which the GPU can be preempted from performing its current compute task. Declaration public DxgiComputePreemptionGranularity ComputePreemptionGranularity { get; } Property Value Type Description DxgiComputePreemptionGranularity | Improve this Doc View Source DedicatedSystemMemory Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time. Declaration public ulong DedicatedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DedicatedVideoMemory Gets the number of bytes of dedicated video memory that are not shared with the CPU. Declaration public ulong DedicatedVideoMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DeviceId Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0. Declaration public uint DeviceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source GraphicsPreemptionGranularity Gets a value of the DxgiGraphicsPreemptionGranularity enumeration that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task. Declaration public DxgiGraphicsPreemptionGranularity GraphicsPreemptionGranularity { get; } Property Value Type Description DxgiGraphicsPreemptionGranularity | Improve this Doc View Source Revision Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0. Declaration public uint Revision { get; } Property Value Type Description UInt32 | Improve this Doc View Source SharedSystemMemory Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional. Declaration public ulong SharedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source SubSysId Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0. Declaration public uint SubSysId { get; } Property Value Type Description UInt32 | Improve this Doc View Source VendorId Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0. Declaration public uint VendorId { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiAdapterDesc2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiAdapterDesc2 other) Parameters Type Name Description DxgiAdapterDesc2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiAdapterDesc2, DxgiAdapterDesc2) Compares two DxgiAdapterDesc2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiAdapterDesc2 left, DxgiAdapterDesc2 right) Parameters Type Name Description DxgiAdapterDesc2 left The left DxgiAdapterDesc2 to compare. DxgiAdapterDesc2 right The right DxgiAdapterDesc2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiAdapterDesc2, DxgiAdapterDesc2) Compares two DxgiAdapterDesc2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiAdapterDesc2 left, DxgiAdapterDesc2 right) Parameters Type Name Description DxgiAdapterDesc2 left The left DxgiAdapterDesc2 to compare. DxgiAdapterDesc2 right The right DxgiAdapterDesc2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.html",
    "title": "Struct DxgiAdapterDesc1",
    "keywords": "Struct DxgiAdapterDesc1 Describes an adapter (or video card) using DXGI 1.1. Implements IEquatable < DxgiAdapterDesc1 > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiAdapterDesc1 : IEquatable<DxgiAdapterDesc1> Properties | Improve this Doc View Source AdapterDescription Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”. Declaration public string AdapterDescription { get; } Property Value Type Description String | Improve this Doc View Source AdapterLuid Gets a unique value that identifies the adapter. Declaration public ulong AdapterLuid { get; } Property Value Type Description UInt64 | Improve this Doc View Source AdapterType Gets a value of the DxgiAdapterType enumeration that describes the adapter type. Declaration public DxgiAdapterType AdapterType { get; } Property Value Type Description DxgiAdapterType | Improve this Doc View Source DedicatedSystemMemory Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time. Declaration public ulong DedicatedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DedicatedVideoMemory Gets the number of bytes of dedicated video memory that are not shared with the CPU. Declaration public ulong DedicatedVideoMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DeviceId Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0. Declaration public uint DeviceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source Revision Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0. Declaration public uint Revision { get; } Property Value Type Description UInt32 | Improve this Doc View Source SharedSystemMemory Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional. Declaration public ulong SharedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source SubSysId Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0. Declaration public uint SubSysId { get; } Property Value Type Description UInt32 | Improve this Doc View Source VendorId Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0. Declaration public uint VendorId { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiAdapterDesc1) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiAdapterDesc1 other) Parameters Type Name Description DxgiAdapterDesc1 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiAdapterDesc1, DxgiAdapterDesc1) Compares two DxgiAdapterDesc1 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiAdapterDesc1 left, DxgiAdapterDesc1 right) Parameters Type Name Description DxgiAdapterDesc1 left The left DxgiAdapterDesc1 to compare. DxgiAdapterDesc1 right The right DxgiAdapterDesc1 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiAdapterDesc1, DxgiAdapterDesc1) Compares two DxgiAdapterDesc1 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiAdapterDesc1 left, DxgiAdapterDesc1 right) Parameters Type Name Description DxgiAdapterDesc1 left The left DxgiAdapterDesc1 to compare. DxgiAdapterDesc1 right The right DxgiAdapterDesc1 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.html",
    "title": "Struct DxgiAdapterDesc",
    "keywords": "Struct DxgiAdapterDesc Describes an adapter (or video card) by using DXGI 1.0. Implements IEquatable < DxgiAdapterDesc > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiAdapterDesc : IEquatable<DxgiAdapterDesc> Properties | Improve this Doc View Source AdapterDescription Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”. Declaration public string AdapterDescription { get; } Property Value Type Description String | Improve this Doc View Source AdapterLuid Gets a unique value that identifies the adapter. Declaration public ulong AdapterLuid { get; } Property Value Type Description UInt64 | Improve this Doc View Source DedicatedSystemMemory Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time. Declaration public ulong DedicatedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DedicatedVideoMemory Gets the number of bytes of dedicated video memory that are not shared with the CPU. Declaration public ulong DedicatedVideoMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source DeviceId Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0. Declaration public uint DeviceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source Revision Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0. Declaration public uint Revision { get; } Property Value Type Description UInt32 | Improve this Doc View Source SharedSystemMemory Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional. Declaration public ulong SharedSystemMemory { get; } Property Value Type Description UInt64 | Improve this Doc View Source SubSysId Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0. Declaration public uint SubSysId { get; } Property Value Type Description UInt32 | Improve this Doc View Source VendorId Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0. Declaration public uint VendorId { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiAdapterDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiAdapterDesc other) Parameters Type Name Description DxgiAdapterDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiAdapterDesc, DxgiAdapterDesc) Compares two DxgiAdapterDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiAdapterDesc left, DxgiAdapterDesc right) Parameters Type Name Description DxgiAdapterDesc left The left DxgiAdapterDesc to compare. DxgiAdapterDesc right The right DxgiAdapterDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiAdapterDesc, DxgiAdapterDesc) Compares two DxgiAdapterDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiAdapterDesc left, DxgiAdapterDesc right) Parameters Type Name Description DxgiAdapterDesc left The left DxgiAdapterDesc to compare. DxgiAdapterDesc right The right DxgiAdapterDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextFormat.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextFormat.html",
    "title": "Class DWriteTextFormat",
    "keywords": "Class DWriteTextFormat The format of text used for text layout. Inheritance Object DWriteTextFormat Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteTextFormat : IDisposable, IDWriteReleasable Remarks This object may not be thread-safe and it may carry the state of text format change. Properties | Improve this Doc View Source FlowDirection Gets or sets paragraph flow direction. Declaration public DWriteFlowDirection FlowDirection { get; set; } Property Value Type Description DWriteFlowDirection Remarks The flow direction must be perpendicular to the reading direction. Setting both to a vertical direction or both to horizontal yields DWRITE_E_FLOWDIRECTIONCONFLICTS when calling GetMetrics or Draw. | Improve this Doc View Source FontSize Gets the font em height. Declaration public float FontSize { get; } Property Value Type Description Single | Improve this Doc View Source FontStretch Gets the font stretch. Declaration public DWriteFontStretch FontStretch { get; } Property Value Type Description DWriteFontStretch | Improve this Doc View Source FontStyle Gets the font style. Declaration public DWriteFontStyle FontStyle { get; } Property Value Type Description DWriteFontStyle | Improve this Doc View Source FontWeight Gets the font weight. Declaration public DWriteFontWeight FontWeight { get; } Property Value Type Description DWriteFontWeight | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object | Improve this Doc View Source IncrementalTabStop Gets or sets the incremental tab stop position. Declaration public float IncrementalTabStop { get; set; } Property Value Type Description Single | Improve this Doc View Source ParagraphAlignment Gets or sets the alignment option of paragraph relative to layout box's top and bottom edge. Declaration public DWriteParagraphAlignment ParagraphAlignment { get; set; } Property Value Type Description DWriteParagraphAlignment | Improve this Doc View Source ReadingDirection Gets or sets the paragraph reading direction. Declaration public DWriteReadingDirection ReadingDirection { get; set; } Property Value Type Description DWriteReadingDirection Remarks The flow direction must be perpendicular to the reading direction. Setting both to a vertical direction or both to horizontal yields DWRITE_E_FLOWDIRECTIONCONFLICTS when calling GetMetrics or Draw. | Improve this Doc View Source TextAlignment Gets or sets the alignment option of text relative to layout box's leading and trailing edge. Declaration public DWriteTextAlignment TextAlignment { get; set; } Property Value Type Description DWriteTextAlignment | Improve this Doc View Source WordWrapping Gets or sets the word wrapping option. Declaration public DWriteWordWrapping WordWrapping { get; set; } Property Value Type Description DWriteWordWrapping Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFontCollection() Get the font collection. Declaration public DWriteFontCollection GetFontCollection() Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetFontFamilyName() Get a copy of the font family name. Declaration public string GetFontFamilyName() Returns Type Description String String | Improve this Doc View Source GetLineSpaceing(out DWriteLineSpacingMethod, out Single, out Single) Get line spacing. Declaration public void GetLineSpaceing(out DWriteLineSpacingMethod lineSpacingMethod, out float lineSpacing, out float baseline) Parameters Type Name Description DWriteLineSpacingMethod lineSpacingMethod How line height is determined. Single lineSpacing The line height, or rather distance between one baseline to another. Single baseline Distance from top of line to baseline. | Improve this Doc View Source GetLocaleName() Get a copy of the locale name. Declaration public string GetLocaleName() Returns Type Description String String | Improve this Doc View Source GetTrimming() Get trimming options for text overflowing the layout width. Declaration public DWriteTrimming GetTrimming() Returns Type Description DWriteTrimming DWriteTrimming | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source SetLineSpacing(DWriteLineSpacingMethod, Single, Single) Set line spacing. Declaration public void SetLineSpacing(DWriteLineSpacingMethod lineSpacingMethod, float lineSpacing, float baseline) Parameters Type Name Description DWriteLineSpacingMethod lineSpacingMethod How to determine line height. Single lineSpacing The line height, or rather distance between one baseline to another. Single baseline Distance from top of line to baseline. A reasonable ratio to lineSpacing is 80%. Remarks For the default method, spacing depends solely on the content. For uniform spacing, the given line height will override the content. | Improve this Doc View Source SetTrimming(DWriteTrimming) Set trimming options for any trailing text exceeding the layout width or for any far text exceeding the layout height. Declaration public void SetTrimming(DWriteTrimming trimmingOptions) Parameters Type Name Description DWriteTrimming trimmingOptions Text trimming options. | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteTextFormat to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteTextFormat value) Parameters Type Name Description DWriteTextFormat value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextAlignment.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextAlignment.html",
    "title": "Enum DWriteTextAlignment",
    "keywords": "Enum DWriteTextAlignment Alignment of paragraph text along the reading direction axis relative to the leading and trailing edge of the layout box. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteTextAlignment Fields Name Description Center The center of the paragraph text is aligned to the center of the layout box. Justified Align text to the leading side, and also justify text to fill the lines. Leading The leading edge of the paragraph text is aligned to the layout box's leading edge. Trailing The trailing edge of the paragraph text is aligned to the layout box's trailing edge."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteStrikethrough.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteStrikethrough.html",
    "title": "Struct DWriteStrikethrough",
    "keywords": "Struct DWriteStrikethrough The DWRITE_STRIKETHROUGH structure contains information about the size and placement of strikethroughs. All coordinates are in device independent pixels (DIPs). Implements IEquatable < DWriteStrikethrough > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteStrikethrough : IEquatable<DWriteStrikethrough> Properties | Improve this Doc View Source FlowDirection Gets or sets the flow direction of the text associated with the strikethrough. This value is used to interpret whether the thickness value advances top to bottom, left to right, or right to left. Declaration public DWriteFlowDirection FlowDirection { get; set; } Property Value Type Description DWriteFlowDirection | Improve this Doc View Source LocaleName Gets or sets the locale of the range. Can be pertinent where the locale affects the style. Declaration public string LocaleName { get; set; } Property Value Type Description String | Improve this Doc View Source MeasuringMode Gets or sets the measuring mode can be useful to the renderer to determine how underlines are rendered, e.g. rounding the thickness to a whole pixel in GDI-compatible modes. Declaration public DWriteMeasuringMode MeasuringMode { get; set; } Property Value Type Description DWriteMeasuringMode | Improve this Doc View Source Offset Gets or sets the offset of the strikethrough from the baseline. A positive offset represents a position below the baseline and a negative offset is above. Declaration public float Offset { get; set; } Property Value Type Description Single | Improve this Doc View Source ReadingDirection Gets or sets the reading direction of the text associated with the strikethrough. This value is used to interpret whether the width value runs horizontally or vertically. Declaration public DWriteReadingDirection ReadingDirection { get; set; } Property Value Type Description DWriteReadingDirection | Improve this Doc View Source Thickness Gets or sets the thickness of the strikethrough, measured perpendicular to the baseline. Declaration public float Thickness { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the strikethrough, measured parallel to the baseline. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteStrikethrough) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteStrikethrough other) Parameters Type Name Description DWriteStrikethrough other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteStrikethrough, DWriteStrikethrough) Compares two DWriteStrikethrough objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteStrikethrough left, DWriteStrikethrough right) Parameters Type Name Description DWriteStrikethrough left The left DWriteStrikethrough to compare. DWriteStrikethrough right The right DWriteStrikethrough to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteStrikethrough, DWriteStrikethrough) Compares two DWriteStrikethrough objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteStrikethrough left, DWriteStrikethrough right) Parameters Type Name Description DWriteStrikethrough left The left DWriteStrikethrough to compare. DWriteStrikethrough right The right DWriteStrikethrough to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteSize.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteSize.html",
    "title": "Struct DWriteSize",
    "keywords": "Struct DWriteSize Specifies the width and height of a rectangle. Implements IEquatable < DWriteSize > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteSize : IEquatable<DWriteSize> Constructors | Improve this Doc View Source DWriteSize(Int32, Int32) Initializes a new instance of the DWriteSize struct. Declaration public DWriteSize(int width, int height) Parameters Type Name Description Int32 width The rectangle's width. Int32 height The rectangle's height. Properties | Improve this Doc View Source Height Gets or sets the rectangle's height. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Width Gets or sets the rectangle's width. Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DWriteSize) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteSize other) Parameters Type Name Description DWriteSize other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DWriteSize, DWriteSize) Compares two DWriteSize objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteSize left, DWriteSize right) Parameters Type Name Description DWriteSize left The left DWriteSize to compare. DWriteSize right The right DWriteSize to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteSize, DWriteSize) Compares two DWriteSize objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteSize left, DWriteSize right) Parameters Type Name Description DWriteSize left The left DWriteSize to compare. DWriteSize right The right DWriteSize to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteShapingTextProperties.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteShapingTextProperties.html",
    "title": "Struct DWriteShapingTextProperties",
    "keywords": "Struct DWriteShapingTextProperties Shaping output properties per input character. Implements IEquatable < DWriteShapingTextProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteShapingTextProperties : IEquatable<DWriteShapingTextProperties> Properties | Improve this Doc View Source IsShapedAlone Gets or sets a value indicating whether this character can be shaped independently from the others (usually set for the space character). Declaration public bool IsShapedAlone { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(DWriteShapingTextProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteShapingTextProperties other) Parameters Type Name Description DWriteShapingTextProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteShapingTextProperties, DWriteShapingTextProperties) Compares two DWriteShapingTextProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteShapingTextProperties left, DWriteShapingTextProperties right) Parameters Type Name Description DWriteShapingTextProperties left The left DWriteShapingTextProperties to compare. DWriteShapingTextProperties right The right DWriteShapingTextProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteShapingTextProperties, DWriteShapingTextProperties) Compares two DWriteShapingTextProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteShapingTextProperties left, DWriteShapingTextProperties right) Parameters Type Name Description DWriteShapingTextProperties left The left DWriteShapingTextProperties to compare. DWriteShapingTextProperties right The right DWriteShapingTextProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteShapingGlyphProperties.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteShapingGlyphProperties.html",
    "title": "Struct DWriteShapingGlyphProperties",
    "keywords": "Struct DWriteShapingGlyphProperties Shaping output properties per output glyph. Implements IEquatable < DWriteShapingGlyphProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteShapingGlyphProperties : IEquatable<DWriteShapingGlyphProperties> Properties | Improve this Doc View Source IsClusterStart Gets or sets a value indicating whether the glyph is the first of a cluster. Declaration public bool IsClusterStart { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDiacritic Gets or sets a value indicating whether the glyph is a diacritic. Declaration public bool IsDiacritic { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsZeroWidthSpace Gets or sets a value indicating whether the glyph has no width, blank, ZWJ, ZWNJ etc. Declaration public bool IsZeroWidthSpace { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Justification Gets or sets the justification class, whether to use spacing, kashidas, or another method. This exists for backwards compatibility with Uniscribe's SCRIPT_JUSTIFY enumeration. Declaration public ushort Justification { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(DWriteShapingGlyphProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteShapingGlyphProperties other) Parameters Type Name Description DWriteShapingGlyphProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteShapingGlyphProperties, DWriteShapingGlyphProperties) Compares two DWriteShapingGlyphProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteShapingGlyphProperties left, DWriteShapingGlyphProperties right) Parameters Type Name Description DWriteShapingGlyphProperties left The left DWriteShapingGlyphProperties to compare. DWriteShapingGlyphProperties right The right DWriteShapingGlyphProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteShapingGlyphProperties, DWriteShapingGlyphProperties) Compares two DWriteShapingGlyphProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteShapingGlyphProperties left, DWriteShapingGlyphProperties right) Parameters Type Name Description DWriteShapingGlyphProperties left The left DWriteShapingGlyphProperties to compare. DWriteShapingGlyphProperties right The right DWriteShapingGlyphProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteScriptShape.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteScriptShape.html",
    "title": "Enum DWriteScriptShape",
    "keywords": "Enum DWriteScriptShape Indicates additional shaping requirements for text. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteScriptShape Fields Name Description Default No additional shaping requirement. Text is shaped with the writing system default behavior. NoVisual Text should leave no visual on display i.e. control or format control characters."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteScriptAnalysis.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteScriptAnalysis.html",
    "title": "Struct DWriteScriptAnalysis",
    "keywords": "Struct DWriteScriptAnalysis Association of text and its writing system script as well as some display attributes. Implements IEquatable < DWriteScriptAnalysis > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteScriptAnalysis : IEquatable<DWriteScriptAnalysis> Constructors | Improve this Doc View Source DWriteScriptAnalysis(UInt16, DWriteScriptShape) Initializes a new instance of the DWriteScriptAnalysis struct. Declaration public DWriteScriptAnalysis(ushort script, DWriteScriptShape shapes) Parameters Type Name Description UInt16 script Zero-based index representation of writing system script. DWriteScriptShape shapes Additional shaping requirement of text. Properties | Improve this Doc View Source Script Gets or sets the zero-based index representation of writing system script. Declaration public ushort Script { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Shapes Gets or sets the additional shaping requirement of text. Declaration public DWriteScriptShape Shapes { get; set; } Property Value Type Description DWriteScriptShape Methods | Improve this Doc View Source Equals(DWriteScriptAnalysis) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteScriptAnalysis other) Parameters Type Name Description DWriteScriptAnalysis other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteScriptAnalysis, DWriteScriptAnalysis) Compares two DWriteScriptAnalysis objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteScriptAnalysis left, DWriteScriptAnalysis right) Parameters Type Name Description DWriteScriptAnalysis left The left DWriteScriptAnalysis to compare. DWriteScriptAnalysis right The right DWriteScriptAnalysis to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteScriptAnalysis, DWriteScriptAnalysis) Compares two DWriteScriptAnalysis objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteScriptAnalysis left, DWriteScriptAnalysis right) Parameters Type Name Description DWriteScriptAnalysis left The left DWriteScriptAnalysis to compare. DWriteScriptAnalysis right The right DWriteScriptAnalysis to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteRenderingParams.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteRenderingParams.html",
    "title": "Class DWriteRenderingParams",
    "keywords": "Class DWriteRenderingParams The interface that represents text rendering settings for glyph rasterization and filtering. Inheritance Object DWriteRenderingParams Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteRenderingParams : IDisposable, IDWriteReleasable Constructors | Improve this Doc View Source DWriteRenderingParams(Object) Initializes a new instance of the DWriteRenderingParams class. Declaration public DWriteRenderingParams(object handle) Parameters Type Name Description Object handle A DWrite rendering params interface. Properties | Improve this Doc View Source ClearTypeLevel Gets the ClearType level. Valid values range from 0.0f (no ClearType) to 1.0f (full ClearType). Declaration public float ClearTypeLevel { get; } Property Value Type Description Single | Improve this Doc View Source EnhancedContrast Gets the amount of contrast enhancement. Valid values are greater than or equal to zero. Declaration public float EnhancedContrast { get; } Property Value Type Description Single | Improve this Doc View Source Gamma Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256. Declaration public float Gamma { get; } Property Value Type Description Single | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object | Improve this Doc View Source PixelGeometry Gets the pixel geometry. Declaration public DWritePixelGeometry PixelGeometry { get; } Property Value Type Description DWritePixelGeometry | Improve this Doc View Source RenderingMode Gets the rendering mode. Declaration public DWriteRenderingMode RenderingMode { get; } Property Value Type Description DWriteRenderingMode Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteRenderingParams to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteRenderingParams value) Parameters Type Name Description DWriteRenderingParams value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteRenderingMode.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteRenderingMode.html",
    "title": "Enum DWriteRenderingMode",
    "keywords": "Enum DWriteRenderingMode Represents a method of rendering glyphs. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteRenderingMode Fields Name Description Aliased Specifies that no antialiasing is performed. Each pixel is either set to the foreground color of the text or retains the color of the background. Default Specifies that the rendering mode is determined automatically based on the font and size. GdiClassic Specifies that antialiasing is performed in the horizontal direction and the appearance of glyphs is layout-compatible with GDI using CLEARTYPE_QUALITY. Use DWRITE_MEASURING_MODE_GDI_CLASSIC to get glyph advances. The antialiasing may be either ClearType or grayscale depending on the text antialiasing mode. GdiNatural Specifies that antialiasing is performed in the horizontal direction and the appearance of glyphs is layout-compatible with GDI using CLEARTYPE_NATURAL_QUALITY. Glyph advances are close to the font design advances, but are still rounded to whole pixels. Use DWRITE_MEASURING_MODE_GDI_NATURAL to get glyph advances. The antialiasing may be either ClearType or grayscale depending on the text antialiasing mode. Natural Specifies that antialiasing is performed in the horizontal direction. This rendering mode allows glyphs to be positioned with subpixel precision and is therefore suitable for natural (i.e., resolution-independent) layout. The antialiasing may be either ClearType or grayscale depending on the text antialiasing mode. NaturalSymmetric Similar to natural mode except that antialiasing is performed in both the horizontal and vertical directions. This is typically used at larger sizes to make curves and diagonal lines look smoother. The antialiasing may be either ClearType or grayscale depending on the text antialiasing mode. Outline Specifies that rendering should bypass the rasterizer and use the outlines directly. This is typically used at very large sizes."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteRect.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteRect.html",
    "title": "Struct DWriteRect",
    "keywords": "Struct DWriteRect Defines the coordinates of the upper-left and lower-right corners of a rectangle. Implements IEquatable < DWriteRect > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteRect : IEquatable<DWriteRect> Constructors | Improve this Doc View Source DWriteRect(Int32, Int32, Int32, Int32) Initializes a new instance of the DWriteRect struct. Declaration public DWriteRect(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left The x-coordinate of the upper-left corner of a rectangle. Int32 top The y-coordinate of the upper-left corner of a rectangle. Int32 right The x-coordinate of the lower-right corner of a rectangle. Int32 bottom The y-coordinate of the lower-right corner of a rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of a rectangle. Declaration public int Bottom { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of a rectangle. Declaration public int Left { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of a rectangle. Declaration public int Right { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of a rectangle. Declaration public int Top { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DWriteRect) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteRect other) Parameters Type Name Description DWriteRect other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DWriteRect, DWriteRect) Compares two DWriteRect objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteRect left, DWriteRect right) Parameters Type Name Description DWriteRect left The left DWriteRect to compare. DWriteRect right The right DWriteRect to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteRect, DWriteRect) Compares two DWriteRect objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteRect left, DWriteRect right) Parameters Type Name Description DWriteRect left The left DWriteRect to compare. DWriteRect right The right DWriteRect to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteReadingDirection.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteReadingDirection.html",
    "title": "Enum DWriteReadingDirection",
    "keywords": "Enum DWriteReadingDirection Direction for how reading progresses. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteReadingDirection Fields Name Description BottomToTop Reading progresses from bottom to top. LeftToRight Reading progresses from left to right. RightToLeft Reading progresses from right to left. TopToBottom Reading progresses from top to bottom."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWritePixelGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWritePixelGeometry.html",
    "title": "Enum DWritePixelGeometry",
    "keywords": "Enum DWritePixelGeometry Represents the internal structure of a device pixel (i.e., the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWritePixelGeometry Fields Name Description Bgr Each pixel comprises three vertical stripes, with blue on the left, green in the center, and red on the right. Flat The red, green, and blue color components of each pixel are assumed to occupy the same point. Rgb Each pixel comprises three vertical stripes, with red on the left, green in the center, and blue on the right. This is the most common pixel geometry for LCD monitors."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteParagraphAlignment.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteParagraphAlignment.html",
    "title": "Enum DWriteParagraphAlignment",
    "keywords": "Enum DWriteParagraphAlignment Alignment of paragraph text along the flow direction axis relative to the flow's beginning and ending edge of the layout box. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteParagraphAlignment Fields Name Description Center The center of the paragraph is aligned to the center of the flow of the layout box. Far The last line of paragraph is aligned to the flow's ending edge of the layout box. Near The first line of paragraph is aligned to the flow's beginning edge of the layout box."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteOverhangMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteOverhangMetrics.html",
    "title": "Struct DWriteOverhangMetrics",
    "keywords": "Struct DWriteOverhangMetrics The DWRITE_OVERHANG_METRICS structure holds how much any visible pixels (in DIPs) overshoot each side of the layout or inline objects. Implements IEquatable < DWriteOverhangMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteOverhangMetrics : IEquatable<DWriteOverhangMetrics> Remarks Positive overhangs indicate that the visible area extends outside the layout box or inline object, while negative values mean there is whitespace inside. The returned values are unaffected by rendering transforms or pixel snapping. Additionally, they may not exactly match final target's pixel bounds after applying grid fitting and hinting. Properties | Improve this Doc View Source Bottom Gets the distance from the bottom-most visible DIP to its bottom alignment edge. Declaration public float Bottom { get; } Property Value Type Description Single | Improve this Doc View Source Left Gets the distance from the left-most visible DIP to its left alignment edge. Declaration public float Left { get; } Property Value Type Description Single | Improve this Doc View Source Right Gets the distance from the right-most visible DIP to its right alignment edge. Declaration public float Right { get; } Property Value Type Description Single | Improve this Doc View Source Top Gets the distance from the top-most visible DIP to its top alignment edge. Declaration public float Top { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteOverhangMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteOverhangMetrics other) Parameters Type Name Description DWriteOverhangMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteOverhangMetrics, DWriteOverhangMetrics) Compares two DWriteOverhangMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteOverhangMetrics left, DWriteOverhangMetrics right) Parameters Type Name Description DWriteOverhangMetrics left The left DWriteOverhangMetrics to compare. DWriteOverhangMetrics right The right DWriteOverhangMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteOverhangMetrics, DWriteOverhangMetrics) Compares two DWriteOverhangMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteOverhangMetrics left, DWriteOverhangMetrics right) Parameters Type Name Description DWriteOverhangMetrics left The left DWriteOverhangMetrics to compare. DWriteOverhangMetrics right The right DWriteOverhangMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteNumberSubstitutionMethod.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteNumberSubstitutionMethod.html",
    "title": "Enum DWriteNumberSubstitutionMethod",
    "keywords": "Enum DWriteNumberSubstitutionMethod How to apply number substitution on digits and related punctuation. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteNumberSubstitutionMethod Fields Name Description Contextual If the culture is Arabic or Farsi, specifies that the number shape depend on the context. Either traditional or nominal number shape are used depending on the nearest preceding strong character or (if there is none) the reading direction of the paragraph. FromCulture Specifies that the substitution method should be determined based on LOCALE_IDIGITSUBSTITUTION value of the specified text culture. National Specifies that number are rendered using the national number shape as specified by the LOCALE_SNATIVEDIGITS value of the specified text culture. None Specifies that code points 0x30-0x39 are always rendered as nominal numeral shapes (ones of the European number), i.e., no substitution is performed. Traditional Specifies that number are rendered using the traditional shape for the specified culture. For most cultures, this is the same as NativeNational. However, NativeNational results in Latin number for some Arabic cultures, whereas this value results in Arabic number for all Arabic cultures."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontSimulations.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontSimulations.html",
    "title": "Enum DWriteFontSimulations",
    "keywords": "Enum DWriteFontSimulations Specifies algorithmic style simulations to be applied to the font face. Bold and oblique simulations can be combined via bitwise OR operation. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax [Flags] public enum DWriteFontSimulations Fields Name Description Bold Algorithmic emboldening is performed. None No simulations are performed. Oblique Algorithmic italicization is performed."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontMetrics.html",
    "title": "Struct DWriteFontMetrics",
    "keywords": "Struct DWriteFontMetrics The DWRITE_FONT_METRICS structure specifies the metrics of a font face that are applicable to all glyphs within the font face. Implements IEquatable < DWriteFontMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteFontMetrics : IEquatable<DWriteFontMetrics> Properties | Improve this Doc View Source Ascent Gets the ascent value of the font face in font design units. Ascent is the distance from the top of font character alignment box to English baseline. Declaration public ushort Ascent { get; } Property Value Type Description UInt16 | Improve this Doc View Source CapitalHeight Gets the cap height value of the font face in font design units. Cap height is the distance from English baseline to the top of a typical English capital. Capital \"H\" is often used as a reference character for the purpose of calculating the cap height value. Declaration public ushort CapitalHeight { get; } Property Value Type Description UInt16 | Improve this Doc View Source Descent Gets the descent value of the font face in font design units. Descent is the distance from the bottom of font character alignment box to English baseline. Declaration public ushort Descent { get; } Property Value Type Description UInt16 | Improve this Doc View Source DesignUnitsPerEM Gets the number of font design units per em unit. Font files use their own coordinate system of font design units. A font design unit is the smallest measurable unit in the em square, an imaginary square that is used to size and align glyphs. The concept of em square is used as a reference scale factor when defining font size and device transformation semantics. The size of one em square is also commonly used to compute the paragraph indentation value. Declaration public ushort DesignUnitsPerEM { get; } Property Value Type Description UInt16 | Improve this Doc View Source LetterXHeight Gets the x-height value of the font face in font design units. x-height is the distance from English baseline to the top of lowercase letter \"x\", or a similar lowercase character. Declaration public ushort LetterXHeight { get; } Property Value Type Description UInt16 | Improve this Doc View Source LineGap Gets the line gap in font design units. Recommended additional white space to add between lines to improve legibility. The recommended line spacing (baseline-to-baseline distance) is thus the sum of ascent, descent, and lineGap. The line gap is usually positive or zero but can be negative, in which case the recommended line spacing is less than the height of the character alignment box. Declaration public short LineGap { get; } Property Value Type Description Int16 | Improve this Doc View Source StrikethroughPosition Gets the strikethrough position value of the font face in font design units. Strikethrough position is the position of strikethrough relative to the English baseline. The value is usually made positive in order to place the strikethrough above the baseline. Declaration public short StrikethroughPosition { get; } Property Value Type Description Int16 | Improve this Doc View Source StrikethroughThickness Gets the suggested strikethrough thickness value of the font face in font design units. Declaration public ushort StrikethroughThickness { get; } Property Value Type Description UInt16 | Improve this Doc View Source UnderlinePosition Gets the underline position value of the font face in font design units. Underline position is the position of underline relative to the English baseline. The value is usually made negative in order to place the underline below the baseline. Declaration public short UnderlinePosition { get; } Property Value Type Description Int16 | Improve this Doc View Source UnderlineThickness Gets the suggested underline thickness value of the font face in font design units. Declaration public ushort UnderlineThickness { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Equals(DWriteFontMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteFontMetrics other) Parameters Type Name Description DWriteFontMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteFontMetrics, DWriteFontMetrics) Compares two DWriteFontMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteFontMetrics left, DWriteFontMetrics right) Parameters Type Name Description DWriteFontMetrics left The left DWriteFontMetrics to compare. DWriteFontMetrics right The right DWriteFontMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteFontMetrics, DWriteFontMetrics) Compares two DWriteFontMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteFontMetrics left, DWriteFontMetrics right) Parameters Type Name Description DWriteFontMetrics left The left DWriteFontMetrics to compare. DWriteFontMetrics right The right DWriteFontMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontList.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontList.html",
    "title": "Class DWriteFontList",
    "keywords": "Class DWriteFontList The IDWriteFontList interface represents a list of fonts. Inheritance Object DWriteFontList Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFontList : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFont(UInt32) Gets a font given its zero-based index. Declaration public DWriteFont GetFont(uint index) Parameters Type Name Description UInt32 index Zero-based index of the font in the font list. Returns Type Description DWriteFont DWriteFont | Improve this Doc View Source GetFontCollection() Gets the font collection that contains the fonts. Declaration public DWriteFontCollection GetFontCollection() Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetFontCount() Gets the number of fonts in the font list. Declaration public uint GetFontCount() Returns Type Description UInt32 UInt32 | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFontList to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFontList value) Parameters Type Name Description DWriteFontList value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFileType.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFileType.html",
    "title": "Enum DWriteFontFileType",
    "keywords": "Enum DWriteFontFileType The type of a font represented by a single font file. Font formats that consist of multiple files, e.g. Type 1 .PFM and .PFB, have separate values for each of the file type. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontFileType Fields Name Description Bitmap Bitmap .FON font. Cff OpenType font with CFF outlines. TrueType OpenType font with TrueType outlines. TrueTypeCollection OpenType font that contains a TrueType collection. Type1Pfb Type 1 PFB font. Type1Pfm Type 1 PFM font. Unknown Font type is not recognized by the DirectWrite font system. Vector Vector .FON font."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFile.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFile.html",
    "title": "Class DWriteFontFile",
    "keywords": "Class DWriteFontFile The interface that represents a reference to a font file. Inheritance Object DWriteFontFile Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFontFile : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Analyse(out Boolean, out DWriteFontFileType, out DWriteFontFaceType, out UInt32) Analyzes a file and returns whether it represents a font, and whether the font type is supported by the font system. Declaration public void Analyse(out bool isSupportedFontType, out DWriteFontFileType fontFileType, out DWriteFontFaceType fontFaceType, out uint numberOfFaces) Parameters Type Name Description Boolean isSupportedFontType TRUE if the font type is supported by the font system, FALSE otherwise. DWriteFontFileType fontFileType The type of the font file. Note that even if isSupportedFontType is FALSE, the fontFileType value may be different from DWRITE_FONT_FILE_TYPE_UNKNOWN. DWriteFontFaceType fontFaceType The type of the font face that can be constructed from the font file. Note that even if isSupportedFontType is FALSE, the fontFaceType value may be different from DWRITE_FONT_FACE_TYPE_UNKNOWN. UInt32 numberOfFaces Number of font faces contained in the font file. Remarks IMPORTANT: certain font file types are recognized, but not supported by the font system. For example, the font system will recognize a file as a Type 1 font file, but will not be able to construct a font face object from it. In such situations, Analyze will set isSupportedFontType output parameter to FALSE. | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetReferenceKey() Gets the reference key of a font file. Declaration public byte[] GetReferenceKey() Returns Type Description Byte [] Byte | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFontFile to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFontFile value) Parameters Type Name Description DWriteFontFile value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFeatureTag.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFeatureTag.html",
    "title": "Enum DWriteFontFeatureTag",
    "keywords": "Enum DWriteFontFeatureTag Typographic feature of text supplied by the font. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontFeatureTag Fields Name Description AlternateAnnotationForms Replaces default glyphs with various notational forms (such as glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes). In some cases an annotation form may already be present, but the user may want a different one. AlternateHalfWidth Respaces glyphs designed to be set on full-em widths, fitting them onto half-em widths. This differs from hwid in that it does not substitute new glyphs. AlternativeFractions Replaces figures separated by a slash with an alternative form. CapitalSpacing Globally adjusts inter-glyph spacing for all-capital text. Most typefaces contain capitals and lowercase characters, and the capitals are positioned to work with the lowercase. When capitals are used for words, they need more space between them for legibility and esthetics. This feature would not apply to monospaced designs. Of course the user may want to override this behavior in order to do more pronounced letter spacing for esthetic reasons. CaseSensitiveForms Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures; also changes oldstyle figures to lining figures. By default, glyphs in a text face are designed to work with lowercase characters. Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text. Also, lining figures are the same height (or close to it) as capitals, and fit much better with all-capital text. ContextualAlternates In specified situations, replaces default glyphs with alternate forms which provide better joining behavior. Used in script typefaces which are designed to have some or all of their glyphs join. ContextualLigatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. Unlike other ligature features, clig specifies the context in which the ligature is recommended. This capability is important in some script designs and for swash ligatures. ContextualSwash Replaces default character glyphs with corresponding swash glyphs in a specified context. Note that there may be more than one swash alternate for a given character. CursivePositioning In cursive scripts like Arabic, this feature cursively positions adjacent glyphs. Default The default. DiscretionaryLigatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures which may be used for special effect, at the user's preference. ExpertForms Replaces standard forms in Japanese fonts with corresponding forms preferred by typographers. For example, a user would invoke this feature to replace kanji character U+5516 with U+555E. Fractions Replaces figures separated by a slash with 'common' (diagonal) fractions. FullWidth Replaces glyphs set on other widths with glyphs set on full (usually em) widths. In a CJKV font, this may include \"lower ASCII\" Latin characters and various symbols. In a European font, this feature replaces proportionally-spaced glyphs with monospaced glyphs, which are generally set on widths of 0.6 em. For example, a user may invoke this feature in a Japanese font to get full monospaced Latin glyphs instead of the corresponding proportionally-spaced versions. GlyphCompositionDecomposition To minimize the number of glyph alternates, it is sometimes desired to decompose a character into two glyphs. Additionally, it may be preferable to compose two characters into a single glyph for better glyph processing. This feature permits such composition/decomposition. The feature should be processed as the first feature processed, and should be processed only when it is called. HalantForms Produces the halant forms of consonants in Indic scripts. For example, in Sanskrit (Devanagari script), syllable final consonants are frequently required in their halant form. HalfForms Produces the half forms of consonants in Indic scripts. For example, in Hindi (Devanagari script), the conjunct KKa, obtained by doubling the Ka, is denoted with a half form of Ka followed by the full form. HalfWidth Replaces glyphs on proportional widths, or fixed widths other than half an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are set on multiple widths; this feature selects the half-em version. There are various contexts in which this is the preferred behavior, including compatibility with older desktop documents. HistoricalForms Replaces the default (current) forms with the historical alternates. While some ligatures are also used for historical effect, this feature deals only with single characters. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect. HistoricalLigatures Replaces the default (current) forms with the historical alternates. Some ligatures were in common use in the past, but appear anachronistic today. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect. HojoKanjiForms Used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded. The JIS X 0212-1990 (aka, \"Hojo Kanji\") and JIS X 0213:2004 character sets overlap significantly. In some cases their prototypical glyphs differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 (such as those supporting the Adobe-Japan 1-6 character collection), it is recommended that JIS X 0213:2004 forms be the preferred encoded form. HorizontalKanaAlternates Replaces standard kana with forms that have been specially designed for only horizontal writing. This is a typographic optimization for improved fit and more even color. Jis04Forms The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters, which were incorporated into JIS X 0213:2004 as new prototypical forms. The 'jp04' feature is A subset of the 'nlck' feature, and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004. Jis78Forms Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS C 6226-1978 (JIS78) specification. Jis83Forms Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS X 0208-1983 (JIS83) specification. Jis90Forms Replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 (JIS90) specification. Kerning Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs. Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility. Besides standard adjustment in the horizontal direction, this feature can supply size-dependent kerning data via device tables, \"cross-stream\" kerning in the Y text direction, and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature does not apply to text set vertically. LiningFigures Changes selected figures from oldstyle to the default lining form. For example, a user may invoke this feature in order to get lining figures, which fit better with all-capital text. This feature overrides results of the Oldstyle Figures feature (onum). LocalizedForms Enables localized forms of glyphs to be substituted for default forms. Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters, which are used by individual literary communities. For example, a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other. In some cases the localized form differs only subtly from the script 'norm', in others the forms are radically distinct. MarkPositioning Positions mark glyphs with respect to base glyphs. For example, in Arabic script positioning the Hamza above the Yeh. MarkToMarkPositioning Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic. For example, in Arabic, the ligaturised mark Ha with Hamza above it can also be obtained by positioning these marks relative to one another. MathematicalGreek Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet). NlcKanjiForms Used to access glyphs made from glyph shapes defined by the National Language Council (NLC) of Japan for a number of JIS characters in 2000. OldStyleFigures Changes selected figures from the default lining style to oldstyle form. For example, a user may invoke this feature to get oldstyle figures, which fit better into the flow of normal upper- and lowercase text. This feature overrides results of the Lining Figures feature (lnum). Ordinals Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116), which is actually a ligature substitution, but is best accessed through this feature. PetiteCapitals Turns lowercase characters into petite capitals. Forms related to petite capitals, such as specially designed figures, may be included. Some fonts contain an additional size of capital letters, shorter than the regular smallcaps and it is referred to as petite caps. Such forms are most likely to be found in designs with a small lowercase x-height, where they better harmonise with lowercase text than the taller smallcaps. PetiteCapitalsFromCapitals Turns capital characters into petite capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in petite-cap form to avoid disrupting the flow of text. See the pcap feature description for notes on the relationship of caps, smallcaps and petite caps. ProportionalAlternateWidth Respaces glyphs designed to be set on full-em widths, fitting them onto individual (more or less proportional) horizontal widths. This differs from pwid in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may prefer the monospaced form, or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting (Latin forms designed for proportional spacing would be rotated). ProportionalFigures Replaces figure glyphs set on uniform (tabular) widths with corresponding glyphs set on glyph-specific (proportional) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs. ProportionalWidths Replaces glyphs set on uniform widths (typically full or half-em) with proportionally spaced glyphs. The proportional variants are often used for the Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts. QuarterWidths Replaces glyphs on other widths with glyphs set on widths of one quarter of an em (half an en). The characters involved are normally figures and some forms of punctuation. RequiredLigatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures, which the script determines as required to be used in normal conditions. This feature is important for some scripts to ensure correct glyph formation. RubyNotationForms Identifies glyphs in the font which have been designed for \"ruby\", from the old typesetting term for four-point-sized type. Japanese typesetting often uses smaller kana glyphs, generally in superscripted form, to clarify the meaning of kanji which may be unfamiliar to the reader. ScientificInferiors Replaces lining or oldstyle figures with inferior figures (smaller glyphs which sit lower than the standard baseline, primarily for chemical or mathematical notation). May also replace lowercase characters with alphabetic inferiors. SimplifiedForms Replaces 'traditional' Chinese or Japanese forms with the corresponding 'simplified' forms. SlashedZero Allows the user to change from the default 0 to a slashed form. Some fonts contain both a default form of zero, and an alternative form which uses a diagonal slash through the counter. Especially in condensed designs, it can be difficult to distinguish between 0 and O (zero and capital O) in any situation where capitals and lining figures may be arbitrarily mixed. SmallCapitals Turns lowercase characters into small capitals. This corresponds to the common SC font layout. It is generally used for display lines set in Large & small caps, such as titles. Forms related to small capitals, such as oldstyle figures, may be included. SmallCapitalsFromCapitals Turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text. StandardLigatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions. StylisticAlternates Replaces the default forms with the stylistic alternates. Many fonts contain alternate glyph designs for a purely esthetic effect; these don't always fit into a clear category like swash or historical. As in the case of swash glyphs, there may be more than one alternate form. StylisticSet1 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet10 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet11 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet12 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet13 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet14 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet15 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet16 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet17 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet18 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet19 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet2 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet20 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet3 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet4 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet5 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet6 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet7 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet8 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. StylisticSet9 In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic sets. Subscript May replace a default glyph with a subscript glyph, or it may combine a glyph substitution with positioning adjustments for proper placement. Superscript Replaces lining or oldstyle figures with superior figures (primarily for footnote indication), and replaces lowercase letters with superior letters (primarily for abbreviated French titles). Swash Replaces default character glyphs with corresponding swash glyphs. Note that there may be more than one swash alternate for a given character. TabularFigures Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform (tabular) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs. ThirdWidths Replaces glyphs on other widths with glyphs set on widths of one third of an em. The characters involved are normally figures and some forms of punctuation. Titling Replaces the default glyphs with corresponding forms designed specifically for titling. These may be all-capital and/or larger on the body, and adjusted for viewing at larger sizes. TraditionalForms Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding 'traditional' forms. TraditionalNameForms Replaces 'simplified' Japanese kanji forms with the corresponding 'traditional' forms. This is equivalent to the Traditional Forms feature, but explicitly limited to the traditional forms considered proper for use in personal names (as many as 205 glyphs in some fonts). Unicase Maps upper- and lowercase letters to a mixed set of lowercase and small capital forms, resulting in a single case alphabet (for an example of unicase, see the Emigre type family Filosofia). The letters substituted may vary from font to font, as appropriate to the design. If aligning to the x-height, smallcap glyphs may be substituted, or specially designed unicase forms might be used. Substitutions might also include specially designed figures. VerticalAlternatesAndRotation Replaces normal figures with figures adjusted for vertical display. VerticalWriting Indicates that the font is displayed vertically."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFeature.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFeature.html",
    "title": "Struct DWriteFontFeature",
    "keywords": "Struct DWriteFontFeature The DWRITE_FONT_FEATURE structure specifies properties used to identify and execute typographic feature in the font. Implements IEquatable < DWriteFontFeature > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteFontFeature : IEquatable<DWriteFontFeature> Constructors | Improve this Doc View Source DWriteFontFeature(DWriteFontFeatureTag, UInt32) Initializes a new instance of the DWriteFontFeature struct. Declaration public DWriteFontFeature(DWriteFontFeatureTag nameTag, uint parameter) Parameters Type Name Description DWriteFontFeatureTag nameTag The feature OpenType name identifier. UInt32 parameter Execution parameter of the feature. Properties | Improve this Doc View Source NameTag Gets or sets the feature OpenType name identifier. Declaration public DWriteFontFeatureTag NameTag { get; set; } Property Value Type Description DWriteFontFeatureTag | Improve this Doc View Source Parameter Gets or sets the execution parameter of the feature. Declaration public uint Parameter { get; set; } Property Value Type Description UInt32 Remarks The parameter should be non-zero to enable the feature. Once enabled, a feature can't be disabled again within the same range. Features requiring a selector use this value to indicate the selector index. Methods | Improve this Doc View Source Equals(DWriteFontFeature) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteFontFeature other) Parameters Type Name Description DWriteFontFeature other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteFontFeature, DWriteFontFeature) Compares two DWriteFontFeature objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteFontFeature left, DWriteFontFeature right) Parameters Type Name Description DWriteFontFeature left The left DWriteFontFeature to compare. DWriteFontFeature right The right DWriteFontFeature to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteFontFeature, DWriteFontFeature) Compares two DWriteFontFeature objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteFontFeature left, DWriteFontFeature right) Parameters Type Name Description DWriteFontFeature left The left DWriteFontFeature to compare. DWriteFontFeature right The right DWriteFontFeature to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFamily.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFamily.html",
    "title": "Class DWriteFontFamily",
    "keywords": "Class DWriteFontFamily The IDWriteFontFamily interface represents a set of fonts that share the same design but are differentiated by weight, stretch, and style. Inheritance Object DWriteFontFamily Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFontFamily : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFamilyNames() Creates a localized strings object that contains the family names for the font family, indexed by locale name. Declaration public DWriteLocalizedStrings GetFamilyNames() Returns Type Description DWriteLocalizedStrings DWriteLocalizedStrings | Improve this Doc View Source GetFirstMatchingFont(DWriteFontWeight, DWriteFontStretch, DWriteFontStyle) Gets the font that best matches the specified properties. Declaration public DWriteFont GetFirstMatchingFont(DWriteFontWeight weight, DWriteFontStretch stretch, DWriteFontStyle style) Parameters Type Name Description DWriteFontWeight weight Requested font weight. DWriteFontStretch stretch Requested font stretch. DWriteFontStyle style Requested font style. Returns Type Description DWriteFont DWriteFont | Improve this Doc View Source GetFont(UInt32) Gets a font given its zero-based index. Declaration public DWriteFont GetFont(uint index) Parameters Type Name Description UInt32 index Zero-based index of the font in the font list. Returns Type Description DWriteFont DWriteFont | Improve this Doc View Source GetFontCollection() Gets the font collection that contains the fonts. Declaration public DWriteFontCollection GetFontCollection() Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetFontCount() Gets the number of fonts in the font list. Declaration public uint GetFontCount() Returns Type Description UInt32 UInt32 | Improve this Doc View Source GetMatchingFonts(DWriteFontWeight, DWriteFontStretch, DWriteFontStyle) Gets a list of fonts in the font family ranked in order of how well they match the specified properties. Declaration public DWriteFontList GetMatchingFonts(DWriteFontWeight weight, DWriteFontStretch stretch, DWriteFontStyle style) Parameters Type Name Description DWriteFontWeight weight Requested font weight. DWriteFontStretch stretch Requested font stretch. DWriteFontStyle style Requested font style. Returns Type Description DWriteFontList DWriteFontList | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFontFamily to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFontFamily value) Parameters Type Name Description DWriteFontFamily value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFaceType.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFaceType.html",
    "title": "Enum DWriteFontFaceType",
    "keywords": "Enum DWriteFontFaceType The file format of a complete font face. Font formats that consist of multiple files a single entry. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontFaceType Fields Name Description Bitmap A bitmap .FON format font face. Cff OpenType font face with CFF outlines. RawCff The font data includes only the CFF table from an OpenType CFF font. This font face type can be used only for embedded fonts (i.e., custom font file loaders) and the resulting font face object supports only the minimum functionality necessary to render glyphs. TrueType OpenType font face with TrueType outlines. TrueTypeCollection OpenType font face that is a part of a TrueType collection. Type1 A Type 1 font face. Unknown Font face type is not recognized by the DirectWrite font system. Vector A vector .FON format font face."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontFace.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontFace.html",
    "title": "Class DWriteFontFace",
    "keywords": "Class DWriteFontFace The interface that represents an absolute reference to a font face. It contains font face type, appropriate file references and face identification data. Various font data such as metrics, names and glyph outlines is obtained from IDWriteFontFace. Inheritance Object DWriteFontFace Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFontFace : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source FaceType Gets the file format type of a font face. Declaration public DWriteFontFaceType FaceType { get; } Property Value Type Description DWriteFontFaceType | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object | Improve this Doc View Source Index Gets the zero-based index of the font face in its font file or files. If the font files contain a single face, the return value is zero. Declaration public uint Index { get; } Property Value Type Description UInt32 | Improve this Doc View Source IsSymbolFont Gets a value indicating whether the font is a symbol font. Declaration public bool IsSymbolFont { get; } Property Value Type Description Boolean | Improve this Doc View Source Simulations Gets the algorithmic style simulation flags of a font face. Declaration public DWriteFontSimulations Simulations { get; } Property Value Type Description DWriteFontSimulations Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFiles() Obtains the font files representing a font face. Declaration public DWriteFontFile[] GetFiles() Returns Type Description DWriteFontFile [] DWriteFontFile | Improve this Doc View Source GetMetrics() Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations. Declaration public DWriteFontMetrics GetMetrics() Returns Type Description DWriteFontMetrics DWriteFontMetrics Remarks The metrics returned by this function are in font design units. | Improve this Doc View Source GetRecommendedRenderingMode(Single, Single, DWriteMeasuringMode, DWriteRenderingParams) Determines the recommended rendering mode for the font given the specified size and rendering parameters. Declaration public DWriteRenderingMode GetRecommendedRenderingMode(float size, float pixelsPerDip, DWriteMeasuringMode measuringMode, DWriteRenderingParams renderingParams) Parameters Type Name Description Single size Logical size of the font in DIP units. A DIP (\"device-independent pixel\") equals 1/96 inch. Single pixelsPerDip Number of physical pixels per DIP. For example, if the DPI of the rendering surface is 96 this value is 1.0f. If the DPI is 120, this value is 120.0f/96. DWriteMeasuringMode measuringMode Specifies measuring mode that will be used for glyphs in the font. Renderer implementations may choose different rendering modes for given measuring modes, but best results are seen when the corresponding modes match: DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL for DWRITE_MEASURING_MODE_NATURAL DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC for DWRITE_MEASURING_MODE_GDI_CLASSIC DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL for DWRITE_MEASURING_MODE_GDI_NATURAL DWriteRenderingParams renderingParams Rendering parameters object. This parameter is necessary in case the rendering parameters object overrides the rendering mode. Returns Type Description DWriteRenderingMode DWriteRenderingMode | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFontFace to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFontFace value) Parameters Type Name Description DWriteFontFace value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontCollection.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontCollection.html",
    "title": "Class DWriteFontCollection",
    "keywords": "Class DWriteFontCollection The DWriteFontCollection encapsulates a collection of fonts. Inheritance Object DWriteFontCollection Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFontCollection : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source FindFontFamily(String, out UInt32) Finds the font family with the specified family name. Declaration public bool FindFontFamily(string familyName, out uint index) Parameters Type Name Description String familyName Name of the font family. The name is not case-sensitive but must otherwise exactly match a family name in the collection. UInt32 index Receives the zero-based index of the matching font family if the family name was found or UINT_MAX otherwise. Returns Type Description Boolean TRUE if the family name exists or FALSE otherwise. | Improve this Doc View Source GetFontFamily(UInt32) Creates a font family object given a zero-based font family index. Declaration public DWriteFontFamily GetFontFamily(uint index) Parameters Type Name Description UInt32 index Zero-based index of the font family. Returns Type Description DWriteFontFamily DWriteFontFamily | Improve this Doc View Source GetFontFamilyCount() Gets the number of font families in the collection. Declaration public uint GetFontFamilyCount() Returns Type Description UInt32 UInt32 | Improve this Doc View Source GetFontFromFontFace(DWriteFontFace) Gets the font object that corresponds to the same physical font as the specified font face object. The specified physical font must belong to the font collection. Declaration public DWriteFont GetFontFromFontFace(DWriteFontFace fontFace) Parameters Type Name Description DWriteFontFace fontFace Font face object that specifies the physical font. Returns Type Description DWriteFont DWriteFont Remarks If the specified physical font is not part of the font collection the return value is DWRITE_E_NOFONT. | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFontCollection to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFontCollection value) Parameters Type Name Description DWriteFontCollection value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFont.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFont.html",
    "title": "Class DWriteFont",
    "keywords": "Class DWriteFont The IDWriteFont interface represents a physical font in a font collection. Inheritance Object DWriteFont Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFont : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object | Improve this Doc View Source IsSymbolFont Gets a value indicating whether the font is a symbol font. Declaration public bool IsSymbolFont { get; } Property Value Type Description Boolean | Improve this Doc View Source Simulations Gets a value that indicates what simulation are applied to the specified font. Declaration public DWriteFontSimulations Simulations { get; } Property Value Type Description DWriteFontSimulations | Improve this Doc View Source Stretch Gets the stretch (aka. width) of the specified font. Declaration public DWriteFontStretch Stretch { get; } Property Value Type Description DWriteFontStretch | Improve this Doc View Source Style Gets the style (aka. slope) of the specified font. Declaration public DWriteFontStyle Style { get; } Property Value Type Description DWriteFontStyle | Improve this Doc View Source Weight Gets the weight of the specified font. Declaration public DWriteFontWeight Weight { get; } Property Value Type Description DWriteFontWeight Methods | Improve this Doc View Source CreateFontFace() Creates a font face object for the font. Declaration public DWriteFontFace CreateFontFace() Returns Type Description DWriteFontFace DWriteFontFace | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFaceNames() Gets a localized strings collection containing the face names for the font (e.g., Regular or Bold), indexed by locale name. Declaration public DWriteLocalizedStrings GetFaceNames() Returns Type Description DWriteLocalizedStrings DWriteLocalizedStrings | Improve this Doc View Source GetFontFamily() Gets the font family to which the specified font belongs. Declaration public DWriteFontFamily GetFontFamily() Returns Type Description DWriteFontFamily DWriteFontFamily | Improve this Doc View Source GetInformationalStrings(DWriteInformationalStringId) Gets a localized strings collection containing the specified informational strings, indexed by locale name. Declaration public DWriteLocalizedStrings GetInformationalStrings(DWriteInformationalStringId informationalStringId) Parameters Type Name Description DWriteInformationalStringId informationalStringId Identifies the string to get. Returns Type Description DWriteLocalizedStrings DWriteLocalizedStrings Remarks If the font does not contain the specified string, the return value is S_OK but informationalStrings receives a NULL pointer and exists receives the value FALSE. | Improve this Doc View Source GetMetrics() Gets the metrics for the font. Declaration public DWriteFontMetrics GetMetrics() Returns Type Description DWriteFontMetrics DWriteFontMetrics | Improve this Doc View Source HasCharacter(UInt32) Determines whether the font supports the specified character. Declaration public bool HasCharacter(uint unicodeValue) Parameters Type Name Description UInt32 unicodeValue Unicode (UCS-4) character value. Returns Type Description Boolean Boolean | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFont to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFont value) Parameters Type Name Description DWriteFont value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFlowDirection.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFlowDirection.html",
    "title": "Enum DWriteFlowDirection",
    "keywords": "Enum DWriteFlowDirection Direction for how lines of text are placed relative to one another. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFlowDirection Fields Name Description BottomToTop Text lines are placed from bottom to top. LeftToRight Text lines are placed from left to right. RightToLeft Text lines are placed from right to left. TopToBottom Text lines are placed from top to bottom."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFactoryType.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFactoryType.html",
    "title": "Enum DWriteFactoryType",
    "keywords": "Enum DWriteFactoryType Specifies the type of DirectWrite factory object. DirectWrite factory contains internal state such as font loader registration and cached font data. In most cases it is recommended to use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state and reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended to use an isolated factory for the sandboxed component. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFactoryType Fields Name Description Isolated Objects created from the isolated factory do not interact with internal DirectWrite state from other components. Shared Shared factory allow for re-use of cached font data across multiple in process components. Such factories also take advantage of cross process font caching components for better performance."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFactory.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFactory.html",
    "title": "Class DWriteFactory",
    "keywords": "Class DWriteFactory The root factory interface for all DWrite objects. Inheritance Object DWriteFactory Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteFactory : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Create(DWriteFactoryType) Creates a DirectWrite factory object that is used for subsequent creation of individual DirectWrite objects. Declaration public static DWriteFactory Create(DWriteFactoryType factoryType) Parameters Type Name Description DWriteFactoryType factoryType Identifies whether the factory object will be shared or isolated. Returns Type Description DWriteFactory DWriteFactory Remarks Obtains DirectWrite factory object that is used for subsequent creation of individual DirectWrite classes. DirectWrite factory contains internal state such as font loader registration and cached font data. In most cases it is recommended to use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state and reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended to use an isolated factory for the sandboxed component. | Improve this Doc View Source CreateCustomRenderingParams(Single, Single, Single, DWritePixelGeometry, DWriteRenderingMode) Creates a rendering parameters object with the specified properties. Declaration public DWriteRenderingParams CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, DWritePixelGeometry pixelGeometry, DWriteRenderingMode renderingMode) Parameters Type Name Description Single gamma The gamma value used for gamma correction, which must be greater than zero and cannot exceed 256. Single enhancedContrast The amount of contrast enhancement, zero or greater. Single clearTypeLevel The degree of ClearType level, from 0.0f (no ClearType) to 1.0f (full ClearType). DWritePixelGeometry pixelGeometry The geometry of a device pixel. DWriteRenderingMode renderingMode Method of rendering glyphs. In most cases, this should be DWRITE_RENDERING_MODE_DEFAULT to automatically use an appropriate mode. Returns Type Description DWriteRenderingParams DWriteRenderingParams | Improve this Doc View Source CreateFontFace(DWriteFontFaceType, DWriteFontFile[], UInt32, DWriteFontSimulations) Creates a font face object. Declaration public DWriteFontFace CreateFontFace(DWriteFontFaceType fontFaceType, DWriteFontFile[] fontFiles, uint faceIndex, DWriteFontSimulations fontFaceSimulation) Parameters Type Name Description DWriteFontFaceType fontFaceType The file format of the font face. DWriteFontFile [] fontFiles Font files representing the font face. Since IDWriteFontFace maintains its own references to the input font file objects, it's OK to release them after this call. UInt32 faceIndex The zero based index of a font face in cases when the font files contain a collection of font faces. If the font files contain a single face, this value should be zero. DWriteFontSimulations fontFaceSimulation Font face simulation flags for algorithmic emboldening and italicization. Returns Type Description DWriteFontFace DWriteFontFace | Improve this Doc View Source CreateFontFileReference(String, UInt64) CreateFontFileReference creates a font file reference object from a local font file. Declaration public DWriteFontFile CreateFontFileReference(string filePath, ulong lastWriteTime) Parameters Type Name Description String filePath Absolute file path. Subsequent operations on the constructed object may fail if the user provided filePath doesn't correspond to a valid file on the disk. UInt64 lastWriteTime Last modified time of the input file path. If the parameter is omitted, the function will access the font file to obtain its last write time, so the clients are encouraged to specify this value to avoid extra disk access. Subsequent operations on the constructed object may fail if the user provided lastWriteTime doesn't match the file on the disk. Returns Type Description DWriteFontFile DWriteFontFile | Improve this Doc View Source CreateMonitorRenderingParams(IntPtr) Creates a rendering parameters object with default settings for the specified monitor. Declaration public DWriteRenderingParams CreateMonitorRenderingParams(IntPtr monitor) Parameters Type Name Description IntPtr monitor The monitor to read the default values from. Returns Type Description DWriteRenderingParams DWriteRenderingParams | Improve this Doc View Source CreateRenderingParams() Creates a rendering parameters object with default settings for the primary monitor. Declaration public DWriteRenderingParams CreateRenderingParams() Returns Type Description DWriteRenderingParams DWriteRenderingParams | Improve this Doc View Source CreateTextFormat(String, DWriteFontCollection, DWriteFontWeight, DWriteFontStyle, DWriteFontStretch, Single, String) Create a text format object used for text layout. Declaration public DWriteTextFormat CreateTextFormat(string fontFamilyName, DWriteFontCollection fontCollection, DWriteFontWeight fontWeight, DWriteFontStyle fontStyle, DWriteFontStretch fontStretch, float fontSize, string localeName) Parameters Type Name Description String fontFamilyName Name of the font family DWriteFontCollection fontCollection Font collection. NULL indicates the system font collection. DWriteFontWeight fontWeight Font weight DWriteFontStyle fontStyle Font style DWriteFontStretch fontStretch Font stretch Single fontSize Logical size of the font in DIP units. A DIP (\"device-independent pixel\") equals 1/96 inch. String localeName Locale name Returns Type Description DWriteTextFormat DWriteTextFormat | Improve this Doc View Source CreateTextLayout(String, DWriteTextFormat, Single, Single) CreateTextLayout takes a string, format, and associated constraints and produces an object representing the fully analyzed and formatted result. Declaration public DWriteTextLayout CreateTextLayout(string text, DWriteTextFormat textFormat, float maxWidth, float maxHeight) Parameters Type Name Description String text The string to layout. DWriteTextFormat textFormat The format to apply to the string. Single maxWidth Width of the layout box. Single maxHeight Height of the layout box. Returns Type Description DWriteTextLayout DWriteTextLayout | Improve this Doc View Source CreateTypography() Create a typography object used in conjunction with text format for text layout. Declaration public DWriteTypography CreateTypography() Returns Type Description DWriteTypography DWriteTypography | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetSystemFontCollection() Gets a font collection representing the set of installed fonts. Declaration public DWriteFontCollection GetSystemFontCollection() Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source GetSystemFontCollection(Boolean) Gets a font collection representing the set of installed fonts. Declaration public DWriteFontCollection GetSystemFontCollection(bool checkForUpdates) Parameters Type Name Description Boolean checkForUpdates If this parameter is nonzero, the function performs an immediate check for changes to the set of installed fonts. If this parameter is FALSE, the function will still detect changes if the font cache service is running, but there may be some latency. For example, an application might specify TRUE if it has itself just installed a font and wants to be sure the font collection contains that font. Returns Type Description DWriteFontCollection DWriteFontCollection | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteFactory to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteFactory value) Parameters Type Name Description DWriteFactory value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteError.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteError.html",
    "title": "Class DWriteError",
    "keywords": "Class DWriteError DWrite error codes. Inheritance Object DWriteError Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public static class DWriteError Fields | Improve this Doc View Source AlreadyRegistered The given interface is already registered. Declaration public const int AlreadyRegistered = -2003283962 Field Value Type Description Int32 | Improve this Doc View Source CacheFormat The font cache contains invalid data. Declaration public const int CacheFormat = -2003283961 Field Value Type Description Int32 | Improve this Doc View Source CacheVersion A font cache file corresponds to a different version of DirectWrite. Declaration public const int CacheVersion = -2003283960 Field Value Type Description Int32 | Improve this Doc View Source FileAccess A font file exists but could not be opened due to access denied, sharing violation, or similar error. Declaration public const int FileAccess = -2003283964 Field Value Type Description Int32 | Improve this Doc View Source FileFormat Indicates an error in an input file such as a font file. Declaration public const int FileFormat = -2003283968 Field Value Type Description Int32 | Improve this Doc View Source FileNotFound A font file could not be opened because the file, directory, network location, drive, or other storage location does not exist or is unavailable. Declaration public const int FileNotFound = -2003283965 Field Value Type Description Int32 | Improve this Doc View Source FlowDirectionConflicts The flow direction conflicts with the reading direction. They must be perpendicular to each other. Declaration public const int FlowDirectionConflicts = -2003283957 Field Value Type Description Int32 | Improve this Doc View Source FontCollectionObsolete A font collection is obsolete due to changes in the system. Declaration public const int FontCollectionObsolete = -2003283963 Field Value Type Description Int32 | Improve this Doc View Source NoColor The font or glyph run does not contain any colored glyphs. Declaration public const int NoColor = -2003283956 Field Value Type Description Int32 | Improve this Doc View Source NoFont Indicates the specified font does not exist. Declaration public const int NoFont = -2003283966 Field Value Type Description Int32 | Improve this Doc View Source TextRendererIncompatible The version of the text renderer interface is not compatible. Declaration public const int TextRendererIncompatible = -2003283958 Field Value Type Description Int32 | Improve this Doc View Source Unexpected Indicates an error originating in DirectWrite code, which is not expected to occur but is safe to recover from. Declaration public const int Unexpected = -2003283967 Field Value Type Description Int32 | Improve this Doc View Source UnsupportedOperation The operation is not supported for this type of font. Declaration public const int UnsupportedOperation = -2003283959 Field Value Type Description Int32"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Usage.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Usage.html",
    "title": "Enum D3D11Usage",
    "keywords": "Enum D3D11Usage Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the graphics processing unit (GPU). Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11Usage Fields Name Description Default A resource that requires read and write access by the GPU. Dynamic A resource that is accessible by both the GPU (read only) and the CPU (write only). Immutable A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. Staging A resource that supports data transfer (copy) from the GPU to the CPU."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.html",
    "title": "Struct D3D11UnorderedAccessViewDesc",
    "keywords": "Struct D3D11UnorderedAccessViewDesc Specifies the subresources from a resource that are accessible using an unordered-access view. Implements IEquatable < D3D11UnorderedAccessViewDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11UnorderedAccessViewDesc : IEquatable<D3D11UnorderedAccessViewDesc> Constructors | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Buffer, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Buffer buffer, DxgiFormat format, uint firstElement, uint numElements) Parameters Type Name Description D3D11Buffer buffer A buffer. DxgiFormat format The viewing format. UInt32 firstElement The number of bytes between the beginning of the buffer and the first element to access. UInt32 numElements The total number of elements in the view. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Buffer, DxgiFormat, UInt32, UInt32, D3D11BufferUavOptions) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Buffer buffer, DxgiFormat format, uint firstElement, uint numElements, D3D11BufferUavOptions options) Parameters Type Name Description D3D11Buffer buffer A buffer. DxgiFormat format The viewing format. UInt32 firstElement The number of bytes between the beginning of the buffer and the first element to access. UInt32 numElements The total number of elements in the view. D3D11BufferUavOptions options The view options for a buffer. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture1D, D3D11UavDimension) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture1D texture, D3D11UavDimension viewDimension) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11UavDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture1D, D3D11UavDimension, DxgiFormat) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture1D texture, D3D11UavDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture1D, D3D11UavDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture1D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture1D, D3D11UavDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture1D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture1D, D3D11UavDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture1D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture2D, D3D11UavDimension) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture2D texture, D3D11UavDimension viewDimension) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11UavDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture2D, D3D11UavDimension, DxgiFormat) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture2D texture, D3D11UavDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture2D, D3D11UavDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture2D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture2D, D3D11UavDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture2D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture2D, D3D11UavDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture2D texture, D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture3D) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture3D texture) Parameters Type Name Description D3D11Texture3D texture A 3D texture. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture3D, DxgiFormat) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture3D texture, DxgiFormat format) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture3D, DxgiFormat, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture3D, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice, uint firstWSlice) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstWSlice The first depth level to use. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11Texture3D, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mipSlice, uint firstWSlice, uint wsize) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstWSlice The first depth level to use. UInt32 wsize The number of depth levels to use in the render-target view. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension, DxgiFormat) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11UnorderedAccessViewDesc(D3D11UavDimension, DxgiFormat, UInt32, UInt32, UInt32, D3D11BufferUavOptions) Initializes a new instance of the D3D11UnorderedAccessViewDesc struct. Declaration public D3D11UnorderedAccessViewDesc(D3D11UavDimension viewDimension, DxgiFormat format, uint mipSlice, uint firstArraySlice, uint arraySize, D3D11BufferUavOptions bufferOptions) Parameters Type Name Description D3D11UavDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mipSlice The index of the mipmap level to use mip slice. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. D3D11BufferUavOptions bufferOptions The view options for a buffer. Properties | Improve this Doc View Source Buffer Gets or sets a value indicating which buffer elements can be accessed. Declaration public D3D11BufferUav Buffer { get; set; } Property Value Type Description D3D11BufferUav | Improve this Doc View Source Format Gets or sets the data format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Texture1D Gets or sets the subresources in a 1D texture that can be accessed. Declaration public D3D11Texture1DUav Texture1D { get; set; } Property Value Type Description D3D11Texture1DUav | Improve this Doc View Source Texture1DArray Gets or sets the subresources in a 1D texture array that can be accessed. Declaration public D3D11Texture1DArrayUav Texture1DArray { get; set; } Property Value Type Description D3D11Texture1DArrayUav | Improve this Doc View Source Texture2D Gets or sets the subresources in a 2D texture that can be accessed. Declaration public D3D11Texture2DUav Texture2D { get; set; } Property Value Type Description D3D11Texture2DUav | Improve this Doc View Source Texture2DArray Gets or sets the subresources in a 2D texture array that can be accessed. Declaration public D3D11Texture2DArrayUav Texture2DArray { get; set; } Property Value Type Description D3D11Texture2DArrayUav | Improve this Doc View Source Texture3D Gets or sets the subresources in a 3D texture that can be accessed. Declaration public D3D11Texture3DUav Texture3D { get; set; } Property Value Type Description D3D11Texture3DUav | Improve this Doc View Source ViewDimension Gets or sets the resource type. Declaration public D3D11UavDimension ViewDimension { get; set; } Property Value Type Description D3D11UavDimension Methods | Improve this Doc View Source Equals(D3D11UnorderedAccessViewDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11UnorderedAccessViewDesc other) Parameters Type Name Description D3D11UnorderedAccessViewDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11UnorderedAccessViewDesc, D3D11UnorderedAccessViewDesc) Compares two D3D11UnorderedAccessViewDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11UnorderedAccessViewDesc left, D3D11UnorderedAccessViewDesc right) Parameters Type Name Description D3D11UnorderedAccessViewDesc left The left D3D11UnorderedAccessViewDesc to compare. D3D11UnorderedAccessViewDesc right The right D3D11UnorderedAccessViewDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11UnorderedAccessViewDesc, D3D11UnorderedAccessViewDesc) Compares two D3D11UnorderedAccessViewDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11UnorderedAccessViewDesc left, D3D11UnorderedAccessViewDesc right) Parameters Type Name Description D3D11UnorderedAccessViewDesc left The left D3D11UnorderedAccessViewDesc to compare. D3D11UnorderedAccessViewDesc right The right D3D11UnorderedAccessViewDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.html",
    "title": "Class D3D11UnorderedAccessView",
    "keywords": "Class D3D11UnorderedAccessView A view interface specifies the parts of a resource the pipeline can access during rendering. Inheritance Object D3D11DeviceChild D3D11View D3D11UnorderedAccessView Implements IDisposable ID3D11Releasable Inherited Members D3D11View.GetResource() D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11UnorderedAccessView : D3D11View, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets a description of the resource. Declaration public D3D11UnorderedAccessViewDesc Description { get; } Property Value Type Description D3D11UnorderedAccessViewDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11UavDimension.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11UavDimension.html",
    "title": "Enum D3D11UavDimension",
    "keywords": "Enum D3D11UavDimension Unordered-access view options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11UavDimension Fields Name Description Buffer View the resource as a buffer. Texture1D View the resource as a 1D texture. Texture1DArray View the resource as a 1D texture array. Texture2D View the resource as a 2D texture. Texture2DArray View the resource as a 2D texture array. Texture3D View the resource as a 3D texture array. Unknown The view type is unknown."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier.html",
    "title": "Enum D3D11TiledResourcesTier",
    "keywords": "Enum D3D11TiledResourcesTier Indicates the tier level at which tiled resources are supported. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11TiledResourcesTier Fields Name Description NotSupported Tiled resources are not supported. Tier1 Tier_1 tiled resources are supported. Tier2 Tier_2 tiled resources are supported."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.html",
    "title": "Struct D3D11TextureCubeSrv",
    "keywords": "Struct D3D11TextureCubeSrv Specifies the subresource from a cube texture to use in a shader resource view. Implements IEquatable < D3D11TextureCubeSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11TextureCubeSrv : IEquatable<D3D11TextureCubeSrv> Properties | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11TextureCubeSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11TextureCubeSrv other) Parameters Type Name Description D3D11TextureCubeSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11TextureCubeSrv, D3D11TextureCubeSrv) Compares two D3D11TextureCubeSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11TextureCubeSrv left, D3D11TextureCubeSrv right) Parameters Type Name Description D3D11TextureCubeSrv left The left D3D11TextureCubeSrv to compare. D3D11TextureCubeSrv right The right D3D11TextureCubeSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11TextureCubeSrv, D3D11TextureCubeSrv) Compares two D3D11TextureCubeSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11TextureCubeSrv left, D3D11TextureCubeSrv right) Parameters Type Name Description D3D11TextureCubeSrv left The left D3D11TextureCubeSrv to compare. D3D11TextureCubeSrv right The right D3D11TextureCubeSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.html",
    "title": "Enum D3D11TextureCubeFace",
    "keywords": "Enum D3D11TextureCubeFace The different faces of a cube texture. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11TextureCubeFace Fields Name Description NegativeX Negative X face. NegativeY Negative Y face. NegativeZ Negative Z face. PositiveX Positive X face. PositiveY Positive Y face. PositiveZ Positive Z face."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.html",
    "title": "Struct D3D11TextureCubeArraySrv",
    "keywords": "Struct D3D11TextureCubeArraySrv Specifies the subresources from an array of cube textures to use in a shader resource view. Implements IEquatable < D3D11TextureCubeArraySrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11TextureCubeArraySrv : IEquatable<D3D11TextureCubeArraySrv> Properties | Improve this Doc View Source First2DArrayFace Gets or sets the index of the first 2D texture to use. Declaration public uint First2DArrayFace { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source NumCubes Gets or sets the number of cube textures in the array. Declaration public uint NumCubes { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11TextureCubeArraySrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11TextureCubeArraySrv other) Parameters Type Name Description D3D11TextureCubeArraySrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11TextureCubeArraySrv, D3D11TextureCubeArraySrv) Compares two D3D11TextureCubeArraySrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11TextureCubeArraySrv left, D3D11TextureCubeArraySrv right) Parameters Type Name Description D3D11TextureCubeArraySrv left The left D3D11TextureCubeArraySrv to compare. D3D11TextureCubeArraySrv right The right D3D11TextureCubeArraySrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11TextureCubeArraySrv, D3D11TextureCubeArraySrv) Compares two D3D11TextureCubeArraySrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11TextureCubeArraySrv left, D3D11TextureCubeArraySrv right) Parameters Type Name Description D3D11TextureCubeArraySrv left The left D3D11TextureCubeArraySrv to compare. D3D11TextureCubeArraySrv right The right D3D11TextureCubeArraySrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.html",
    "title": "Struct D3D11Texture2DDesc",
    "keywords": "Struct D3D11Texture2DDesc Describes a 2D texture. Implements IEquatable < D3D11Texture2DDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DDesc : IEquatable<D3D11Texture2DDesc> Constructors | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, UInt32, UInt32) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, uint sampleCount, uint sampleQuality) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. UInt32 sampleCount The sample count. UInt32 sampleQuality The sample quality. | Improve this Doc View Source D3D11Texture2DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, UInt32, UInt32, D3D11ResourceMiscOptions) Initializes a new instance of the D3D11Texture2DDesc struct. Declaration public D3D11Texture2DDesc(DxgiFormat format, uint width, uint height, uint arraySize, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, uint sampleCount, uint sampleQuality, D3D11ResourceMiscOptions miscOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 arraySize The number of textures in the texture array. UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. UInt32 sampleCount The sample count. UInt32 sampleQuality The sample quality. D3D11ResourceMiscOptions miscOptions Options that identify other, less common resource options. Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures in the texture array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source BindOptions Gets or sets options for binding to pipeline stages. Declaration public D3D11BindOptions BindOptions { get; set; } Property Value Type Description D3D11BindOptions | Improve this Doc View Source CpuAccessOptions Gets or sets options to specify the types of CPU access allowed. Declaration public D3D11CpuAccessOptions CpuAccessOptions { get; set; } Property Value Type Description D3D11CpuAccessOptions | Improve this Doc View Source Format Gets or sets the texture format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets the texture height (in texels). Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels in the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MiscOptions Gets or sets options that identify other, less common resource options. Declaration public D3D11ResourceMiscOptions MiscOptions { get; set; } Property Value Type Description D3D11ResourceMiscOptions | Improve this Doc View Source SampleDesc Gets or sets the multisampling parameters for the texture. Declaration public DxgiSampleDesc SampleDesc { get; set; } Property Value Type Description DxgiSampleDesc | Improve this Doc View Source Usage Gets or sets a value indicating how the texture is to be read from and written to. Declaration public D3D11Usage Usage { get; set; } Property Value Type Description D3D11Usage | Improve this Doc View Source Width Gets or sets the texture width (in texels). Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DDesc other) Parameters Type Name Description D3D11Texture2DDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DDesc, D3D11Texture2DDesc) Compares two D3D11Texture2DDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DDesc left, D3D11Texture2DDesc right) Parameters Type Name Description D3D11Texture2DDesc left The left D3D11Texture2DDesc to compare. D3D11Texture2DDesc right The right D3D11Texture2DDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DDesc, D3D11Texture2DDesc) Compares two D3D11Texture2DDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DDesc left, D3D11Texture2DDesc right) Parameters Type Name Description D3D11Texture2DDesc left The left D3D11Texture2DDesc to compare. D3D11Texture2DDesc right The right D3D11Texture2DDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.html",
    "title": "Struct D3D11Texture2DArrayUav",
    "keywords": "Struct D3D11Texture2DArrayUav Describes an array of unordered-access 2D texture resources. Implements IEquatable < D3D11Texture2DArrayUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DArrayUav : IEquatable<D3D11Texture2DArrayUav> Properties | Improve this Doc View Source ArraySize Gets or sets the number of slices in the array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the zero-based index of the first array slice to be accessed. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the mipmap slice index. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DArrayUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DArrayUav other) Parameters Type Name Description D3D11Texture2DArrayUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DArrayUav, D3D11Texture2DArrayUav) Compares two D3D11Texture2DArrayUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DArrayUav left, D3D11Texture2DArrayUav right) Parameters Type Name Description D3D11Texture2DArrayUav left The left D3D11Texture2DArrayUav to compare. D3D11Texture2DArrayUav right The right D3D11Texture2DArrayUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DArrayUav, D3D11Texture2DArrayUav) Compares two D3D11Texture2DArrayUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DArrayUav left, D3D11Texture2DArrayUav right) Parameters Type Name Description D3D11Texture2DArrayUav left The left D3D11Texture2DArrayUav to compare. D3D11Texture2DArrayUav right The right D3D11Texture2DArrayUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.html",
    "title": "Struct D3D11Texture2DArraySrv",
    "keywords": "Struct D3D11Texture2DArraySrv Specifies the subresources from an array of 2D textures to use in a shader resource view. Implements IEquatable < D3D11Texture2DArraySrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DArraySrv : IEquatable<D3D11Texture2DArraySrv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures in the array. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DArraySrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DArraySrv other) Parameters Type Name Description D3D11Texture2DArraySrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DArraySrv, D3D11Texture2DArraySrv) Compares two D3D11Texture2DArraySrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DArraySrv left, D3D11Texture2DArraySrv right) Parameters Type Name Description D3D11Texture2DArraySrv left The left D3D11Texture2DArraySrv to compare. D3D11Texture2DArraySrv right The right D3D11Texture2DArraySrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DArraySrv, D3D11Texture2DArraySrv) Compares two D3D11Texture2DArraySrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DArraySrv left, D3D11Texture2DArraySrv right) Parameters Type Name Description D3D11Texture2DArraySrv left The left D3D11Texture2DArraySrv to compare. D3D11Texture2DArraySrv right The right D3D11Texture2DArraySrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.html",
    "title": "Struct D3D11Texture2DArrayRtv",
    "keywords": "Struct D3D11Texture2DArrayRtv Specifies the subresources from an array of 2D textures to use in a render-target view. Implements IEquatable < D3D11Texture2DArrayRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DArrayRtv : IEquatable<D3D11Texture2DArrayRtv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures in the array to use in the render target view. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the index of the mipmap level to use mip slice. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DArrayRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DArrayRtv other) Parameters Type Name Description D3D11Texture2DArrayRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DArrayRtv, D3D11Texture2DArrayRtv) Compares two D3D11Texture2DArrayRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DArrayRtv left, D3D11Texture2DArrayRtv right) Parameters Type Name Description D3D11Texture2DArrayRtv left The left D3D11Texture2DArrayRtv to compare. D3D11Texture2DArrayRtv right The right D3D11Texture2DArrayRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DArrayRtv, D3D11Texture2DArrayRtv) Compares two D3D11Texture2DArrayRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DArrayRtv left, D3D11Texture2DArrayRtv right) Parameters Type Name Description D3D11Texture2DArrayRtv left The left D3D11Texture2DArrayRtv to compare. D3D11Texture2DArrayRtv right The right D3D11Texture2DArrayRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.html",
    "title": "Struct D3D11Texture2DArrayDsv",
    "keywords": "Struct D3D11Texture2DArrayDsv Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view. Implements IEquatable < D3D11Texture2DArrayDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DArrayDsv : IEquatable<D3D11Texture2DArrayDsv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the index of the first mipmap level to use. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DArrayDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DArrayDsv other) Parameters Type Name Description D3D11Texture2DArrayDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DArrayDsv, D3D11Texture2DArrayDsv) Compares two D3D11Texture2DArrayDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DArrayDsv left, D3D11Texture2DArrayDsv right) Parameters Type Name Description D3D11Texture2DArrayDsv left The left D3D11Texture2DArrayDsv to compare. D3D11Texture2DArrayDsv right The right D3D11Texture2DArrayDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DArrayDsv, D3D11Texture2DArrayDsv) Compares two D3D11Texture2DArrayDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DArrayDsv left, D3D11Texture2DArrayDsv right) Parameters Type Name Description D3D11Texture2DArrayDsv left The left D3D11Texture2DArrayDsv to compare. D3D11Texture2DArrayDsv right The right D3D11Texture2DArrayDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2D.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2D.html",
    "title": "Class D3D11Texture2D",
    "keywords": "Class D3D11Texture2D A 2D texture interface manages texel data, which is structured memory. Inheritance Object D3D11DeviceChild D3D11Resource D3D11Texture2D Implements IDisposable ID3D11Releasable Inherited Members D3D11Resource.Dimension D3D11Resource.EvictionPriority D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Texture2D : D3D11Resource, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the properties of the texture resource. Declaration public D3D11Texture2DDesc Description { get; } Property Value Type Description D3D11Texture2DDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.html",
    "title": "Struct D3D11Texture1DUav",
    "keywords": "Struct D3D11Texture1DUav Describes a unordered-access 1D texture resource. Implements IEquatable < D3D11Texture1DUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DUav : IEquatable<D3D11Texture1DUav> Properties | Improve this Doc View Source MipSlice Gets or sets the mipmap slice index. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DUav other) Parameters Type Name Description D3D11Texture1DUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DUav, D3D11Texture1DUav) Compares two D3D11Texture1DUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DUav left, D3D11Texture1DUav right) Parameters Type Name Description D3D11Texture1DUav left The left D3D11Texture1DUav to compare. D3D11Texture1DUav right The right D3D11Texture1DUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DUav, D3D11Texture1DUav) Compares two D3D11Texture1DUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DUav left, D3D11Texture1DUav right) Parameters Type Name Description D3D11Texture1DUav left The left D3D11Texture1DUav to compare. D3D11Texture1DUav right The right D3D11Texture1DUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.html",
    "title": "Struct D3D11Texture1DSrv",
    "keywords": "Struct D3D11Texture1DSrv Specifies the subresource from a 1D texture to use in a shader resource view. Implements IEquatable < D3D11Texture1DSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture1DSrv : IEquatable<D3D11Texture1DSrv> Properties | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture1DSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture1DSrv other) Parameters Type Name Description D3D11Texture1DSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture1DSrv, D3D11Texture1DSrv) Compares two D3D11Texture1DSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture1DSrv left, D3D11Texture1DSrv right) Parameters Type Name Description D3D11Texture1DSrv left The left D3D11Texture1DSrv to compare. D3D11Texture1DSrv right The right D3D11Texture1DSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture1DSrv, D3D11Texture1DSrv) Compares two D3D11Texture1DSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture1DSrv left, D3D11Texture1DSrv right) Parameters Type Name Description D3D11Texture1DSrv left The left D3D11Texture1DSrv to compare. D3D11Texture1DSrv right The right D3D11Texture1DSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.html",
    "title": "Struct D3D11SubResourceData",
    "keywords": "Struct D3D11SubResourceData Specifies data for initializing a subresource. Implements IEquatable < D3D11SubResourceData > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11SubResourceData : IEquatable<D3D11SubResourceData> Constructors | Improve this Doc View Source D3D11SubResourceData(Array, UInt32) Initializes a new instance of the D3D11SubResourceData struct. Declaration public D3D11SubResourceData(Array data, uint pitch) Parameters Type Name Description Array data The initialization data. UInt32 pitch The distance (in bytes) from the beginning of one line of a texture to the next line. | Improve this Doc View Source D3D11SubResourceData(Array, UInt32, UInt32) Initializes a new instance of the D3D11SubResourceData struct. Declaration public D3D11SubResourceData(Array data, uint pitch, uint slicePitch) Parameters Type Name Description Array data The initialization data. UInt32 pitch The distance (in bytes) from the beginning of one line of a texture to the next line. UInt32 slicePitch The distance (in bytes) from the beginning of one depth level to the next. Properties | Improve this Doc View Source Data Gets the initialization data. Declaration public Array Data { get; } Property Value Type Description Array | Improve this Doc View Source Pitch Gets the distance (in bytes) from the beginning of one line of a texture to the next line. Declaration public uint Pitch { get; } Property Value Type Description UInt32 | Improve this Doc View Source SlicePitch Gets the distance (in bytes) from the beginning of one depth level to the next. Declaration public uint SlicePitch { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11SubResourceData) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11SubResourceData other) Parameters Type Name Description D3D11SubResourceData other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11SubResourceData, D3D11SubResourceData) Compares two D3D11SubResourceData objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11SubResourceData left, D3D11SubResourceData right) Parameters Type Name Description D3D11SubResourceData left The left D3D11SubResourceData to compare. D3D11SubResourceData right The right D3D11SubResourceData to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11SubResourceData, D3D11SubResourceData) Compares two D3D11SubResourceData objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11SubResourceData left, D3D11SubResourceData right) Parameters Type Name Description D3D11SubResourceData left The left D3D11SubResourceData to compare. D3D11SubResourceData right The right D3D11SubResourceData to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.html",
    "title": "Struct D3D11StreamOutputDeclarationEntry",
    "keywords": "Struct D3D11StreamOutputDeclarationEntry Description of a vertex element in a vertex buffer in an output slot. Implements IEquatable < D3D11StreamOutputDeclarationEntry > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11StreamOutputDeclarationEntry : IEquatable<D3D11StreamOutputDeclarationEntry> Constructors | Improve this Doc View Source D3D11StreamOutputDeclarationEntry(UInt32, String, UInt32, Byte, Byte, Byte) Initializes a new instance of the D3D11StreamOutputDeclarationEntry struct. Declaration public D3D11StreamOutputDeclarationEntry(uint stream, string semanticName, uint semanticIndex, byte startComponent, byte componentCount, byte outputSlot) Parameters Type Name Description UInt32 stream The stream number. String semanticName The type of output element. UInt32 semanticIndex The output element's index. Byte startComponent Which component of the entry to begin writing out to. Valid values are 0 to 3. Byte componentCount The number of components of the entry to write out to. Valid values are 1 to 4. Byte outputSlot The associated stream output buffer that is bound to the pipeline. Properties | Improve this Doc View Source ComponentCount Gets or sets the number of components of the entry to write out to. Valid values are 1 to 4. Declaration public byte ComponentCount { get; set; } Property Value Type Description Byte | Improve this Doc View Source OutputSlot Gets or sets the associated stream output buffer that is bound to the pipeline. Declaration public byte OutputSlot { get; set; } Property Value Type Description Byte | Improve this Doc View Source SemanticIndex Gets or sets the output element's index. Declaration public uint SemanticIndex { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SemanticName Gets or sets the type of output element. Declaration public string SemanticName { get; set; } Property Value Type Description String | Improve this Doc View Source StartComponent Gets or sets a value indicating which component of the entry to begin writing out to. Valid values are 0 to 3. Declaration public byte StartComponent { get; set; } Property Value Type Description Byte | Improve this Doc View Source Stream Gets or sets the stream number. Declaration public uint Stream { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11StreamOutputDeclarationEntry) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11StreamOutputDeclarationEntry other) Parameters Type Name Description D3D11StreamOutputDeclarationEntry other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11StreamOutputDeclarationEntry, D3D11StreamOutputDeclarationEntry) Compares two D3D11StreamOutputDeclarationEntry objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11StreamOutputDeclarationEntry left, D3D11StreamOutputDeclarationEntry right) Parameters Type Name Description D3D11StreamOutputDeclarationEntry left The left D3D11StreamOutputDeclarationEntry to compare. D3D11StreamOutputDeclarationEntry right The right D3D11StreamOutputDeclarationEntry to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11StreamOutputDeclarationEntry, D3D11StreamOutputDeclarationEntry) Compares two D3D11StreamOutputDeclarationEntry objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11StreamOutputDeclarationEntry left, D3D11StreamOutputDeclarationEntry right) Parameters Type Name Description D3D11StreamOutputDeclarationEntry left The left D3D11StreamOutputDeclarationEntry to compare. D3D11StreamOutputDeclarationEntry right The right D3D11StreamOutputDeclarationEntry to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.html",
    "title": "Enum D3D11StencilOperation",
    "keywords": "Enum D3D11StencilOperation The stencil operations that can be performed during depth-stencil testing. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11StencilOperation Fields Name Description Decrement Decrement the stencil value by 1, and wrap the result if necessary. DecrementSaturate Decrement the stencil value by 1, and clamp the result. Increment Increment the stencil value by 1, and wrap the result if necessary. IncrementSaturate Increment the stencil value by 1, and clamp the result. Invert Invert the stencil data. Keep Keep the existing stencil data. None No value. Replace Set the stencil data to the reference value. Zero Set the stencil data to 0."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.html",
    "title": "Enum D3D11SrvDimension",
    "keywords": "Enum D3D11SrvDimension These flags identify the type of resource that will be viewed as a shader resource. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11SrvDimension Fields Name Description Buffer The resource is a buffer. BufferEx The resource is a raw buffer. Texture1D The resource is a 1D texture. Texture1DArray The resource is an array of 1D textures. Texture2D The resource is a 2D texture. Texture2DArray The resource is an array of 2D textures. Texture2DMs The resource is a multisampling 2D texture. Texture2DMsArray The resource is an array of multisampling 2D textures. Texture3D The resource is a 3D texture. TextureCube The resource is a cube texture. TextureCubeArray The resource is an array of cube textures. Unknown The type is unknown."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.html",
    "title": "Struct D3D11ShaderResourceViewDesc",
    "keywords": "Struct D3D11ShaderResourceViewDesc Describes a shader resource view. Implements IEquatable < D3D11ShaderResourceViewDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11ShaderResourceViewDesc : IEquatable<D3D11ShaderResourceViewDesc> Constructors | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Buffer, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Buffer buffer, DxgiFormat format, uint firstElement, uint numElements) Parameters Type Name Description D3D11Buffer buffer A buffer. DxgiFormat format The viewing format. UInt32 firstElement The number of bytes between the beginning of the buffer and the first element to access. UInt32 numElements The total number of elements in the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Buffer, DxgiFormat, UInt32, UInt32, D3D11BufferExSrvOptions) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Buffer buffer, DxgiFormat format, uint firstElement, uint numElements, D3D11BufferExSrvOptions options) Parameters Type Name Description D3D11Buffer buffer A buffer. DxgiFormat format The viewing format. UInt32 firstElement The number of bytes between the beginning of the buffer and the first element to access. UInt32 numElements The total number of elements in the view. D3D11BufferExSrvOptions options The view options for a buffer. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip Index of the most detailed mipmap level to use. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip Index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip Index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip Index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BufferExSrvOptions) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice, uint arraySize, D3D11BufferExSrvOptions bufferExOptions) Parameters Type Name Description D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip Index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. D3D11BufferExSrvOptions bufferExOptions The view options for a buffer | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension, DxgiFormat) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture1D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture1D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension, DxgiFormat) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension, DxgiFormat format) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension, DxgiFormat, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture2D, D3D11SrvDimension, DxgiFormat, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture2D texture, D3D11SrvDimension viewDimension, DxgiFormat format, uint mostDetailedMip, uint mipLevels, uint firstArraySlice, uint arraySize) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11SrvDimension viewDimension The resource type of the view. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. UInt32 firstArraySlice The index of the first element to use in an array of elements. UInt32 arraySize The number of elements in the array. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture3D) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture3D texture) Parameters Type Name Description D3D11Texture3D texture A 3D texture. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture3D, DxgiFormat) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture3D texture, DxgiFormat format) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture3D, DxgiFormat, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mostDetailedMip) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. | Improve this Doc View Source D3D11ShaderResourceViewDesc(D3D11Texture3D, DxgiFormat, UInt32, UInt32) Initializes a new instance of the D3D11ShaderResourceViewDesc struct. Declaration public D3D11ShaderResourceViewDesc(D3D11Texture3D texture, DxgiFormat format, uint mostDetailedMip, uint mipLevels) Parameters Type Name Description D3D11Texture3D texture A 3D texture. DxgiFormat format The viewing format. UInt32 mostDetailedMip The index of the most detailed mipmap level to use. UInt32 mipLevels The maximum number of mipmap levels for the view. Properties | Improve this Doc View Source Buffer Gets or sets the resource as a buffer using information from a shader resource view. Declaration public D3D11BufferSrv Buffer { get; set; } Property Value Type Description D3D11BufferSrv | Improve this Doc View Source BufferEx Gets or sets the resource as a raw buffer using information from a shader resource view. Declaration public D3D11BufferExSrv BufferEx { get; set; } Property Value Type Description D3D11BufferExSrv | Improve this Doc View Source Format Gets or sets the viewing format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Texture1D Gets or sets the resource as a 1D texture using information from a shader resource view. Declaration public D3D11Texture1DSrv Texture1D { get; set; } Property Value Type Description D3D11Texture1DSrv | Improve this Doc View Source Texture1DArray Gets or sets the resource as a 1D-texture array using information from a shader resource view. Declaration public D3D11Texture1DArraySrv Texture1DArray { get; set; } Property Value Type Description D3D11Texture1DArraySrv | Improve this Doc View Source Texture2D Gets or sets the resource as a 2D-texture using information from a shader resource view. Declaration public D3D11Texture2DSrv Texture2D { get; set; } Property Value Type Description D3D11Texture2DSrv | Improve this Doc View Source Texture2DArray Gets or sets the resource as a 2D-texture array using information from a shader resource view. Declaration public D3D11Texture2DArraySrv Texture2DArray { get; set; } Property Value Type Description D3D11Texture2DArraySrv | Improve this Doc View Source Texture2DMs Gets or sets the resource as a 2D-multisampled texture using information from a shader resource view. Declaration public D3D11Texture2DMsSrv Texture2DMs { get; set; } Property Value Type Description D3D11Texture2DMsSrv | Improve this Doc View Source Texture2DMsArray Gets or sets the resource as a 2D-multisampled-texture array using information from a shader resource view. Declaration public D3D11Texture2DMsArraySrv Texture2DMsArray { get; set; } Property Value Type Description D3D11Texture2DMsArraySrv | Improve this Doc View Source Texture3D Gets or sets the resource as a 3D texture using information from a shader resource view. Declaration public D3D11Texture3DSrv Texture3D { get; set; } Property Value Type Description D3D11Texture3DSrv | Improve this Doc View Source TextureCube Gets or sets the resource as a 3D-cube texture using information from a shader resource view. Declaration public D3D11TextureCubeSrv TextureCube { get; set; } Property Value Type Description D3D11TextureCubeSrv | Improve this Doc View Source TextureCubeArray Gets or sets the resource as a 3D-cube-texture array using information from a shader resource view. Declaration public D3D11TextureCubeArraySrv TextureCubeArray { get; set; } Property Value Type Description D3D11TextureCubeArraySrv | Improve this Doc View Source ViewDimension Gets or sets the resource type of the view. Declaration public D3D11SrvDimension ViewDimension { get; set; } Property Value Type Description D3D11SrvDimension Methods | Improve this Doc View Source Equals(D3D11ShaderResourceViewDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11ShaderResourceViewDesc other) Parameters Type Name Description D3D11ShaderResourceViewDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11ShaderResourceViewDesc, D3D11ShaderResourceViewDesc) Compares two D3D11ShaderResourceViewDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11ShaderResourceViewDesc left, D3D11ShaderResourceViewDesc right) Parameters Type Name Description D3D11ShaderResourceViewDesc left The left D3D11ShaderResourceViewDesc to compare. D3D11ShaderResourceViewDesc right The right D3D11ShaderResourceViewDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11ShaderResourceViewDesc, D3D11ShaderResourceViewDesc) Compares two D3D11ShaderResourceViewDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11ShaderResourceViewDesc left, D3D11ShaderResourceViewDesc right) Parameters Type Name Description D3D11ShaderResourceViewDesc left The left D3D11ShaderResourceViewDesc to compare. D3D11ShaderResourceViewDesc right The right D3D11ShaderResourceViewDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.html",
    "title": "Class D3D11ShaderResourceView",
    "keywords": "Class D3D11ShaderResourceView A shader-resource-view interface specifies the subresources a shader can access during rendering. Inheritance Object D3D11DeviceChild D3D11View D3D11ShaderResourceView Implements IDisposable ID3D11Releasable Inherited Members D3D11View.GetResource() D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11ShaderResourceView : D3D11View, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the shader resource view's description. Declaration public D3D11ShaderResourceViewDesc Description { get; } Property Value Type Description D3D11ShaderResourceViewDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports.html",
    "title": "Enum D3D11ShaderMinPrecisionSupports",
    "keywords": "Enum D3D11ShaderMinPrecisionSupports Values that specify minimum precision levels at shader stages. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11ShaderMinPrecisionSupports Fields Name Description None No option. Only full 32-bit precision. SixteenBit Minimum precision level is 16-bit. TenBit Minimum precision level is 10-bit."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11SamplerState.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11SamplerState.html",
    "title": "Class D3D11SamplerState",
    "keywords": "Class D3D11SamplerState The sampler-state interface holds a description for sampler state that you can bind to any shader stage of the pipeline for reference by texture sample operations. Inheritance Object D3D11DeviceChild D3D11SamplerState Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11SamplerState : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the description for sampler state that you used to create the sampler-state object. Declaration public D3D11SamplerDesc Description { get; } Property Value Type Description D3D11SamplerDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Rect.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Rect.html",
    "title": "Struct D3D11Rect",
    "keywords": "Struct D3D11Rect Defines the coordinates of the upper-left and lower-right corners of a rectangle. Implements IEquatable < D3D11Rect > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Rect : IEquatable<D3D11Rect> Constructors | Improve this Doc View Source D3D11Rect(Int32, Int32, Int32, Int32) Initializes a new instance of the D3D11Rect struct. Declaration public D3D11Rect(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left The x-coordinate of the upper-left corner of a rectangle. Int32 top The y-coordinate of the upper-left corner of a rectangle. Int32 right The x-coordinate of the lower-right corner of a rectangle. Int32 bottom The y-coordinate of the lower-right corner of a rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of a rectangle. Declaration public int Bottom { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of a rectangle. Declaration public int Left { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of a rectangle. Declaration public int Right { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of a rectangle. Declaration public int Top { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(D3D11Rect) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Rect other) Parameters Type Name Description D3D11Rect other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(D3D11Rect, D3D11Rect) Compares two D3D11Rect objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Rect left, D3D11Rect right) Parameters Type Name Description D3D11Rect left The left D3D11Rect to compare. D3D11Rect right The right D3D11Rect to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Rect, D3D11Rect) Compares two D3D11Rect objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Rect left, D3D11Rect right) Parameters Type Name Description D3D11Rect left The left D3D11Rect to compare. D3D11Rect right The right D3D11Rect to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.html",
    "title": "Class D3D11RasterizerState",
    "keywords": "Class D3D11RasterizerState The rasterizer-state interface holds a description for rasterizer state that you can bind to the rasterizer stage. Inheritance Object D3D11DeviceChild D3D11RasterizerState Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11RasterizerState : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the description for rasterizer state that you used to create the rasterizer-state object. Declaration public D3D11RasterizerDesc Description { get; } Property Value Type Description D3D11RasterizerDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.html",
    "title": "Struct D3D11RasterizerDesc",
    "keywords": "Struct D3D11RasterizerDesc Describes rasterizer state. Implements IEquatable < D3D11RasterizerDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11RasterizerDesc : IEquatable<D3D11RasterizerDesc> Constructors | Improve this Doc View Source D3D11RasterizerDesc(D3D11FillMode, D3D11CullMode, Boolean, Int32, Single, Single, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the D3D11RasterizerDesc struct. Declaration public D3D11RasterizerDesc(D3D11FillMode fillMode, D3D11CullMode cullMode, bool isFrontCounterClockwise, int depthBias, float depthBiasClamp, float slopeScaledDepthBias, bool isDepthClipEnabled, bool isScissorEnabled, bool isMultisampleEnabled, bool isAntialiasedLineEnabled) Parameters Type Name Description D3D11FillMode fillMode Determines the fill mode to use when rendering. D3D11CullMode cullMode Indicates whether triangles facing the specified direction are not drawn. Boolean isFrontCounterClockwise Determines if a triangle is front- or back-facing. Int32 depthBias The depth value added to a given pixel. Single depthBiasClamp The maximum depth bias of a pixel. Single slopeScaledDepthBias The scalar on a given pixel's slope. Boolean isDepthClipEnabled Specifies whether clipping based on distance is enabled. Boolean isScissorEnabled Specifies whether scissor-rectangle culling is enabled. Boolean isMultisampleEnabled Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Boolean isAntialiasedLineEnabled Specifies whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false . Properties | Improve this Doc View Source CullMode Gets or sets a value indicating whether triangles facing the specified direction are not drawn. Declaration public D3D11CullMode CullMode { get; set; } Property Value Type Description D3D11CullMode | Improve this Doc View Source Default Gets default rasterizer-state values. Declaration public static D3D11RasterizerDesc Default { get; } Property Value Type Description D3D11RasterizerDesc | Improve this Doc View Source DepthBias Gets or sets the depth value added to a given pixel. Declaration public int DepthBias { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DepthBiasClamp Gets or sets the maximum depth bias of a pixel. Declaration public float DepthBiasClamp { get; set; } Property Value Type Description Single | Improve this Doc View Source FillMode Gets or sets the fill mode to use when rendering. Declaration public D3D11FillMode FillMode { get; set; } Property Value Type Description D3D11FillMode | Improve this Doc View Source IsAntialiasedLineEnabled Gets or sets a value indicating whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false . Declaration public bool IsAntialiasedLineEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsDepthClipEnabled Gets or sets a value indicating whether clipping based on distance is enabled. Declaration public bool IsDepthClipEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsFrontCounterClockwise Gets or sets a value indicating whether a triangle is front- or back-facing. Declaration public bool IsFrontCounterClockwise { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsMultisampleEnabled Gets or sets a value indicating whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Declaration public bool IsMultisampleEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsScissorEnabled Gets or sets a value indicating whether scissor-rectangle culling is enabled. Declaration public bool IsScissorEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SlopeScaledDepthBias Gets or sets the scalar on a given pixel's slope. Declaration public float SlopeScaledDepthBias { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D3D11RasterizerDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11RasterizerDesc other) Parameters Type Name Description D3D11RasterizerDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11RasterizerDesc, D3D11RasterizerDesc) Compares two D3D11RasterizerDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11RasterizerDesc left, D3D11RasterizerDesc right) Parameters Type Name Description D3D11RasterizerDesc left The left D3D11RasterizerDesc to compare. D3D11RasterizerDesc right The right D3D11RasterizerDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11RasterizerDesc, D3D11RasterizerDesc) Compares two D3D11RasterizerDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11RasterizerDesc left, D3D11RasterizerDesc right) Parameters Type Name Description D3D11RasterizerDesc left The left D3D11RasterizerDesc to compare. D3D11RasterizerDesc right The right D3D11RasterizerDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions.html",
    "title": "Enum D3D11RaiseOptions",
    "keywords": "Enum D3D11RaiseOptions Option(s) for raising an error to a non-continuable exception. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11RaiseOptions Fields Name Description DriverInternalError Raise an internal driver error to a non-continuable exception. None No option."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryType.html",
    "title": "Enum D3D11QueryType",
    "keywords": "Enum D3D11QueryType Query types. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11QueryType Fields Name Description Event Determines whether or not the GPU is finished processing commands. Occlusion Get the number of samples that passed the depth and stencil tests in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . OcclusionPredicate Similar to Occlusion , except GetData returns a BOOL indicating whether or not any samples passed the depth and stencil tests - TRUE meaning at least one passed, FALSE meaning none passed. PipelineStatistics Get pipeline statistics, such as the number of pixel shader invocations in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputOverflowPredicate Determines whether or not any of the streaming output buffers overflowed in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputOverflowPredicateStream0 Determines whether or not the stream 0 output buffers overflowed in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputOverflowPredicateStream1 Determines whether or not the stream 1 output buffers overflowed in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputOverflowPredicateStream2 Determines whether or not the stream 2 output buffers overflowed in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputOverflowPredicateStream3 Determines whether or not the stream 3 output buffers overflowed in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . StreamOutputStatistics Get streaming output statistics. StreamOutputStatisticsStream0 Get streaming output statistics for stream 0. StreamOutputStatisticsStream1 Get streaming output statistics for stream 1. StreamOutputStatisticsStream2 Get streaming output statistics for stream 2. StreamOutputStatisticsStream3 Get streaming output statistics for stream 3. Timestamp Get a timestamp value. TimestampDisjoint Determines whether or not a Timestamp is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions.html",
    "title": "Enum D3D11QueryMiscOptions",
    "keywords": "Enum D3D11QueryMiscOptions Flags that describe miscellaneous query behavior. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11QueryMiscOptions Fields Name Description None No option. PredicateHint Tell the hardware that if it is not yet sure if something is hidden or not to draw it anyway. This is only used with an occlusion predicate."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.html",
    "title": "Struct D3D11QueryDesc",
    "keywords": "Struct D3D11QueryDesc Describes a query. Implements IEquatable < D3D11QueryDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11QueryDesc : IEquatable<D3D11QueryDesc> Constructors | Improve this Doc View Source D3D11QueryDesc(D3D11QueryType) Initializes a new instance of the D3D11QueryDesc struct. Declaration public D3D11QueryDesc(D3D11QueryType query) Parameters Type Name Description D3D11QueryType query The type of query. | Improve this Doc View Source D3D11QueryDesc(D3D11QueryType, D3D11QueryMiscOptions) Initializes a new instance of the D3D11QueryDesc struct. Declaration public D3D11QueryDesc(D3D11QueryType query, D3D11QueryMiscOptions miscOptions) Parameters Type Name Description D3D11QueryType query The type of query. D3D11QueryMiscOptions miscOptions Miscellaneous options. Properties | Improve this Doc View Source MiscOptions Gets or sets miscellaneous options. Declaration public D3D11QueryMiscOptions MiscOptions { get; set; } Property Value Type Description D3D11QueryMiscOptions | Improve this Doc View Source Query Gets or sets the type of query. Declaration public D3D11QueryType Query { get; set; } Property Value Type Description D3D11QueryType Methods | Improve this Doc View Source Equals(D3D11QueryDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11QueryDesc other) Parameters Type Name Description D3D11QueryDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11QueryDesc, D3D11QueryDesc) Compares two D3D11QueryDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11QueryDesc left, D3D11QueryDesc right) Parameters Type Name Description D3D11QueryDesc left The left D3D11QueryDesc to compare. D3D11QueryDesc right The right D3D11QueryDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11QueryDesc, D3D11QueryDesc) Compares two D3D11QueryDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11QueryDesc left, D3D11QueryDesc right) Parameters Type Name Description D3D11QueryDesc left The left D3D11QueryDesc to compare. D3D11QueryDesc right The right D3D11QueryDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.html",
    "title": "Struct D3D11QueryDataTimestampDisjoint",
    "keywords": "Struct D3D11QueryDataTimestampDisjoint Query information about the reliability of a timestamp query. Implements IEquatable < D3D11QueryDataTimestampDisjoint > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11QueryDataTimestampDisjoint : IEquatable<D3D11QueryDataTimestampDisjoint> Properties | Improve this Doc View Source Frequency Gets a value indicating how frequently the GPU counter increments in Hz. Declaration public ulong Frequency { get; } Property Value Type Description UInt64 | Improve this Doc View Source IsDisjoint Gets a value indicating whether the timestamp counter is discontinuous or disjoint. Declaration public bool IsDisjoint { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11QueryDataTimestampDisjoint) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11QueryDataTimestampDisjoint other) Parameters Type Name Description D3D11QueryDataTimestampDisjoint other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11QueryDataTimestampDisjoint, D3D11QueryDataTimestampDisjoint) Compares two D3D11QueryDataTimestampDisjoint objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11QueryDataTimestampDisjoint left, D3D11QueryDataTimestampDisjoint right) Parameters Type Name Description D3D11QueryDataTimestampDisjoint left The left D3D11QueryDataTimestampDisjoint to compare. D3D11QueryDataTimestampDisjoint right The right D3D11QueryDataTimestampDisjoint to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11QueryDataTimestampDisjoint, D3D11QueryDataTimestampDisjoint) Compares two D3D11QueryDataTimestampDisjoint objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11QueryDataTimestampDisjoint left, D3D11QueryDataTimestampDisjoint right) Parameters Type Name Description D3D11QueryDataTimestampDisjoint left The left D3D11QueryDataTimestampDisjoint to compare. D3D11QueryDataTimestampDisjoint right The right D3D11QueryDataTimestampDisjoint to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11MapOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11MapOptions.html",
    "title": "Enum D3D11MapOptions",
    "keywords": "Enum D3D11MapOptions Specifies how the CPU should respond when an application calls the Map(D3D11Resource, UInt32, D3D11MapCpuPermission, D3D11MapOptions) method on a resource that is being used by the GPU. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11MapOptions Fields Name Description DoNotWait Specifies that Map(D3D11Resource, UInt32, D3D11MapCpuPermission, D3D11MapOptions) should return WasStillDrawing when the GPU blocks the CPU from accessing a resource. None No option."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.html",
    "title": "Enum D3D11MapCpuPermission",
    "keywords": "Enum D3D11MapCpuPermission Identifies a resource to be accessed for reading and writing by the CPU. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11MapCpuPermission Fields Name Description None No option. Read Resource is mapped for reading. The resource must have been created with read access. ReadWrite Resource is mapped for reading and writing. The resource must have been created with read and write access. Write Resource is mapped for writing. The resource must have been created with write access. WriteDiscard Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access and dynamic usage. WriteNoOverwrite Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and index buffers. The resource must have been created with write access."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11InputLayout.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11InputLayout.html",
    "title": "Class D3D11InputLayout",
    "keywords": "Class D3D11InputLayout An input-layout interface holds a definition of how to feed vertex data that is laid out in memory into the input-assembler stage of the graphics pipeline. Inheritance Object D3D11DeviceChild D3D11InputLayout Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11InputLayout : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.html",
    "title": "Struct D3D11InputElementDesc",
    "keywords": "Struct D3D11InputElementDesc A description of a single element for the input-assembler stage. Implements IEquatable < D3D11InputElementDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11InputElementDesc : IEquatable<D3D11InputElementDesc> Constructors | Improve this Doc View Source D3D11InputElementDesc(String, UInt32, DxgiFormat, UInt32, UInt32, D3D11InputClassification, UInt32) Initializes a new instance of the D3D11InputElementDesc struct. Declaration public D3D11InputElementDesc(string semanticName, uint semanticIndex, DxgiFormat format, uint inputSlot, uint alignedByteOffset, D3D11InputClassification inputSlotClass, uint instanceDataStepRate) Parameters Type Name Description String semanticName The HLSL semantic associated with this element in a shader input-signature. UInt32 semanticIndex The semantic index for the element. DxgiFormat format The data type of the element data. UInt32 inputSlot An integer value that identifies the input-assembler. UInt32 alignedByteOffset Offset (in bytes) between each element. Optional. D3D11InputClassification inputSlotClass Identifies the input data class for a single input slot. UInt32 instanceDataStepRate The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data. Properties | Improve this Doc View Source AlignedByteOffset Gets or sets the offset (in bytes) between each element. Optional. Declaration public uint AlignedByteOffset { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Format Gets or sets the data type of the element data. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source InputSlot Gets or sets an integer value that identifies the input-assembler. Declaration public uint InputSlot { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source InputSlotClass Gets or sets the input data class for a single input slot. Declaration public D3D11InputClassification InputSlotClass { get; set; } Property Value Type Description D3D11InputClassification | Improve this Doc View Source InstanceDataStepRate Gets or sets the number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data. Declaration public uint InstanceDataStepRate { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SemanticIndex Gets or sets the semantic index for the element. Declaration public uint SemanticIndex { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SemanticName Gets or sets the HLSL semantic associated with this element in a shader input-signature. Declaration public string SemanticName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Equals(D3D11InputElementDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11InputElementDesc other) Parameters Type Name Description D3D11InputElementDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11InputElementDesc, D3D11InputElementDesc) Compares two D3D11InputElementDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11InputElementDesc left, D3D11InputElementDesc right) Parameters Type Name Description D3D11InputElementDesc left The left D3D11InputElementDesc to compare. D3D11InputElementDesc right The right D3D11InputElementDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11InputElementDesc, D3D11InputElementDesc) Compares two D3D11InputElementDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11InputElementDesc left, D3D11InputElementDesc right) Parameters Type Name Description D3D11InputElementDesc left The left D3D11InputElementDesc to compare. D3D11InputElementDesc right The right D3D11InputElementDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11InputClassification.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11InputClassification.html",
    "title": "Enum D3D11InputClassification",
    "keywords": "Enum D3D11InputClassification Type of data contained in an input slot. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11InputClassification Fields Name Description PerInstanceData Input data is per-instance data. PerVertexData Input data is per-vertex data."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11HullShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11HullShader.html",
    "title": "Class D3D11HullShader",
    "keywords": "Class D3D11HullShader A hull shader interface manages an executable program (a hull shader) that controls the hull shader stage. Inheritance Object D3D11DeviceChild D3D11HullShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11HullShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11GeometryShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11GeometryShader.html",
    "title": "Class D3D11GeometryShader",
    "keywords": "Class D3D11GeometryShader A geometry shader interface manages an executable program (a geometry shader) that controls the geometry shader stage. Inheritance Object D3D11DeviceChild D3D11GeometryShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11GeometryShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.html",
    "title": "Enum D3D11FormatSupport2",
    "keywords": "Enum D3D11FormatSupport2 Unordered resource support options for a compute shader resource. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11FormatSupport2 Fields Name Description None No value. OutputMergerLogicOperation Format supports logic operations in blend state. Shareable Format supports shareable resources. Tiled Format supports tiled resources. UavAtomicAdd Format supports atomic add. UavAtomicBitwiseOperations Format supports atomic bitwise operations. UavAtomicCompareStoreOrCompareExchange Format supports atomic compare with store or exchange. UavAtomicExchange Format supports atomic exchange. UavAtomicSignedMinOrMax Format supports atomic min and max. UavAtomicUnsignedMinOrMax Format supports atomic unsigned min and max. UavTypedLoad Format supports a typed load. UavTypedStore Format supports a typed store."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.html",
    "title": "Struct D3D11FeatureDataFormatSupport",
    "keywords": "Struct D3D11FeatureDataFormatSupport Describes which resources are supported by the current graphics driver for a given format. Implements IEquatable < D3D11FeatureDataFormatSupport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataFormatSupport : IEquatable<D3D11FeatureDataFormatSupport> Properties | Improve this Doc View Source InFormat Gets the DxgiFormat to return information on. Declaration public DxgiFormat InFormat { get; } Property Value Type Description DxgiFormat | Improve this Doc View Source OutFormatSupport Gets a combination of D3D11FormatSupport flags indicating which resources are supported. Declaration public D3D11FormatSupport OutFormatSupport { get; } Property Value Type Description D3D11FormatSupport Methods | Improve this Doc View Source Equals(D3D11FeatureDataFormatSupport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataFormatSupport other) Parameters Type Name Description D3D11FeatureDataFormatSupport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataFormatSupport, D3D11FeatureDataFormatSupport) Compares two D3D11FeatureDataFormatSupport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataFormatSupport left, D3D11FeatureDataFormatSupport right) Parameters Type Name Description D3D11FeatureDataFormatSupport left The left D3D11FeatureDataFormatSupport to compare. D3D11FeatureDataFormatSupport right The right D3D11FeatureDataFormatSupport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataFormatSupport, D3D11FeatureDataFormatSupport) Compares two D3D11FeatureDataFormatSupport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataFormatSupport left, D3D11FeatureDataFormatSupport right) Parameters Type Name Description D3D11FeatureDataFormatSupport left The left D3D11FeatureDataFormatSupport to compare. D3D11FeatureDataFormatSupport right The right D3D11FeatureDataFormatSupport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.html",
    "title": "Struct D3D11FeatureDataDoubles",
    "keywords": "Struct D3D11FeatureDataDoubles Describes double data type support in the current graphics driver. Implements IEquatable < D3D11FeatureDataDoubles > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataDoubles : IEquatable<D3D11FeatureDataDoubles> Properties | Improve this Doc View Source IsDoublePrecisionFloatShaderOperationsSupported Gets a value indicating whether double types are allowed. Declaration public bool IsDoublePrecisionFloatShaderOperationsSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataDoubles) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataDoubles other) Parameters Type Name Description D3D11FeatureDataDoubles other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataDoubles, D3D11FeatureDataDoubles) Compares two D3D11FeatureDataDoubles objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataDoubles left, D3D11FeatureDataDoubles right) Parameters Type Name Description D3D11FeatureDataDoubles left The left D3D11FeatureDataDoubles to compare. D3D11FeatureDataDoubles right The right D3D11FeatureDataDoubles to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataDoubles, D3D11FeatureDataDoubles) Compares two D3D11FeatureDataDoubles objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataDoubles left, D3D11FeatureDataDoubles right) Parameters Type Name Description D3D11FeatureDataDoubles left The left D3D11FeatureDataDoubles to compare. D3D11FeatureDataDoubles right The right D3D11FeatureDataDoubles to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.html",
    "title": "Struct D3D11FeatureDataD3D9SimpleInstancingSupport",
    "keywords": "Struct D3D11FeatureDataD3D9SimpleInstancingSupport Describes whether simple instancing is supported. Implements IEquatable < D3D11FeatureDataD3D9SimpleInstancingSupport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D9SimpleInstancingSupport : IEquatable<D3D11FeatureDataD3D9SimpleInstancingSupport> Properties | Improve this Doc View Source IsSimpleInstancingSupported Gets a value indicating whether the hardware and driver support simple instancing. Declaration public bool IsSimpleInstancingSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D9SimpleInstancingSupport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D9SimpleInstancingSupport other) Parameters Type Name Description D3D11FeatureDataD3D9SimpleInstancingSupport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D9SimpleInstancingSupport, D3D11FeatureDataD3D9SimpleInstancingSupport) Compares two D3D11FeatureDataD3D9SimpleInstancingSupport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D9SimpleInstancingSupport left, D3D11FeatureDataD3D9SimpleInstancingSupport right) Parameters Type Name Description D3D11FeatureDataD3D9SimpleInstancingSupport left The left D3D11FeatureDataD3D9SimpleInstancingSupport to compare. D3D11FeatureDataD3D9SimpleInstancingSupport right The right D3D11FeatureDataD3D9SimpleInstancingSupport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D9SimpleInstancingSupport, D3D11FeatureDataD3D9SimpleInstancingSupport) Compares two D3D11FeatureDataD3D9SimpleInstancingSupport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D9SimpleInstancingSupport left, D3D11FeatureDataD3D9SimpleInstancingSupport right) Parameters Type Name Description D3D11FeatureDataD3D9SimpleInstancingSupport left The left D3D11FeatureDataD3D9SimpleInstancingSupport to compare. D3D11FeatureDataD3D9SimpleInstancingSupport right The right D3D11FeatureDataD3D9SimpleInstancingSupport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.html",
    "title": "Struct D3D11FeatureDataD3D9ShadowSupport",
    "keywords": "Struct D3D11FeatureDataD3D9ShadowSupport Describes Direct3D 9 shadow support in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D9ShadowSupport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D9ShadowSupport : IEquatable<D3D11FeatureDataD3D9ShadowSupport> Properties | Improve this Doc View Source IsDepthAsTextureWithLessEqualComparisonFilterSupported Gets a value indicating whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to. Declaration public bool IsDepthAsTextureWithLessEqualComparisonFilterSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D9ShadowSupport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D9ShadowSupport other) Parameters Type Name Description D3D11FeatureDataD3D9ShadowSupport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D9ShadowSupport, D3D11FeatureDataD3D9ShadowSupport) Compares two D3D11FeatureDataD3D9ShadowSupport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D9ShadowSupport left, D3D11FeatureDataD3D9ShadowSupport right) Parameters Type Name Description D3D11FeatureDataD3D9ShadowSupport left The left D3D11FeatureDataD3D9ShadowSupport to compare. D3D11FeatureDataD3D9ShadowSupport right The right D3D11FeatureDataD3D9ShadowSupport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D9ShadowSupport, D3D11FeatureDataD3D9ShadowSupport) Compares two D3D11FeatureDataD3D9ShadowSupport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D9ShadowSupport left, D3D11FeatureDataD3D9ShadowSupport right) Parameters Type Name Description D3D11FeatureDataD3D9ShadowSupport left The left D3D11FeatureDataD3D9ShadowSupport to compare. D3D11FeatureDataD3D9ShadowSupport right The right D3D11FeatureDataD3D9ShadowSupport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.html",
    "title": "Struct D3D11FeatureDataD3D9Options1",
    "keywords": "Struct D3D11FeatureDataD3D9Options1 Describes Direct3D 9 feature options in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D9Options1 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D9Options1 : IEquatable<D3D11FeatureDataD3D9Options1> Properties | Improve this Doc View Source IsDepthAsTextureWithLessEqualComparisonFilterSupported Gets a value indicating whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to. Declaration public bool IsDepthAsTextureWithLessEqualComparisonFilterSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsFullNonPow2TextureSupported Gets a value indicating whether the driver supports the nonpowers-of-2-unconditionally feature. Declaration public bool IsFullNonPow2TextureSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSimpleInstancingSupported Gets a value indicating whether the hardware and driver support simple instancing. Declaration public bool IsSimpleInstancingSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported Gets a value indicating whether the hardware and driver support setting a single face of a TextureCube as a render target while the depth stencil surface that is bound alongside can be a Texture2D (as opposed to TextureCube ). Declaration public bool IsTextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D9Options1) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D9Options1 other) Parameters Type Name Description D3D11FeatureDataD3D9Options1 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D9Options1, D3D11FeatureDataD3D9Options1) Compares two D3D11FeatureDataD3D9Options1 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D9Options1 left, D3D11FeatureDataD3D9Options1 right) Parameters Type Name Description D3D11FeatureDataD3D9Options1 left The left D3D11FeatureDataD3D9Options1 to compare. D3D11FeatureDataD3D9Options1 right The right D3D11FeatureDataD3D9Options1 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D9Options1, D3D11FeatureDataD3D9Options1) Compares two D3D11FeatureDataD3D9Options1 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D9Options1 left, D3D11FeatureDataD3D9Options1 right) Parameters Type Name Description D3D11FeatureDataD3D9Options1 left The left D3D11FeatureDataD3D9Options1 to compare. D3D11FeatureDataD3D9Options1 right The right D3D11FeatureDataD3D9Options1 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.html",
    "title": "Struct D3D11FeatureDataD3D9Options",
    "keywords": "Struct D3D11FeatureDataD3D9Options Describes Direct3D 9 feature options in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D9Options > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D9Options : IEquatable<D3D11FeatureDataD3D9Options> Properties | Improve this Doc View Source IsFullNonPow2TextureSupported Gets a value indicating whether the driver supports the nonpowers-of-2-unconditionally feature. Declaration public bool IsFullNonPow2TextureSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D9Options) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D9Options other) Parameters Type Name Description D3D11FeatureDataD3D9Options other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D9Options, D3D11FeatureDataD3D9Options) Compares two D3D11FeatureDataD3D9Options objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D9Options left, D3D11FeatureDataD3D9Options right) Parameters Type Name Description D3D11FeatureDataD3D9Options left The left D3D11FeatureDataD3D9Options to compare. D3D11FeatureDataD3D9Options right The right D3D11FeatureDataD3D9Options to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D9Options, D3D11FeatureDataD3D9Options) Compares two D3D11FeatureDataD3D9Options objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D9Options left, D3D11FeatureDataD3D9Options right) Parameters Type Name Description D3D11FeatureDataD3D9Options left The left D3D11FeatureDataD3D9Options to compare. D3D11FeatureDataD3D9Options right The right D3D11FeatureDataD3D9Options to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.html",
    "title": "Struct D3D11FeatureDataD3D11Options1",
    "keywords": "Struct D3D11FeatureDataD3D11Options1 Describes Direct3D 11.2 feature options in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D11Options1 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D11Options1 : IEquatable<D3D11FeatureDataD3D11Options1> Properties | Improve this Doc View Source IsClearViewDepthInlyFormatsSupported Gets a value indicating whether the hardware and driver also support the ID3D11DeviceContext1.ClearView method on depth formats. Declaration public bool IsClearViewDepthInlyFormatsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMapOnDefaultBuffersSupported Gets a value indicating whether creating D3D11Buffer resources that can be passed to the ID3D11DeviceContext.Map and ID3D11DeviceContext.Unmap methods is supported. Declaration public bool IsMapOnDefaultBuffersSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMinMaxFilteringSupported Gets a value indicating whether the hardware and driver support the filtering options of comparing the result to the minimum or maximum value during texture sampling. Declaration public bool IsMinMaxFilteringSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source TiledResourcesTier Gets a value indicating whether the hardware and driver support tiled resources. Declaration public D3D11TiledResourcesTier TiledResourcesTier { get; } Property Value Type Description D3D11TiledResourcesTier Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D11Options1) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D11Options1 other) Parameters Type Name Description D3D11FeatureDataD3D11Options1 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D11Options1, D3D11FeatureDataD3D11Options1) Compares two D3D11FeatureDataD3D11Options1 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D11Options1 left, D3D11FeatureDataD3D11Options1 right) Parameters Type Name Description D3D11FeatureDataD3D11Options1 left The left D3D11FeatureDataD3D11Options1 to compare. D3D11FeatureDataD3D11Options1 right The right D3D11FeatureDataD3D11Options1 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D11Options1, D3D11FeatureDataD3D11Options1) Compares two D3D11FeatureDataD3D11Options1 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D11Options1 left, D3D11FeatureDataD3D11Options1 right) Parameters Type Name Description D3D11FeatureDataD3D11Options1 left The left D3D11FeatureDataD3D11Options1 to compare. D3D11FeatureDataD3D11Options1 right The right D3D11FeatureDataD3D11Options1 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.html",
    "title": "Struct D3D11FeatureDataD3D11Options",
    "keywords": "Struct D3D11FeatureDataD3D11Options Describes Direct3D 11.1 feature options in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D11Options > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D11Options : IEquatable<D3D11FeatureDataD3D11Options> Properties | Improve this Doc View Source IsClearViewSupported Gets a value indicating whether the driver supports the ID3D11DeviceContext1.ClearView method. Declaration public bool IsClearViewSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConstantBufferOffsettingSupported Gets a value indicating whether the driver supports new semantics for setting offsets in constant buffers for a shader. Declaration public bool IsConstantBufferOffsettingSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConstantBufferPartialUpdateSupported Gets a value indicating whether the driver supports partial updates of constant buffers. Declaration public bool IsConstantBufferPartialUpdateSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsCopyWithOverlapSupported Gets a value indicating whether you can call ID3D11DeviceContext1.CopySubresourceRegion1 with overlapping source and destination rectangles. Declaration public bool IsCopyWithOverlapSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDiscardApisSeenByDriverSupported Gets a value indicating whether the driver supports the ID3D11DeviceContext1.DiscardView and ID3D11DeviceContext1.DiscardResource methods. Declaration public bool IsDiscardApisSeenByDriverSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtendedDoublesShaderInstructionsSupported Gets a value indicating whether the hardware and driver support the fma intrinsic function and other extended doubles instructions ( DDIV and DRCP ) in shaders. Declaration public bool IsExtendedDoublesShaderInstructionsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtendedResourceSharingSupported Gets a value indicating whether the hardware and driver support sharing a greater variety of Texture2D resource types and formats. Declaration public bool IsExtendedResourceSharingSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMapNoOverwriteOnDynamicBufferSrvSupported Gets a value indicating whether you can call ID3D11DeviceContext.Map with WriteNoOverwrite on a dynamic buffer SRV. Declaration public bool IsMapNoOverwriteOnDynamicBufferSrvSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMapNoOverwriteOnDynamicConstantBufferSupported Gets a value indicating whether you can call ID3D11DeviceContext.Map with WriteNoOverwrite on a dynamic constant buffer. Declaration public bool IsMapNoOverwriteOnDynamicConstantBufferSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMultisampleRtvWithForcedSampleCountOneSupported Gets a value indicating whether the driver supports multisample rendering when you render with RTVs bound. Declaration public bool IsMultisampleRtvWithForcedSampleCountOneSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOptionsForUpdateAndCopySeenByDriverSupported Gets a value indicating whether the driver supports new semantics for copy and update. Declaration public bool IsOptionsForUpdateAndCopySeenByDriverSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOutputMergerLogicOperationsSupported Gets a value indicating whether logic operations are available in blend state. Declaration public bool IsOutputMergerLogicOperationsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSad4ShaderInstructionsSupported Gets a value indicating whether the hardware and driver support the msad4 intrinsic function in shaders. Declaration public bool IsSad4ShaderInstructionsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsUavOnlyRenderingForcedSampleCountSupported Gets a value indicating whether the driver can render with no render target views (RTVs) or depth stencil views (DSVs), and only unordered access views (UAVs) bound. Declaration public bool IsUavOnlyRenderingForcedSampleCountSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D11Options) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D11Options other) Parameters Type Name Description D3D11FeatureDataD3D11Options other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D11Options, D3D11FeatureDataD3D11Options) Compares two D3D11FeatureDataD3D11Options objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D11Options left, D3D11FeatureDataD3D11Options right) Parameters Type Name Description D3D11FeatureDataD3D11Options left The left D3D11FeatureDataD3D11Options to compare. D3D11FeatureDataD3D11Options right The right D3D11FeatureDataD3D11Options to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D11Options, D3D11FeatureDataD3D11Options) Compares two D3D11FeatureDataD3D11Options objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D11Options left, D3D11FeatureDataD3D11Options right) Parameters Type Name Description D3D11FeatureDataD3D11Options left The left D3D11FeatureDataD3D11Options to compare. D3D11FeatureDataD3D11Options right The right D3D11FeatureDataD3D11Options to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.html",
    "title": "Class D3D11DeviceContext",
    "keywords": "Class D3D11DeviceContext Represents a device context which generates rendering commands. Inheritance Object D3D11DeviceChild D3D11DeviceContext Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11DeviceContext : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source ContextOptions Gets the initialization flags associated with the current deferred context. Declaration public uint ContextOptions { get; } Property Value Type Description UInt32 | Improve this Doc View Source ContextType Gets the type of device context. Declaration public D3D11DeviceContextType ContextType { get; } Property Value Type Description D3D11DeviceContextType | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Methods | Improve this Doc View Source Begin(D3D11Asynchronous) Mark the beginning of a series of commands. Declaration public void Begin(D3D11Asynchronous async) Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface. | Improve this Doc View Source ClearDepthStencilView(D3D11DepthStencilView, D3D11ClearOptions, Single, Byte) Clears the depth-stencil resource. Declaration public void ClearDepthStencilView(D3D11DepthStencilView depthStencilView, D3D11ClearOptions clearOptions, float depth, byte stencil) Parameters Type Name Description D3D11DepthStencilView depthStencilView The depth stencil to be cleared. D3D11ClearOptions clearOptions Identify the type of data to clear. Single depth Clear the depth buffer with this value. This value will be clamped between 0 and 1. Byte stencil Clear the stencil buffer with this value. | Improve this Doc View Source ClearRenderTargetView(D3D11RenderTargetView, Single[]) Set all the elements in a render target to one value. Declaration public void ClearRenderTargetView(D3D11RenderTargetView renderTargetView, float[] colorRgba) Parameters Type Name Description D3D11RenderTargetView renderTargetView The render target. Single [] colorRgba A 4-component array that represents the color to fill the render target with. | Improve this Doc View Source ClearState() Restore all default settings. Declaration public void ClearState() | Improve this Doc View Source ClearUnorderedAccessViewFloat(D3D11UnorderedAccessView, Single[]) Clears an unordered access resource with a float value. Declaration public void ClearUnorderedAccessViewFloat(D3D11UnorderedAccessView unorderedAccessView, float[] values) Parameters Type Name Description D3D11UnorderedAccessView unorderedAccessView The unordered access resource to clear. Single [] values Values to copy to corresponding channels. | Improve this Doc View Source ClearUnorderedAccessViewUInt(D3D11UnorderedAccessView, UInt32[]) Clears an unordered access resource with bit-precise values. Declaration public void ClearUnorderedAccessViewUInt(D3D11UnorderedAccessView unorderedAccessView, uint[] values) Parameters Type Name Description D3D11UnorderedAccessView unorderedAccessView The unordered access resource to clear. UInt32 [] values Values to copy to corresponding channels. | Improve this Doc View Source ComputeShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the compute shader stage. Declaration public D3D11Buffer[] ComputeShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned by the method. | Improve this Doc View Source ComputeShaderGetSamplers(UInt32, UInt32) Get an array of sampler state interfaces from the compute shader stage. Declaration public D3D11SamplerState[] ComputeShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] An array of sampler-state interfaces. | Improve this Doc View Source ComputeShaderGetShader() Get the compute shader currently set on the device. Declaration public D3D11ComputeShader ComputeShaderGetShader() Returns Type Description D3D11ComputeShader A compute shader. | Improve this Doc View Source ComputeShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the compute shader currently set on the device. Declaration public D3D11ComputeShader ComputeShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11ComputeShader A compute shader. | Improve this Doc View Source ComputeShaderGetShaderResources(UInt32, UInt32) Get the compute shader resources. Declaration public D3D11ShaderResourceView[] ComputeShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source ComputeShaderGetUnorderedAccessViews(UInt32, UInt32) Gets an array of views for an unordered resource. Declaration public D3D11UnorderedAccessView[] ComputeShaderGetUnorderedAccessViews(uint startSlot, uint numUnorderedAccessViews) Parameters Type Name Description UInt32 startSlot Index of the first element in the zero-based array to return. UInt32 numUnorderedAccessViews Number of views to get. Returns Type Description D3D11UnorderedAccessView [] An array of interface pointers. | Improve this Doc View Source ComputeShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Sets the constant buffers used by the compute shader stage. Declaration public void ComputeShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers. | Improve this Doc View Source ComputeShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the compute shader stage. Declaration public void ComputeShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source ComputeShaderSetShader(D3D11ComputeShader, D3D11ClassInstance[]) Set a compute shader to the device. Declaration public void ComputeShaderSetShader(D3D11ComputeShader computeShader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11ComputeShader computeShader A compute shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source ComputeShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the compute shader stage. Declaration public void ComputeShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. | Improve this Doc View Source ComputeShaderSetUnorderedAccessViews(UInt32, D3D11UnorderedAccessView[], UInt32[]) Sets an array of views for an unordered resource. Declaration public void ComputeShaderSetUnorderedAccessViews(uint startSlot, D3D11UnorderedAccessView[] unorderedAccessViews, uint[] uavInitialCounts) Parameters Type Name Description UInt32 startSlot Index of the first element in the zero-based array to begin setting. D3D11UnorderedAccessView [] unorderedAccessViews An array of unordered access views to be set. UInt32 [] uavInitialCounts An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. | Improve this Doc View Source CopyResource(D3D11Resource, D3D11Resource) Copy the entire contents of the source resource to the destination resource using the GPU. Declaration public void CopyResource(D3D11Resource destination, D3D11Resource source) Parameters Type Name Description D3D11Resource destination The destination resource. D3D11Resource source The source resource. | Improve this Doc View Source CopyStructureCount(D3D11Buffer, UInt32, D3D11UnorderedAccessView) Copies data from a buffer holding variable length data. Declaration public void CopyStructureCount(D3D11Buffer destinationBuffer, uint destinationAlignedByteOffset, D3D11UnorderedAccessView sourceView) Parameters Type Name Description D3D11Buffer destinationBuffer The destination buffer. UInt32 destinationAlignedByteOffset Offset from the start of the buffer to write 32-bit UINT structure (vertex) count. D3D11UnorderedAccessView sourceView A structured buffer resource. | Improve this Doc View Source CopySubresourceRegion(D3D11Resource, UInt32, UInt32, UInt32, UInt32, D3D11Resource, UInt32, D3D11Box) Copy a region from a source resource to a destination resource. Declaration public void CopySubresourceRegion(D3D11Resource destinationResource, uint destinationSubresource, uint destinationX, uint destinationY, uint destinationZ, D3D11Resource sourceResource, uint sourceSubresource, D3D11Box sourceBox) Parameters Type Name Description D3D11Resource destinationResource The destination resource. UInt32 destinationSubresource Destination subresource index. UInt32 destinationX The x-coordinate of the upper left corner of the destination region. UInt32 destinationY The y-coordinate of the upper left corner of the destination region. UInt32 destinationZ The z-coordinate of the upper left corner of the destination region. D3D11Resource sourceResource The source resource. UInt32 sourceSubresource Source subresource index. D3D11Box sourceBox A 3D box that defines the source subresource that can be copied. | Improve this Doc View Source Dispatch(UInt32, UInt32, UInt32) Execute a command list from a thread group. Declaration public void Dispatch(uint threadGroupCountX, uint threadGroupCountY, uint threadGroupCountZ) Parameters Type Name Description UInt32 threadGroupCountX The number of groups dispatched in the x direction. UInt32 threadGroupCountY The number of groups dispatched in the y direction. UInt32 threadGroupCountZ The number of groups dispatched in the z direction. | Improve this Doc View Source DispatchIndirect(D3D11Buffer, UInt32) Execute a command list over one or more thread groups. Declaration public void DispatchIndirect(D3D11Buffer bufferForArgs, uint alignedByteOffsetForArgs) Parameters Type Name Description D3D11Buffer bufferForArgs A buffer, which must be loaded with data that matches the argument list. UInt32 alignedByteOffsetForArgs A byte-aligned offset between the start of the buffer and the arguments. | Improve this Doc View Source DomainShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the domain shader stage. Declaration public D3D11Buffer[] DomainShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned by the method. | Improve this Doc View Source DomainShaderGetSamplers(UInt32, UInt32) Get an array of sampler state interfaces from the domain shader stage. Declaration public D3D11SamplerState[] DomainShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] An array of sampler-state interfaces. | Improve this Doc View Source DomainShaderGetShader() Get the domain shader currently set on the device. Declaration public D3D11DomainShader DomainShaderGetShader() Returns Type Description D3D11DomainShader A domain shader. | Improve this Doc View Source DomainShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the domain shader currently set on the device. Declaration public D3D11DomainShader DomainShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11DomainShader A domain shader. | Improve this Doc View Source DomainShaderGetShaderResources(UInt32, UInt32) Get the domain shader resources. Declaration public D3D11ShaderResourceView[] DomainShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source DomainShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Sets the constant buffers used by the domain shader stage. Declaration public void DomainShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers being given to the device. | Improve this Doc View Source DomainShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the domain shader stage. Declaration public void DomainShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source DomainShaderSetShader(D3D11DomainShader, D3D11ClassInstance[]) Set a domain shader to the device. Declaration public void DomainShaderSetShader(D3D11DomainShader domainShader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11DomainShader domainShader A domain shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source DomainShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the domain shader stage. Declaration public void DomainShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. | Improve this Doc View Source Draw(UInt32, UInt32) Draw non-indexed, non-instanced primitives. Declaration public void Draw(uint vertexCount, uint startVertexLocation) Parameters Type Name Description UInt32 vertexCount Number of vertices to draw. UInt32 startVertexLocation Index of the first vertex, which is usually an offset in a vertex buffer. | Improve this Doc View Source DrawAuto() Draw geometry of an unknown size. Declaration public void DrawAuto() | Improve this Doc View Source DrawIndexed(UInt32, UInt32, Int32) Draw indexed, non-instanced primitives. Declaration public void DrawIndexed(uint indexCount, uint startIndexLocation, int baseVertexLocation) Parameters Type Name Description UInt32 indexCount Number of indices to draw. UInt32 startIndexLocation The location of the first index read by the GPU from the index buffer. Int32 baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. | Improve this Doc View Source DrawIndexedInstanced(UInt32, UInt32, UInt32, Int32, UInt32) Draw indexed, instanced primitives. Declaration public void DrawIndexedInstanced(uint indexCountPerInstance, uint instanceCount, uint startIndexLocation, int baseVertexLocation, uint startInstanceLocation) Parameters Type Name Description UInt32 indexCountPerInstance Number of indices read from the index buffer for each instance. UInt32 instanceCount Number of instances to draw. UInt32 startIndexLocation The location of the first index read by the GPU from the index buffer. Int32 baseVertexLocation A value added to each index before reading a vertex from the vertex buffer. UInt32 startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. | Improve this Doc View Source DrawIndexedInstancedIndirect(D3D11Buffer, UInt32) Draw indexed, instanced, GPU-generated primitives. Declaration public void DrawIndexedInstancedIndirect(D3D11Buffer bufferForArgs, uint alignedByteOffsetForArgs) Parameters Type Name Description D3D11Buffer bufferForArgs A buffer containing the GPU generated primitives. UInt32 alignedByteOffsetForArgs Offset to the start of the GPU generated primitives. | Improve this Doc View Source DrawInstanced(UInt32, UInt32, UInt32, UInt32) Draw non-indexed, instanced primitives. Declaration public void DrawInstanced(uint vertexCountPerInstance, uint instanceCount, uint startVertexLocation, uint startInstanceLocation) Parameters Type Name Description UInt32 vertexCountPerInstance Number of vertices to draw. UInt32 instanceCount Number of instances to draw. UInt32 startVertexLocation Index of the first vertex. UInt32 startInstanceLocation A value added to each index before reading per-instance data from a vertex buffer. | Improve this Doc View Source DrawInstancedIndirect(D3D11Buffer, UInt32) Draw instanced, GPU-generated primitives. Declaration public void DrawInstancedIndirect(D3D11Buffer bufferForArgs, uint alignedByteOffsetForArgs) Parameters Type Name Description D3D11Buffer bufferForArgs A buffer containing the GPU generated primitives. UInt32 alignedByteOffsetForArgs Offset to the start of the GPU generated primitives. | Improve this Doc View Source End(D3D11Asynchronous) Mark the end of a series of commands. Declaration public void End(D3D11Asynchronous async) Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface. | Improve this Doc View Source ExecuteCommandList(D3D11CommandList, Boolean) Queues commands from a command list onto a device. Declaration public void ExecuteCommandList(D3D11CommandList commandList, bool restoreContextState) Parameters Type Name Description D3D11CommandList commandList A command list. Boolean restoreContextState A value indicating whether the target context state is saved prior to and restored after the execution of a command list. | Improve this Doc View Source FinishCommandList(Boolean) Create a command list and record graphics commands into it. Declaration public D3D11CommandList FinishCommandList(bool restoreDeferredContextState) Parameters Type Name Description Boolean restoreDeferredContextState A value indicating whether the runtime saves deferred context state before it executes FinishCommandList and restores it afterwards. Returns Type Description D3D11CommandList The recorded command list. | Improve this Doc View Source Flush() Sends queued-up commands in the command buffer to the graphics processing unit (GPU). Declaration public void Flush() | Improve this Doc View Source GenerateMips(D3D11ShaderResourceView) Generates mipmaps for the given shader resource. Declaration public void GenerateMips(D3D11ShaderResourceView shaderResourceView) Parameters Type Name Description D3D11ShaderResourceView shaderResourceView The shader resource. | Improve this Doc View Source GeometryShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the geometry shader pipeline stage. Declaration public D3D11Buffer[] GeometryShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned. | Improve this Doc View Source GeometryShaderGetSamplers(UInt32, UInt32) Get an array of sampler state interfaces from the geometry shader pipeline stage. Declaration public D3D11SamplerState[] GeometryShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] An array of sampler-state interfaces. | Improve this Doc View Source GeometryShaderGetShader() Get the geometry shader currently set on the device. Declaration public D3D11GeometryShader GeometryShaderGetShader() Returns Type Description D3D11GeometryShader A geometry shader. | Improve this Doc View Source GeometryShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the geometry shader currently set on the device. Declaration public D3D11GeometryShader GeometryShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11GeometryShader A geometry shader. | Improve this Doc View Source GeometryShaderGetShaderResources(UInt32, UInt32) Get the geometry shader resources. Declaration public D3D11ShaderResourceView[] GeometryShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source GeometryShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Sets the constant buffers used by the geometry shader pipeline stage. Declaration public void GeometryShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers. | Improve this Doc View Source GeometryShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the geometry shader pipeline stage. Declaration public void GeometryShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source GeometryShaderSetShader(D3D11GeometryShader, D3D11ClassInstance[]) Set a geometry shader to the device. Declaration public void GeometryShaderSetShader(D3D11GeometryShader shader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11GeometryShader shader A geometry shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source GeometryShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the geometry shader stage. Declaration public void GeometryShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. | Improve this Doc View Source GetData(D3D11Asynchronous) Get data from the graphics processing unit (GPU) asynchronously. Declaration public bool GetData(D3D11Asynchronous async) Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface for the object about which GetData retrieves data. Returns Type Description Boolean A boolean value indicating whether the operation succeeded. | Improve this Doc View Source GetData(D3D11Asynchronous, D3D11AsyncGetDataOptions) Get data from the graphics processing unit (GPU) asynchronously. Declaration public bool GetData(D3D11Asynchronous async, D3D11AsyncGetDataOptions options) Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface for the object about which GetData retrieves data. D3D11AsyncGetDataOptions options Optional flags. Returns Type Description Boolean A boolean value indicating whether the operation succeeded. | Improve this Doc View Source GetData<T>(D3D11Asynchronous, out T) Get data from the graphics processing unit (GPU) asynchronously. Declaration public bool GetData<T>(D3D11Asynchronous async, out T data) where T : struct Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface for the object about which GetData retrieves data. T data The data. Returns Type Description Boolean A boolean value indicating whether the operation succeeded. Type Parameters Name Description T The type of data. | Improve this Doc View Source GetData<T>(D3D11Asynchronous, D3D11AsyncGetDataOptions, out T) Get data from the graphics processing unit (GPU) asynchronously. Declaration public bool GetData<T>(D3D11Asynchronous async, D3D11AsyncGetDataOptions options, out T data) where T : struct Parameters Type Name Description D3D11Asynchronous async A D3D11Asynchronous interface for the object about which GetData retrieves data. D3D11AsyncGetDataOptions options Optional flags. T data The data. Returns Type Description Boolean A boolean value indicating whether the operation succeeded. Type Parameters Name Description T The type of data. | Improve this Doc View Source GetPredication(out D3D11Predicate, out Boolean) Get the rendering predicate state. Declaration public void GetPredication(out D3D11Predicate predicate, out bool predicateValue) Parameters Type Name Description D3D11Predicate predicate A predicate. Boolean predicateValue The predicate comparison value. | Improve this Doc View Source GetResourceMinLod(D3D11Resource) Gets the minimum level-of-detail (LOD). Declaration public float GetResourceMinLod(D3D11Resource resource) Parameters Type Name Description D3D11Resource resource The resource. Returns Type Description Single The minimum LOD. | Improve this Doc View Source HullShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the hull shader stage. Declaration public D3D11Buffer[] HullShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned by the method. | Improve this Doc View Source HullShaderGetSamplers(UInt32, UInt32) Get an array of sampler state interfaces from the hull shader stage. Declaration public D3D11SamplerState[] HullShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] An array of sampler-state interfaces. | Improve this Doc View Source HullShaderGetShader() Get the hull shader currently set on the device. Declaration public D3D11HullShader HullShaderGetShader() Returns Type Description D3D11HullShader A hull shader. | Improve this Doc View Source HullShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the hull shader currently set on the device. Declaration public D3D11HullShader HullShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11HullShader A hull shader. | Improve this Doc View Source HullShaderGetShaderResources(UInt32, UInt32) Get the hull shader resources. Declaration public D3D11ShaderResourceView[] HullShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source HullShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Set the constant buffers used by the hull shader stage. Declaration public void HullShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers being given to the device. | Improve this Doc View Source HullShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the hull shader stage. Declaration public void HullShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source HullShaderSetShader(D3D11HullShader, D3D11ClassInstance[]) Set a hull shader to the device. Declaration public void HullShaderSetShader(D3D11HullShader hullShader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11HullShader hullShader A hull shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source HullShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the hull shader stage. Declaration public void HullShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. | Improve this Doc View Source InputAssemblerGetIndexBuffer(out D3D11Buffer, out DxgiFormat, out UInt32) Get the index buffer that is bound to the input-assembler stage. Declaration public void InputAssemblerGetIndexBuffer(out D3D11Buffer indexBuffer, out DxgiFormat format, out uint offset) Parameters Type Name Description D3D11Buffer indexBuffer An index buffer. DxgiFormat format The format of the data in the index buffer. UInt32 offset Offset (in bytes) from the start of the index buffer, to the first index to use. | Improve this Doc View Source InputAssemblerGetInputLayout() Get the input-layout object that is bound to the input-assembler stage. Declaration public D3D11InputLayout InputAssemblerGetInputLayout() Returns Type Description D3D11InputLayout The input-layout object. | Improve this Doc View Source InputAssemblerGetPrimitiveTopology() Get information about the primitive type, and data order that describes input data for the input assembler stage. Declaration public D3D11PrimitiveTopology InputAssemblerGetPrimitiveTopology() Returns Type Description D3D11PrimitiveTopology The type of primitive, and ordering of the primitive data. | Improve this Doc View Source InputAssemblerGetVertexBuffers(UInt32, UInt32, out D3D11Buffer[], out UInt32[], out UInt32[]) Get the vertex buffers bound to the input-assembler stage. Declaration public void InputAssemblerGetVertexBuffers(uint startSlot, uint numBuffers, out D3D11Buffer[] vertexBuffers, out uint[] strides, out uint[] offsets) Parameters Type Name Description UInt32 startSlot The input slot of the first vertex buffer to get. UInt32 numBuffers The number of vertex buffers to get starting at the offset. D3D11Buffer [] vertexBuffers An array of vertex buffers. UInt32 [] strides An array of stride values. UInt32 [] offsets An array of offset values. | Improve this Doc View Source InputAssemblerSetIndexBuffer(D3D11Buffer, DxgiFormat, UInt32) Bind an index buffer to the input-assembler stage. Declaration public void InputAssemblerSetIndexBuffer(D3D11Buffer indexBuffer, DxgiFormat format, uint offset) Parameters Type Name Description D3D11Buffer indexBuffer An D3D11Buffer object, that contains indices. DxgiFormat format The format of the data in the index buffer. UInt32 offset Offset (in bytes) from the start of the index buffer to the first index to use. | Improve this Doc View Source InputAssemblerSetInputLayout(D3D11InputLayout) Bind an input-layout object to the input-assembler stage. Declaration public void InputAssemblerSetInputLayout(D3D11InputLayout inputLayout) Parameters Type Name Description D3D11InputLayout inputLayout The input-layout object. | Improve this Doc View Source InputAssemblerSetPrimitiveTopology(D3D11PrimitiveTopology) Bind information about the primitive type, and data order that describes input data for the input assembler stage. Declaration public void InputAssemblerSetPrimitiveTopology(D3D11PrimitiveTopology topology) Parameters Type Name Description D3D11PrimitiveTopology topology The type of primitive and ordering of the primitive data. | Improve this Doc View Source InputAssemblerSetVertexBuffers(UInt32, D3D11Buffer[], UInt32[], UInt32[]) Bind an array of vertex buffers to the input-assembler stage. Declaration public void InputAssemblerSetVertexBuffers(uint startSlot, D3D11Buffer[] vertexBuffers, uint[] strides, uint[] offsets) Parameters Type Name Description UInt32 startSlot The first input slot for binding. D3D11Buffer [] vertexBuffers An array of vertex buffers. UInt32 [] strides An array of stride values; one stride value for each buffer in the vertex-buffer array. UInt32 [] offsets An array of offset values; one offset value for each buffer in the vertex-buffer array. | Improve this Doc View Source Map(D3D11Resource, UInt32, D3D11MapCpuPermission, D3D11MapOptions) Gets a pointer to the data contained in a subresource, and denies the GPU access to that subresource. Declaration public D3D11MappedSubResource Map(D3D11Resource resource, uint subresource, D3D11MapCpuPermission cpuPermission, D3D11MapOptions options) Parameters Type Name Description D3D11Resource resource A D3D11Resource interface. UInt32 subresource Index number of the subresource. D3D11MapCpuPermission cpuPermission The CPU's read and write permissions for a resource. D3D11MapOptions options Specifies what the CPU does when the GPU is busy. Returns Type Description D3D11MappedSubResource The mapped subresource. | Improve this Doc View Source OutputMergerGetBlendState(out D3D11BlendState, out Single[], out UInt32) Get the blend state of the output-merger stage. Declaration public void OutputMergerGetBlendState(out D3D11BlendState blendState, out float[] blendFactor, out uint sampleMask) Parameters Type Name Description D3D11BlendState blendState A blend-state interface. Single [] blendFactor Array of blend factors, one for each RGBA component. UInt32 sampleMask A sample mask. | Improve this Doc View Source OutputMergerGetDepthStencilState(out D3D11DepthStencilState, out UInt32) Gets the depth-stencil state of the output-merger stage. Declaration public void OutputMergerGetDepthStencilState(out D3D11DepthStencilState depthStencilState, out uint stencilReference) Parameters Type Name Description D3D11DepthStencilState depthStencilState A depth-stencil state interface. UInt32 stencilReference The stencil reference value used in the depth-stencil test. | Improve this Doc View Source OutputMergerGetRenderTargets(UInt32, out D3D11RenderTargetView[], out D3D11DepthStencilView) Get pointers to the resources bound to the output-merger stage. Declaration public void OutputMergerGetRenderTargets(uint numViews, out D3D11RenderTargetView[] renderTargetViews, out D3D11DepthStencilView depthStencilView) Parameters Type Name Description UInt32 numViews Number of render targets to retrieve. D3D11RenderTargetView [] renderTargetViews The render target views. D3D11DepthStencilView depthStencilView A depth-stencil view. | Improve this Doc View Source OutputMergerGetRenderTargetsAndUnorderedAccessViews(UInt32, out D3D11RenderTargetView[], out D3D11DepthStencilView, UInt32, UInt32, out D3D11UnorderedAccessView[]) Get pointers to the resources bound to the output-merger stage. Declaration public void OutputMergerGetRenderTargetsAndUnorderedAccessViews(uint numRenderTargetViews, out D3D11RenderTargetView[] renderTargetViews, out D3D11DepthStencilView depthStencilView, uint uavStartSlot, uint numUnorderedAccessViews, out D3D11UnorderedAccessView[] unorderedAccessViews) Parameters Type Name Description UInt32 numRenderTargetViews The number of render-target views to retrieve. D3D11RenderTargetView [] renderTargetViews The render-target views. D3D11DepthStencilView depthStencilView A depth-stencil view. UInt32 uavStartSlot Index into a zero-based array to begin retrieving unordered-access views. UInt32 numUnorderedAccessViews Number of unordered-access views to return. D3D11UnorderedAccessView [] unorderedAccessViews The unordered-access views that are retrieved. | Improve this Doc View Source OutputMergerSetBlendState(D3D11BlendState, Single[], UInt32) Set the blend state of the output-merger stage. Declaration public void OutputMergerSetBlendState(D3D11BlendState blendState, float[] blendFactor, uint sampleMask) Parameters Type Name Description D3D11BlendState blendState A blend-state interface. Single [] blendFactor Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. UInt32 sampleMask 32-bit sample coverage. The default value is 0xffffffff . | Improve this Doc View Source OutputMergerSetDepthStencilState(D3D11DepthStencilState, UInt32) Sets the depth-stencil state of the output-merger stage. Declaration public void OutputMergerSetDepthStencilState(D3D11DepthStencilState depthStencilState, uint stencilReference) Parameters Type Name Description D3D11DepthStencilState depthStencilState A depth-stencil state interface. UInt32 stencilReference Reference value to perform against when doing a depth-stencil test. | Improve this Doc View Source OutputMergerSetRenderTargets(D3D11RenderTargetView[], D3D11DepthStencilView) Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage. Declaration public void OutputMergerSetRenderTargets(D3D11RenderTargetView[] renderTargetViews, D3D11DepthStencilView depthStencilView) Parameters Type Name Description D3D11RenderTargetView [] renderTargetViews The render targets to bind to the device. D3D11DepthStencilView depthStencilView The depth-stencil view to bind to the device. | Improve this Doc View Source OutputMergerSetRenderTargetsAndUnorderedAccessViews(D3D11RenderTargetView[], D3D11DepthStencilView, UInt32, D3D11UnorderedAccessView[], UInt32[]) Binds resources to the output-merger stage. Declaration public void OutputMergerSetRenderTargetsAndUnorderedAccessViews(D3D11RenderTargetView[] renderTargetViews, D3D11DepthStencilView depthStencilView, uint uavStartSlot, D3D11UnorderedAccessView[] unorderedAccessViews, uint[] uavInitialCounts) Parameters Type Name Description D3D11RenderTargetView [] renderTargetViews The render targets to bind to the device. D3D11DepthStencilView depthStencilView The depth-stencil view to bind to the device. UInt32 uavStartSlot Index into a zero-based array to begin setting unordered-access views. D3D11UnorderedAccessView [] unorderedAccessViews The unordered-access views to bind to the device. UInt32 [] uavInitialCounts An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. | Improve this Doc View Source PixelShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the pixel shader pipeline stage. Declaration public D3D11Buffer[] PixelShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned. | Improve this Doc View Source PixelShaderGetSamplers(UInt32, UInt32) Get an array of sampler states from the pixel shader pipeline stage. Declaration public D3D11SamplerState[] PixelShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] Array of sampler-state interface pointers. | Improve this Doc View Source PixelShaderGetShader() Get the pixel shader currently set on the device. Declaration public D3D11PixelShader PixelShaderGetShader() Returns Type Description D3D11PixelShader A pixel shader. | Improve this Doc View Source PixelShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the pixel shader currently set on the device. Declaration public D3D11PixelShader PixelShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11PixelShader A pixel shader. | Improve this Doc View Source PixelShaderGetShaderResources(UInt32, UInt32) Get the pixel shader resources. Declaration public D3D11ShaderResourceView[] PixelShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source PixelShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Sets the constant buffers used by the pixel shader pipeline stage. Declaration public void PixelShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers. | Improve this Doc View Source PixelShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the pixel shader pipeline stage. Declaration public void PixelShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source PixelShaderSetShader(D3D11PixelShader, D3D11ClassInstance[]) Sets a pixel shader to the device. Declaration public void PixelShaderSetShader(D3D11PixelShader pixelShader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11PixelShader pixelShader A pixel shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source PixelShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the pixel shader stage. Declaration public void PixelShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. | Improve this Doc View Source RasterizerStageGetScissorRects() Get the array of scissor rectangles bound to the rasterizer stage. Declaration public D3D11Rect[] RasterizerStageGetScissorRects() Returns Type Description D3D11Rect [] An array of scissor rectangles. | Improve this Doc View Source RasterizerStageGetState() Get the rasterizer state from the rasterizer stage of the pipeline. Declaration public D3D11RasterizerState RasterizerStageGetState() Returns Type Description D3D11RasterizerState A rasterizer-state interface. | Improve this Doc View Source RasterizerStageGetViewports() Gets the array of viewports bound to the rasterizer stage. Declaration public D3D11Viewport[] RasterizerStageGetViewports() Returns Type Description D3D11Viewport [] The viewports that are bound to the rasterizer stage. | Improve this Doc View Source RasterizerStageSetScissorRects(D3D11Rect[]) Bind an array of scissor rectangles to the rasterizer stage. Declaration public void RasterizerStageSetScissorRects(D3D11Rect[] rects) Parameters Type Name Description D3D11Rect [] rects An array of scissor rectangles. | Improve this Doc View Source RasterizerStageSetState(D3D11RasterizerState) Set the rasterizer state for the rasterizer stage of the pipeline. Declaration public void RasterizerStageSetState(D3D11RasterizerState rasterizerState) Parameters Type Name Description D3D11RasterizerState rasterizerState A rasterizer-state interface. | Improve this Doc View Source RasterizerStageSetViewports(D3D11Viewport[]) Bind an array of viewports to the rasterizer stage of the pipeline. Declaration public void RasterizerStageSetViewports(D3D11Viewport[] viewports) Parameters Type Name Description D3D11Viewport [] viewports An array of D3D11Viewport structures to bind to the device. | Improve this Doc View Source ResolveSubresource(D3D11Resource, UInt32, D3D11Resource, UInt32, DxgiFormat) Copy a multisampled resource into a non-multisampled resource. Declaration public void ResolveSubresource(D3D11Resource destinationResource, uint destinationSubresource, D3D11Resource sourceResource, uint sourceSubresource, DxgiFormat format) Parameters Type Name Description D3D11Resource destinationResource Destination resource. UInt32 destinationSubresource A zero-based index, that identifies the destination subresource. D3D11Resource sourceResource Source resource. UInt32 sourceSubresource The source subresource of the source resource. DxgiFormat format Indicates how the multisampled resource will be resolved to a single-sampled resource. | Improve this Doc View Source SetPredication(D3D11Predicate, Boolean) Set a rendering predicate. Declaration public void SetPredication(D3D11Predicate predicate, bool value) Parameters Type Name Description D3D11Predicate predicate A predicate. Boolean value A value indicating whether rendering will be affected by when the predicate's conditions are met or not met. | Improve this Doc View Source SetResourceMinLod(D3D11Resource, Single) Sets the minimum level-of-detail (LOD) for a resource. Declaration public void SetResourceMinLod(D3D11Resource resource, float minLod) Parameters Type Name Description D3D11Resource resource The resource. Single minLod The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource. | Improve this Doc View Source StreamOutputGetTargets(UInt32) Get the target output buffers for the stream-output stage of the pipeline. Declaration public D3D11Buffer[] StreamOutputGetTargets(uint numBuffers) Parameters Type Name Description UInt32 numBuffers Number of buffers to get. Returns Type Description D3D11Buffer [] An array of output buffers to be retrieved from the device. | Improve this Doc View Source StreamOutputSetTargets(D3D11Buffer[], UInt32[]) Reference value to perform against when doing a depth-stencil test. Declaration public void StreamOutputSetTargets(D3D11Buffer[] targets, uint[] offsets) Parameters Type Name Description D3D11Buffer [] targets The array of output buffers to bind to the device. UInt32 [] offsets Array of offsets to the output buffers. | Improve this Doc View Source Unmap(D3D11Resource, UInt32) Invalidate the pointer to a resource and reenable the GPU's access to that resource. Declaration public void Unmap(D3D11Resource resource, uint subresource) Parameters Type Name Description D3D11Resource resource A D3D11Resource interface. UInt32 subresource A subresource to be unmapped. | Improve this Doc View Source UpdateSubresource<T>(D3D11Resource, UInt32, Nullable<D3D11Box>, T, UInt32, UInt32) The CPU copies data from memory to a subresource created in non-mappable memory. Declaration public void UpdateSubresource<T>(D3D11Resource destinationResource, uint destinationSubresource, D3D11Box? destinationBox, T sourceData, uint sourceRowPitch, uint sourceDepthPitch) where T : struct Parameters Type Name Description D3D11Resource destinationResource The destination resource. UInt32 destinationSubresource A zero-based index, that identifies the destination subresource. Nullable < D3D11Box > destinationBox A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. T sourceData A pointer to the source data in memory. UInt32 sourceRowPitch The size of one row of the source data. UInt32 sourceDepthPitch The size of one depth slice of source data. Type Parameters Name Description T The type of data. | Improve this Doc View Source UpdateSubresource<T>(D3D11Resource, UInt32, Nullable<D3D11Box>, T[], UInt32, UInt32) The CPU copies data from memory to a subresource created in non-mappable memory. Declaration public void UpdateSubresource<T>(D3D11Resource destinationResource, uint destinationSubresource, D3D11Box? destinationBox, T[] sourceData, uint sourceRowPitch, uint sourceDepthPitch) where T : struct Parameters Type Name Description D3D11Resource destinationResource The destination resource. UInt32 destinationSubresource A zero-based index, that identifies the destination subresource. Nullable < D3D11Box > destinationBox A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. T[] sourceData A pointer to the source data in memory. UInt32 sourceRowPitch The size of one row of the source data. UInt32 sourceDepthPitch The size of one depth slice of source data. Type Parameters Name Description T The type of data. | Improve this Doc View Source VertexShaderGetConstantBuffers(UInt32, UInt32) Get the constant buffers used by the vertex shader pipeline stage. Declaration public D3D11Buffer[] VertexShaderGetConstantBuffers(uint startSlot, uint numBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin retrieving constant buffers from. UInt32 numBuffers Number of buffers to retrieve. Returns Type Description D3D11Buffer [] Array of constant buffer interface pointers to be returned. | Improve this Doc View Source VertexShaderGetSamplers(UInt32, UInt32) Get an array of sampler states from the vertex shader pipeline stage. Declaration public D3D11SamplerState[] VertexShaderGetSamplers(uint startSlot, uint numSamplers) Parameters Type Name Description UInt32 startSlot Index into a zero-based array to begin getting samplers from. UInt32 numSamplers Number of samplers to get from a device context. Returns Type Description D3D11SamplerState [] Array of sampler-state interface pointers to be returned by the device. | Improve this Doc View Source VertexShaderGetShader() Get the vertex shader currently set on the device. Declaration public D3D11VertexShader VertexShaderGetShader() Returns Type Description D3D11VertexShader A vertex shader. | Improve this Doc View Source VertexShaderGetShader(UInt32, out D3D11ClassInstance[]) Get the vertex shader currently set on the device. Declaration public D3D11VertexShader VertexShaderGetShader(uint numClassInstances, out D3D11ClassInstance[] classInstances) Parameters Type Name Description UInt32 numClassInstances The number of class-instance elements in the array. D3D11ClassInstance [] classInstances An array of class instance interfaces. Returns Type Description D3D11VertexShader A vertex shader. | Improve this Doc View Source VertexShaderGetShaderResources(UInt32, UInt32) Get the vertex shader resources. Declaration public D3D11ShaderResourceView[] VertexShaderGetShaderResources(uint startSlot, uint numViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin getting shader resources from. UInt32 numViews The number of resources to get from the device. Returns Type Description D3D11ShaderResourceView [] Array of shader resource view interfaces to be returned by the device. | Improve this Doc View Source VertexShaderSetConstantBuffers(UInt32, D3D11Buffer[]) Sets the constant buffers used by the vertex shader pipeline stage. Declaration public void VertexShaderSetConstantBuffers(uint startSlot, D3D11Buffer[] constantBuffers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting constant buffers to. D3D11Buffer [] constantBuffers Array of constant buffers being given to the device. | Improve this Doc View Source VertexShaderSetSamplers(UInt32, D3D11SamplerState[]) Set an array of sampler states to the vertex shader pipeline stage. Declaration public void VertexShaderSetSamplers(uint startSlot, D3D11SamplerState[] samplers) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting samplers to. D3D11SamplerState [] samplers An array of sampler-state interfaces. | Improve this Doc View Source VertexShaderSetShader(D3D11VertexShader, D3D11ClassInstance[]) Set a vertex shader to the device. Declaration public void VertexShaderSetShader(D3D11VertexShader vertexShader, D3D11ClassInstance[] classInstances) Parameters Type Name Description D3D11VertexShader vertexShader A vertex shader. D3D11ClassInstance [] classInstances An array of class-instance interfaces. | Improve this Doc View Source VertexShaderSetShaderResources(UInt32, D3D11ShaderResourceView[]) Bind an array of shader resources to the vertex shader stage. Declaration public void VertexShaderSetShaderResources(uint startSlot, D3D11ShaderResourceView[] shaderResourceViews) Parameters Type Name Description UInt32 startSlot Index into the device's zero-based array to begin setting shader resources to. D3D11ShaderResourceView [] shaderResourceViews Array of shader resource view interfaces to set to the device. Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.html",
    "title": "Class D3D11DeviceChild",
    "keywords": "Class D3D11DeviceChild A device-child interface accesses data used by a device. Inheritance Object D3D11DeviceChild D3D11Asynchronous D3D11BlendState D3D11ClassInstance D3D11ClassLinkage D3D11CommandList D3D11ComputeShader D3D11DepthStencilState D3D11DeviceContext D3D11DomainShader D3D11GeometryShader D3D11HullShader D3D11InputLayout D3D11PixelShader D3D11RasterizerState D3D11Resource D3D11SamplerState D3D11VertexShader D3D11View Implements IDisposable ID3D11Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public abstract class D3D11DeviceChild : IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public abstract object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D3D11DeviceChild object. Declaration public void Dispose() | Improve this Doc View Source GetDebugName() Gets a unique name to objects in order to assist the developer during debugging. Declaration public string GetDebugName() Returns Type Description String The friendly name. | Improve this Doc View Source GetDevice() Get the device that created this interface. Declaration public D3D11Device GetDevice() Returns Type Description D3D11Device A device. | Improve this Doc View Source GetPrivateDataText(Guid) Gets an application-defined data from the object that is associated with a GUID. Declaration public string GetPrivateDataText(Guid name) Parameters Type Name Description Guid name A GUID identifying the data. Returns Type Description String The object's text. | Improve this Doc View Source Release() Releases the managed reference to the COM D3D11 interface. Declaration public void Release() | Improve this Doc View Source SetDebugName(String) Sets a unique name to objects in order to assist the developer during debugging. Declaration public void SetDebugName(string name) Parameters Type Name Description String name The friendly name. | Improve this Doc View Source SetPrivateDataText(Guid, String) Sets an application-defined data to the object and associates that data with a GUID. Declaration public void SetPrivateDataText(Guid name, string text) Parameters Type Name Description Guid name A GUID that identifies the data. String text The object's text. | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D3D11DeviceChild to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D3D11DeviceChild value) Parameters Type Name Description D3D11DeviceChild value A D3D11 device child. Returns Type Description Boolean A boolean Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Device.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Device.html",
    "title": "Class D3D11Device",
    "keywords": "Class D3D11Device The device interface represents a virtual adapter; it is used to create resources. Inheritance Object D3D11Device Implements IDisposable ID3D11Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Device : IDisposable, ID3D11Releasable Properties | Improve this Doc View Source CreationOptions Gets the options used during the call to create the device. Declaration public D3D11CreateDeviceOptions CreationOptions { get; } Property Value Type Description D3D11CreateDeviceOptions | Improve this Doc View Source FeatureLevel Gets the feature level of the hardware device. Declaration public D3D11FeatureLevel FeatureLevel { get; } Property Value Type Description D3D11FeatureLevel | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source CheckCounter(D3D11CounterDesc, out D3D11CounterDataType, out UInt32) Get the type, name, units of measure, and a description of an existing counter. Declaration public bool CheckCounter(D3D11CounterDesc desc, out D3D11CounterDataType type, out uint activeCounters) Parameters Type Name Description D3D11CounterDesc desc A counter description. D3D11CounterDataType type The data type of a counter. UInt32 activeCounters The number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters. Returns Type Description Boolean A boolean value. | Improve this Doc View Source CheckCounter(D3D11CounterDesc, out D3D11CounterDataType, out UInt32, out String, out String, out String) Get the type, name, units of measure, and a description of an existing counter. Declaration public bool CheckCounter(D3D11CounterDesc desc, out D3D11CounterDataType type, out uint activeCounters, out string name, out string units, out string description) Parameters Type Name Description D3D11CounterDesc desc A counter description. D3D11CounterDataType type The data type of a counter. UInt32 activeCounters The number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters. String name String to be filled with a brief name for the counter. String units Name of the units a counter measures. String description A description of the counter. Returns Type Description Boolean A boolean value. | Improve this Doc View Source CheckCounterInfo() Get a counter's information. Declaration public D3D11CounterInfo CheckCounterInfo() Returns Type Description D3D11CounterInfo A counter information. | Improve this Doc View Source CheckFeatureSupport(D3D11Feature) Gets information about the features that are supported by the current graphics driver. Declaration public object CheckFeatureSupport(D3D11Feature feature) Parameters Type Name Description D3D11Feature feature Describes which feature to query for support. Returns Type Description Object A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportArchitectureInfo() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataArchitectureInfo CheckFeatureSupportArchitectureInfo() Returns Type Description D3D11FeatureDataArchitectureInfo A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D10XHardwareOptions() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D10XHardwareOptions CheckFeatureSupportD3D10XHardwareOptions() Returns Type Description D3D11FeatureDataD3D10XHardwareOptions A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D11Options() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D11Options CheckFeatureSupportD3D11Options() Returns Type Description D3D11FeatureDataD3D11Options A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D11Options1() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D11Options1 CheckFeatureSupportD3D11Options1() Returns Type Description D3D11FeatureDataD3D11Options1 A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D9Options() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D9Options CheckFeatureSupportD3D9Options() Returns Type Description D3D11FeatureDataD3D9Options A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D9Options1() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D9Options1 CheckFeatureSupportD3D9Options1() Returns Type Description D3D11FeatureDataD3D9Options1 A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D9ShadowSupport() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D9ShadowSupport CheckFeatureSupportD3D9ShadowSupport() Returns Type Description D3D11FeatureDataD3D9ShadowSupport A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportD3D9SimpleInstancingSupport() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataD3D9SimpleInstancingSupport CheckFeatureSupportD3D9SimpleInstancingSupport() Returns Type Description D3D11FeatureDataD3D9SimpleInstancingSupport A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportDoubles() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataDoubles CheckFeatureSupportDoubles() Returns Type Description D3D11FeatureDataDoubles A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportFormatSupport() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataFormatSupport CheckFeatureSupportFormatSupport() Returns Type Description D3D11FeatureDataFormatSupport A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportFormatSupport2() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataFormatSupport2 CheckFeatureSupportFormatSupport2() Returns Type Description D3D11FeatureDataFormatSupport2 A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportMarkerSupport() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataMarkerSupport CheckFeatureSupportMarkerSupport() Returns Type Description D3D11FeatureDataMarkerSupport A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportShaderMinPrecisionSupport() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataShaderMinPrecisionSupport CheckFeatureSupportShaderMinPrecisionSupport() Returns Type Description D3D11FeatureDataShaderMinPrecisionSupport A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFeatureSupportThreading() Gets information about the features that are supported by the current graphics driver. Declaration public D3D11FeatureDataThreading CheckFeatureSupportThreading() Returns Type Description D3D11FeatureDataThreading A structure filled with data that describes the feature support. | Improve this Doc View Source CheckFormatSupport(DxgiFormat, out D3D11FormatSupport) Get the support of a given format on the installed video device. Declaration public bool CheckFormatSupport(DxgiFormat format, out D3D11FormatSupport formatSupport) Parameters Type Name Description DxgiFormat format A format for which to check for support. D3D11FormatSupport formatSupport Describes how the specified format is supported on the installed device. Returns Type Description Boolean A boolean value. | Improve this Doc View Source CheckMultisampleQualityLevels(DxgiFormat, UInt32, out UInt32) Get the number of quality levels available during multisampling. Declaration public bool CheckMultisampleQualityLevels(DxgiFormat format, uint sampleCount, out uint numQualityLevels) Parameters Type Name Description DxgiFormat format The texture format. UInt32 sampleCount The number of samples during multisampling. UInt32 numQualityLevels The number of quality levels supported by the adapter. Returns Type Description Boolean A boolean value. | Improve this Doc View Source CreateBlendState(D3D11BlendDesc) Create a blend-state object that encapsules blend state for the output-merger stage. Declaration public D3D11BlendState CreateBlendState(D3D11BlendDesc desc) Parameters Type Name Description D3D11BlendDesc desc A blend-state description. Returns Type Description D3D11BlendState The created blend-state object. | Improve this Doc View Source CreateBuffer(D3D11BufferDesc) Creates a buffer (vertex buffer, index buffer, or shader constant buffer). Declaration public D3D11Buffer CreateBuffer(D3D11BufferDesc desc) Parameters Type Name Description D3D11BufferDesc desc Describes the buffer. Returns Type Description D3D11Buffer The buffer object created. | Improve this Doc View Source CreateBuffer(D3D11BufferDesc, D3D11SubResourceData) Creates a buffer (vertex buffer, index buffer, or shader constant buffer). Declaration public D3D11Buffer CreateBuffer(D3D11BufferDesc desc, D3D11SubResourceData data) Parameters Type Name Description D3D11BufferDesc desc Describes the buffer. D3D11SubResourceData data Describes the initialization data. Returns Type Description D3D11Buffer The buffer object created. | Improve this Doc View Source CreateBuffer<T>(D3D11BufferDesc, T, UInt32, UInt32) Creates a buffer (vertex buffer, index buffer, or shader constant buffer). Declaration public D3D11Buffer CreateBuffer<T>(D3D11BufferDesc desc, T data, uint sysMemPitch, uint sysMemSlicePitch) where T : struct Parameters Type Name Description D3D11BufferDesc desc Describes the buffer. T data Describes the initialization data. UInt32 sysMemPitch The distance (in bytes) from the beginning of one line of a texture to the next line. UInt32 sysMemSlicePitch The distance (in bytes) from the beginning of one depth level to the next. Returns Type Description D3D11Buffer The buffer object created. Type Parameters Name Description T A struct. | Improve this Doc View Source CreateBuffer<T>(D3D11BufferDesc, T[], UInt32, UInt32) Creates a buffer (vertex buffer, index buffer, or shader constant buffer). Declaration public D3D11Buffer CreateBuffer<T>(D3D11BufferDesc desc, T[] data, uint sysMemPitch, uint sysMemSlicePitch) where T : struct Parameters Type Name Description D3D11BufferDesc desc Describes the buffer. T[] data Describes the initialization data. UInt32 sysMemPitch The distance (in bytes) from the beginning of one line of a texture to the next line. UInt32 sysMemSlicePitch The distance (in bytes) from the beginning of one depth level to the next. Returns Type Description D3D11Buffer The buffer object created. Type Parameters Name Description T A array of struct. | Improve this Doc View Source CreateClassLinkage() Creates class linkage libraries to enable dynamic shader linkage. Declaration public D3D11ClassLinkage CreateClassLinkage() Returns Type Description D3D11ClassLinkage The created class linkage. | Improve this Doc View Source CreateComputeShader(Byte[], D3D11ClassLinkage) Create a compute shader. Declaration public D3D11ComputeShader CreateComputeShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11ComputeShader The created compute shader. | Improve this Doc View Source CreateCounter(D3D11CounterDesc) Create a counter object for measuring GPU performance. Declaration public D3D11Counter CreateCounter(D3D11CounterDesc desc) Parameters Type Name Description D3D11CounterDesc desc A counter description. Returns Type Description D3D11Counter The created counter. | Improve this Doc View Source CreateDeferredContext() Creates a deferred context, which can record command lists. Declaration public D3D11DeviceContext CreateDeferredContext() Returns Type Description D3D11DeviceContext The created deferred context. | Improve this Doc View Source CreateDepthStencilState(D3D11DepthStencilDesc) Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage. Declaration public D3D11DepthStencilState CreateDepthStencilState(D3D11DepthStencilDesc desc) Parameters Type Name Description D3D11DepthStencilDesc desc A depth-stencil state description. Returns Type Description D3D11DepthStencilState The created depth-stencil state object. | Improve this Doc View Source CreateDepthStencilView(D3D11Resource, Nullable<D3D11DepthStencilViewDesc>) Create a depth-stencil view for accessing resource data. Declaration public D3D11DepthStencilView CreateDepthStencilView(D3D11Resource resource, D3D11DepthStencilViewDesc? desc) Parameters Type Name Description D3D11Resource resource The resource that will serve as the depth-stencil surface. Nullable < D3D11DepthStencilViewDesc > desc A depth-stencil-view description. Returns Type Description D3D11DepthStencilView The created depth-stencil view. | Improve this Doc View Source CreateDevice(Object, D3D11DriverType, D3D11CreateDeviceOptions, D3D11FeatureLevel[], out D3D11Device, out D3D11FeatureLevel, out D3D11DeviceContext) Creates a device that represents the display adapter. Declaration public static void CreateDevice(object adapter, D3D11DriverType driverType, D3D11CreateDeviceOptions options, D3D11FeatureLevel[] featureLevels, out D3D11Device device, out D3D11FeatureLevel featureLevel, out D3D11DeviceContext immediateContext) Parameters Type Name Description Object adapter A pointer to the video adapter to use when creating a device. D3D11DriverType driverType The driver type to create. D3D11CreateDeviceOptions options The runtime layers to enable. D3D11FeatureLevel [] featureLevels Determine the order of feature levels to attempt to create. D3D11Device device The created device. D3D11FeatureLevel featureLevel If successful, returns the first feature level from the featureLevels array which succeeded. D3D11DeviceContext immediateContext The device context. | Improve this Doc View Source CreateDeviceAndSwapChain(Object, D3D11DriverType, D3D11CreateDeviceOptions, D3D11FeatureLevel[], DxgiSwapChainDesc, out Object, out D3D11Device, out D3D11FeatureLevel, out D3D11DeviceContext) Creates a device that represents the display adapter and a swap chain used for rendering. Declaration [Obsolete(\"Use CreateDevice instead.\")] public static void CreateDeviceAndSwapChain(object adapter, D3D11DriverType driverType, D3D11CreateDeviceOptions options, D3D11FeatureLevel[] featureLevels, DxgiSwapChainDesc swapChainDesc, out object swapChain, out D3D11Device device, out D3D11FeatureLevel featureLevel, out D3D11DeviceContext immediateContext) Parameters Type Name Description Object adapter The video adapter to use when creating a device. D3D11DriverType driverType The driver type to create. D3D11CreateDeviceOptions options The runtime layers to enable. D3D11FeatureLevel [] featureLevels Determine the order of feature levels to attempt to create. DxgiSwapChainDesc swapChainDesc A swap chain description that contains initialization parameters for the swap chain. Object swapChain The swap chain used for rendering. D3D11Device device The created device. D3D11FeatureLevel featureLevel If successful, returns the first feature level from the featureLevels array which succeeded. D3D11DeviceContext immediateContext The device context. | Improve this Doc View Source CreateDomainShader(Byte[], D3D11ClassLinkage) Create a domain shader. Declaration public D3D11DomainShader CreateDomainShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11DomainShader The created domain shader. | Improve this Doc View Source CreateGeometryShader(Byte[], D3D11ClassLinkage) Create a geometry shader. Declaration public D3D11GeometryShader CreateGeometryShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11GeometryShader The created geometry shader. | Improve this Doc View Source CreateGeometryShaderWithStreamOutput(Byte[], D3D11StreamOutputDeclarationEntry[], UInt32[], UInt32, D3D11ClassLinkage) Creates a geometry shader that can write to streaming output buffers. Declaration public D3D11GeometryShader CreateGeometryShaderWithStreamOutput(byte[] shaderBytecode, D3D11StreamOutputDeclarationEntry[] streamOutputDeclaration, uint[] bufferStrides, uint rasterizedStream, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled geometry shader for a standard geometry shader plus stream output. D3D11StreamOutputDeclarationEntry [] streamOutputDeclaration A D3D11StreamOutputDeclarationEntry array. UInt32 [] bufferStrides An array of buffer strides; each stride is the size of an element for that buffer. UInt32 rasterizedStream The index number of the stream to be sent to the rasterizer stage. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11GeometryShader The created geometry shader. | Improve this Doc View Source CreateHullShader(Byte[], D3D11ClassLinkage) Create a hull shader. Declaration public D3D11HullShader CreateHullShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11HullShader The created hull shader. | Improve this Doc View Source CreateInputLayout(D3D11InputElementDesc[], Byte[]) Create an input-layout object to describe the input-buffer data for the input-assembler stage. Declaration public D3D11InputLayout CreateInputLayout(D3D11InputElementDesc[] elementDescs, byte[] shaderBytecodeWithInputSignature) Parameters Type Name Description D3D11InputElementDesc [] elementDescs An array of the input-assembler stage input data types; each type is described by an element description. Byte [] shaderBytecodeWithInputSignature The compiled shader. The compiled shader code contains a input signature which is validated against the array of elements. Returns Type Description D3D11InputLayout The created input-layout object. | Improve this Doc View Source CreatePixelShader(Byte[], D3D11ClassLinkage) Create a pixel shader. Declaration public D3D11PixelShader CreatePixelShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11PixelShader The created pixel shader. | Improve this Doc View Source CreatePredicate(D3D11QueryDesc) Creates a predicate. Declaration public D3D11Predicate CreatePredicate(D3D11QueryDesc desc) Parameters Type Name Description D3D11QueryDesc desc A query description for a predicate. Returns Type Description D3D11Predicate The created predicate. | Improve this Doc View Source CreateQuery(D3D11QueryDesc) Creates an object for querying information from the GPU. Declaration public D3D11Query CreateQuery(D3D11QueryDesc desc) Parameters Type Name Description D3D11QueryDesc desc A query description. Returns Type Description D3D11Query The created query. | Improve this Doc View Source CreateRasterizerState(D3D11RasterizerDesc) Create a rasterizer state object that tells the rasterizer stage how to behave. Declaration public D3D11RasterizerState CreateRasterizerState(D3D11RasterizerDesc desc) Parameters Type Name Description D3D11RasterizerDesc desc A rasterizer state description. Returns Type Description D3D11RasterizerState The created rasterizer state object. | Improve this Doc View Source CreateRenderTargetView(D3D11Resource, Nullable<D3D11RenderTargetViewDesc>) Creates a render-target view for accessing resource data. Declaration public D3D11RenderTargetView CreateRenderTargetView(D3D11Resource resource, D3D11RenderTargetViewDesc? desc) Parameters Type Name Description D3D11Resource resource A render target resource. Nullable < D3D11RenderTargetViewDesc > desc A render-target view description. Returns Type Description D3D11RenderTargetView The created render target view. | Improve this Doc View Source CreateSamplerState(D3D11SamplerDesc) Create a sampler-state object that encapsulates sampling information for a texture. Declaration public D3D11SamplerState CreateSamplerState(D3D11SamplerDesc desc) Parameters Type Name Description D3D11SamplerDesc desc A sampler state description. Returns Type Description D3D11SamplerState The created sampler-state object. | Improve this Doc View Source CreateShaderResourceView(D3D11Resource, Nullable<D3D11ShaderResourceViewDesc>) Create a shader resource view for accessing data in a resource. Declaration public D3D11ShaderResourceView CreateShaderResourceView(D3D11Resource resource, D3D11ShaderResourceViewDesc? desc) Parameters Type Name Description D3D11Resource resource The resource that will serve as input to a shader. Nullable < D3D11ShaderResourceViewDesc > desc A shader resource view description. Returns Type Description D3D11ShaderResourceView The created shader resource view. | Improve this Doc View Source CreateTexture1D(D3D11Texture1DDesc) Creates an array of 1D textures. Declaration public D3D11Texture1D CreateTexture1D(D3D11Texture1DDesc desc) Parameters Type Name Description D3D11Texture1DDesc desc Describes a 1D texture resource. Returns Type Description D3D11Texture1D The created texture. | Improve this Doc View Source CreateTexture1D(D3D11Texture1DDesc, D3D11SubResourceData[]) Creates an array of 1D textures. Declaration public D3D11Texture1D CreateTexture1D(D3D11Texture1DDesc desc, D3D11SubResourceData[] data) Parameters Type Name Description D3D11Texture1DDesc desc Describes a 1D texture resource. D3D11SubResourceData [] data Describe subresources for the 1D texture resource. Returns Type Description D3D11Texture1D The created texture. | Improve this Doc View Source CreateTexture2D(D3D11Texture2DDesc) Create an array of 2D textures. Declaration public D3D11Texture2D CreateTexture2D(D3D11Texture2DDesc desc) Parameters Type Name Description D3D11Texture2DDesc desc Describes a 2D texture resource. Returns Type Description D3D11Texture2D The created texture. | Improve this Doc View Source CreateTexture2D(D3D11Texture2DDesc, D3D11SubResourceData[]) Create an array of 2D textures. Declaration public D3D11Texture2D CreateTexture2D(D3D11Texture2DDesc desc, D3D11SubResourceData[] data) Parameters Type Name Description D3D11Texture2DDesc desc Describes a 2D texture resource. D3D11SubResourceData [] data Describe subresources for the 2D texture resource. Returns Type Description D3D11Texture2D The created texture. | Improve this Doc View Source CreateTexture3D(D3D11Texture3DDesc) Create a single 3D texture. Declaration public D3D11Texture3D CreateTexture3D(D3D11Texture3DDesc desc) Parameters Type Name Description D3D11Texture3DDesc desc Describes a 3D texture resource. Returns Type Description D3D11Texture3D The created texture. | Improve this Doc View Source CreateTexture3D(D3D11Texture3DDesc, D3D11SubResourceData[]) Create a single 3D texture. Declaration public D3D11Texture3D CreateTexture3D(D3D11Texture3DDesc desc, D3D11SubResourceData[] data) Parameters Type Name Description D3D11Texture3DDesc desc Describes a 3D texture resource. D3D11SubResourceData [] data Describe subresources for the 3D texture resource. Returns Type Description D3D11Texture3D The created texture. | Improve this Doc View Source CreateUnorderedAccessView(D3D11Resource, Nullable<D3D11UnorderedAccessViewDesc>) Creates a view for accessing an unordered access resource. Declaration public D3D11UnorderedAccessView CreateUnorderedAccessView(D3D11Resource resource, D3D11UnorderedAccessViewDesc? desc) Parameters Type Name Description D3D11Resource resource A resources that will serve as an input to a shader. Nullable < D3D11UnorderedAccessViewDesc > desc A shader resource view description. Returns Type Description D3D11UnorderedAccessView The created unordered-access view. | Improve this Doc View Source CreateVertexShader(Byte[], D3D11ClassLinkage) Create a vertex shader object from a compiled shader. Declaration public D3D11VertexShader CreateVertexShader(byte[] shaderBytecode, D3D11ClassLinkage classLinkage) Parameters Type Name Description Byte [] shaderBytecode The compiled shader. D3D11ClassLinkage classLinkage A class linkage interface. Returns Type Description D3D11VertexShader The created vertex shader. | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D3D11Device object. Declaration public void Dispose() | Improve this Doc View Source GetDebugName() Gets a unique name to objects in order to assist the developer during debugging. Declaration public string GetDebugName() Returns Type Description String The friendly name. | Improve this Doc View Source GetDeviceRemovedReason() Get the reason why the device was removed. Declaration public Exception GetDeviceRemovedReason() Returns Type Description Exception The removed reason exception. | Improve this Doc View Source GetImmediateContext() Gets an immediate context, which can play back command lists. Declaration public D3D11DeviceContext GetImmediateContext() Returns Type Description D3D11DeviceContext An immediate context. | Improve this Doc View Source GetPrivateDataText(Guid) Gets an application-defined data from the object that is associated with a GUID. Declaration public string GetPrivateDataText(Guid name) Parameters Type Name Description Guid name A GUID identifying the data. Returns Type Description String The object's text. | Improve this Doc View Source OpenSharedResource(IntPtr, Guid) Give a device access to a shared resource created on a different device. Declaration public object OpenSharedResource(IntPtr resourceHandle, Guid returnedInterface) Parameters Type Name Description IntPtr resourceHandle A resource handle. Guid returnedInterface The globally unique identifier (GUID) for the resource interface. Returns Type Description Object A pointer to the resource we are gaining access to. | Improve this Doc View Source Release() Releases the managed reference to the COM D3D11 interface. Declaration public void Release() | Improve this Doc View Source SetDebugName(String) Sets a unique name to objects in order to assist the developer during debugging. Declaration public void SetDebugName(string name) Parameters Type Name Description String name The friendly name. | Improve this Doc View Source SetPrivateDataText(Guid, String) Sets an application-defined data to the object and associates that data with a GUID. Declaration public void SetPrivateDataText(Guid name, string text) Parameters Type Name Description Guid name A GUID that identifies the data. String text The object's text. | Improve this Doc View Source ThrowDeviceRemovedReason() Throw a device removed reason exception. Declaration public void ThrowDeviceRemovedReason() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D3D11Device to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D3D11Device value) Parameters Type Name Description D3D11Device value A D3D11 device. Returns Type Description Boolean A boolean Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask.html",
    "title": "Enum D3D11DepthWriteMask",
    "keywords": "Enum D3D11DepthWriteMask Identify the portion of a depth-stencil buffer for writing depth data. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11DepthWriteMask Fields Name Description All Turn on writes to the depth-stencil buffer. Zero Turn off writes to the depth-stencil buffer."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions.html",
    "title": "Enum D3D11DepthStencilViewOptions",
    "keywords": "Enum D3D11DepthStencilViewOptions Depth-stencil view options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11DepthStencilViewOptions Fields Name Description None No option. Not read only. ReadOnlyDepth Indicates that depth values are read only. ReadOnlyStencil Indicates that stencil values are read only."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetType.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetType.html",
    "title": "Enum D2D1RenderTargetType",
    "keywords": "Enum D2D1RenderTargetType Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1RenderTargetType Fields Name Description Default The render target uses hardware rendering, if available; otherwise, it uses software rendering. Hardware The render target uses hardware rendering only. Software The render target uses software rendering only."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetProperties.html",
    "title": "Struct D2D1RenderTargetProperties",
    "keywords": "Struct D2D1RenderTargetProperties Contains rendering options (hardware or software), pixel format, DPI information, remoting options, and Direct3D support requirements for a render target. Implements IEquatable < D2D1RenderTargetProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RenderTargetProperties : IEquatable<D2D1RenderTargetProperties> Constructors | Improve this Doc View Source D2D1RenderTargetProperties(D2D1RenderTargetType, D2D1PixelFormat, Single, Single, D2D1RenderTargetUsages, D2D1FeatureLevel) Initializes a new instance of the D2D1RenderTargetProperties struct. Declaration public D2D1RenderTargetProperties(D2D1RenderTargetType renderTargetType, D2D1PixelFormat pixelFormat, float dpiX, float dpiY, D2D1RenderTargetUsages usage, D2D1FeatureLevel minLevel) Parameters Type Name Description D2D1RenderTargetType renderTargetType A value that specifies whether the render target should force hardware or software rendering. D2D1PixelFormat pixelFormat The pixel format and alpha mode of the render target. Single dpiX The horizontal DPI of the render target. To use the default DPI, set dpiX and dpiY to 0. Single dpiY The vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0. D2D1RenderTargetUsages usage A value that specifies how the render target is remoted and whether it should be GDI-compatible. D2D1FeatureLevel minLevel A value that specifies the minimum Direct3D feature level required for hardware rendering. Properties | Improve this Doc View Source Default Gets default properties. Declaration public static D2D1RenderTargetProperties Default { get; } Property Value Type Description D2D1RenderTargetProperties | Improve this Doc View Source DpiX Gets or sets the horizontal DPI of the render target. To use the default DPI, set dpiX and dpiY to 0. Declaration public float DpiX { get; set; } Property Value Type Description Single | Improve this Doc View Source DpiY Gets or sets the vertical DPI of the render target. To use the default DPI, set dpiX and dpiY to 0. Declaration public float DpiY { get; set; } Property Value Type Description Single | Improve this Doc View Source MinLevel Gets or sets a value that specifies the minimum Direct3D feature level required for hardware rendering. Declaration public D2D1FeatureLevel MinLevel { get; set; } Property Value Type Description D2D1FeatureLevel | Improve this Doc View Source PixelFormat Gets or sets the pixel format and alpha mode of the render target. Declaration public D2D1PixelFormat PixelFormat { get; set; } Property Value Type Description D2D1PixelFormat | Improve this Doc View Source RenderTargetType Gets or sets a value that specifies whether the render target should force hardware or software rendering. Declaration public D2D1RenderTargetType RenderTargetType { get; set; } Property Value Type Description D2D1RenderTargetType | Improve this Doc View Source Usage Gets or sets a value that specifies how the render target is remoted and whether it should be GDI-compatible. Declaration public D2D1RenderTargetUsages Usage { get; set; } Property Value Type Description D2D1RenderTargetUsages Methods | Improve this Doc View Source Equals(D2D1RenderTargetProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RenderTargetProperties other) Parameters Type Name Description D2D1RenderTargetProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RenderTargetProperties, D2D1RenderTargetProperties) Compares two D2D1RenderTargetProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RenderTargetProperties left, D2D1RenderTargetProperties right) Parameters Type Name Description D2D1RenderTargetProperties left The left D2D1RenderTargetProperties to compare. D2D1RenderTargetProperties right The right D2D1RenderTargetProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RenderTargetProperties, D2D1RenderTargetProperties) Compares two D2D1RenderTargetProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RenderTargetProperties left, D2D1RenderTargetProperties right) Parameters Type Name Description D2D1RenderTargetProperties left The left D2D1RenderTargetProperties to compare. D2D1RenderTargetProperties right The right D2D1RenderTargetProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTarget.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTarget.html",
    "title": "Class D2D1RenderTarget",
    "keywords": "Class D2D1RenderTarget Represents an object that can receive drawing commands. Inheritance Object D2D1Resource D2D1RenderTarget D2D1BitmapRenderTarget D2D1DCRenderTarget D2D1HwndRenderTarget Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.Handle D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1RenderTarget : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source AntialiasMode Gets or sets the current antialiasing mode for nontext drawing operations. Declaration public D2D1AntialiasMode AntialiasMode { get; set; } Property Value Type Description D2D1AntialiasMode | Improve this Doc View Source MaximumBitmapSize Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target. Declaration public uint MaximumBitmapSize { get; } Property Value Type Description UInt32 | Improve this Doc View Source PixelFormat Gets the pixel format and alpha mode of the render target. Declaration public D2D1PixelFormat PixelFormat { get; } Property Value Type Description D2D1PixelFormat | Improve this Doc View Source PixelSize Gets the size of the render target in device pixels. Declaration public D2D1SizeU PixelSize { get; } Property Value Type Description D2D1SizeU | Improve this Doc View Source Size Gets the size of the render target in device-independent pixels. Declaration public D2D1SizeF Size { get; } Property Value Type Description D2D1SizeF | Improve this Doc View Source TextAntialiasMode Gets or sets the current antialiasing mode for text and glyph drawing operations. Declaration public D2D1TextAntialiasMode TextAntialiasMode { get; set; } Property Value Type Description D2D1TextAntialiasMode | Improve this Doc View Source Transform Gets or sets the current transform of the render target. Declaration public D2D1Matrix3X2F Transform { get; set; } Property Value Type Description D2D1Matrix3X2F Methods | Improve this Doc View Source BeginDraw() Initiates drawing on this render target. Declaration public void BeginDraw() | Improve this Doc View Source Clear() Clears the drawing area to the specified color. Declaration public void Clear() | Improve this Doc View Source Clear(D2D1ColorF) Clears the drawing area to the specified color. Declaration public void Clear(D2D1ColorF clearColor) Parameters Type Name Description D2D1ColorF clearColor The color to which the drawing area is cleared. | Improve this Doc View Source CreateBitmap(D2D1SizeU, D2D1BitmapProperties) Creates a Direct2D bitmap from a pointer to in-memory source data. Declaration public D2D1Bitmap CreateBitmap(D2D1SizeU size, D2D1BitmapProperties bitmapProperties) Parameters Type Name Description D2D1SizeU size The dimension of the bitmap to create in pixels. D2D1BitmapProperties bitmapProperties The pixel format and dots per inch (DPI) of the bitmap to create. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateBitmap(D2D1SizeU, Byte[], UInt32, D2D1BitmapProperties) Creates a Direct2D bitmap from a pointer to in-memory source data. Declaration public D2D1Bitmap CreateBitmap(D2D1SizeU size, byte[] srcData, uint pitch, D2D1BitmapProperties bitmapProperties) Parameters Type Name Description D2D1SizeU size The dimension of the bitmap to create in pixels. Byte [] srcData The image data, or null to create an uninitialized bitmap. UInt32 pitch The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding . If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.) D2D1BitmapProperties bitmapProperties The pixel format and dots per inch (DPI) of the bitmap to create. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateBitmap(D2D1SizeU, IntPtr, UInt32, D2D1BitmapProperties) Creates a Direct2D bitmap from a pointer to in-memory source data. Declaration public D2D1Bitmap CreateBitmap(D2D1SizeU size, IntPtr srcData, uint pitch, D2D1BitmapProperties bitmapProperties) Parameters Type Name Description D2D1SizeU size The dimension of the bitmap to create in pixels. IntPtr srcData A pointer to the memory location of the image data, or NULL to create an uninitialized bitmap. UInt32 pitch The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding . If srcData is NULL, this value is ignored. (Note that pitch is also sometimes called stride.) D2D1BitmapProperties bitmapProperties The pixel format and dots per inch (DPI) of the bitmap to create. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateBitmapBrush(D2D1Bitmap) Creates an D2D1BitmapBrush from the specified bitmap. Declaration public D2D1BitmapBrush CreateBitmapBrush(D2D1Bitmap bitmap) Parameters Type Name Description D2D1Bitmap bitmap The bitmap contents of the new brush. Returns Type Description D2D1BitmapBrush The new brush. | Improve this Doc View Source CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties) Creates an D2D1BitmapBrush from the specified bitmap. Declaration public D2D1BitmapBrush CreateBitmapBrush(D2D1Bitmap bitmap, D2D1BitmapBrushProperties bitmapBrushProperties) Parameters Type Name Description D2D1Bitmap bitmap The bitmap contents of the new brush. D2D1BitmapBrushProperties bitmapBrushProperties The extend modes and interpolation mode of the new brush. Returns Type Description D2D1BitmapBrush The new brush. | Improve this Doc View Source CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties, D2D1BrushProperties) Creates an D2D1BitmapBrush from the specified bitmap. Declaration public D2D1BitmapBrush CreateBitmapBrush(D2D1Bitmap bitmap, D2D1BitmapBrushProperties bitmapBrushProperties, D2D1BrushProperties brushProperties) Parameters Type Name Description D2D1Bitmap bitmap The bitmap contents of the new brush. D2D1BitmapBrushProperties bitmapBrushProperties The extend modes and interpolation mode of the new brush. D2D1BrushProperties brushProperties A structure that contains the opacity and transform of the new brush. Returns Type Description D2D1BitmapBrush The new brush. | Improve this Doc View Source CreateBitmapFromWicBitmap(Object) Creates an D2D1Bitmap by copying the specified Microsoft Windows Imaging Component (WIC) bitmap. Declaration public D2D1Bitmap CreateBitmapFromWicBitmap(object wicBitmapSource) Parameters Type Name Description Object wicBitmapSource The WIC bitmap to copy. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateBitmapFromWicBitmap(Object, D2D1BitmapProperties) Creates an D2D1Bitmap by copying the specified Microsoft Windows Imaging Component (WIC) bitmap. Declaration public D2D1Bitmap CreateBitmapFromWicBitmap(object wicBitmapSource, D2D1BitmapProperties bitmapProperties) Parameters Type Name Description Object wicBitmapSource The WIC bitmap to copy. D2D1BitmapProperties bitmapProperties The pixel format and DPI of the bitmap to create. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateCompatibleRenderTarget() Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget() Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1PixelFormat desiredFormat, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1PixelFormat desiredFormat The desired pixel format and alpha mode of the new render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1PixelFormat desiredFormat, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1PixelFormat desiredFormat The desired pixel format and alpha mode of the new render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1SizeU desiredPixelSize) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1SizeU desiredPixelSize, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1SizeU desiredPixelSize, D2D1PixelFormat desiredFormat) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. D2D1PixelFormat desiredFormat The desired pixel format and alpha mode of the new render target. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeF desiredSize, D2D1SizeU desiredPixelSize, D2D1PixelFormat desiredFormat, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeF desiredSize The desired size of the new render target in device-independent pixels if it should be different from the original render target. D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. D2D1PixelFormat desiredFormat The desired pixel format and alpha mode of the new render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeU, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeU desiredPixelSize, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateCompatibleRenderTarget(D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target. Declaration public D2D1BitmapRenderTarget CreateCompatibleRenderTarget(D2D1SizeU desiredPixelSize, D2D1PixelFormat desiredFormat, D2D1CompatibleRenderTargetOptions options) Parameters Type Name Description D2D1SizeU desiredPixelSize The desired size of the new render target in pixels if it should be different from the original render target. D2D1PixelFormat desiredFormat The desired pixel format and alpha mode of the new render target. D2D1CompatibleRenderTargetOptions options A value that specifies whether the new render target must be compatible with GDI. Returns Type Description D2D1BitmapRenderTarget The new bitmap render target. | Improve this Doc View Source CreateGradientStopCollection(D2D1GradientStop[]) Creates an D2D1GradientStopCollection from the specified gradient stops, color interpolation gamma, and extend mode. Declaration public D2D1GradientStopCollection CreateGradientStopCollection(D2D1GradientStop[] gradientStops) Parameters Type Name Description D2D1GradientStop [] gradientStops An array of D2D1GradientStop structures. Returns Type Description D2D1GradientStopCollection The new gradient stop collection. | Improve this Doc View Source CreateGradientStopCollection(D2D1GradientStop[], D2D1Gamma, D2D1ExtendMode) Creates an D2D1GradientStopCollection from the specified gradient stops, color interpolation gamma, and extend mode. Declaration public D2D1GradientStopCollection CreateGradientStopCollection(D2D1GradientStop[] gradientStops, D2D1Gamma colorInterpolationGamma, D2D1ExtendMode extendMode) Parameters Type Name Description D2D1GradientStop [] gradientStops An array of D2D1GradientStop structures. D2D1Gamma colorInterpolationGamma The space in which color interpolation between the gradient stops is performed. D2D1ExtendMode extendMode The behavior of the gradient outside the [0,1] normalized range. Returns Type Description D2D1GradientStopCollection The new gradient stop collection. | Improve this Doc View Source CreateLayer() Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size. Declaration public D2D1Layer CreateLayer() Returns Type Description D2D1Layer The new layer. | Improve this Doc View Source CreateLayer(D2D1SizeF) Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size. Declaration public D2D1Layer CreateLayer(D2D1SizeF size) Parameters Type Name Description D2D1SizeF size The initial size of the layer in device-independent pixels. Returns Type Description D2D1Layer The new layer. | Improve this Doc View Source CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) Creates an D2D1LinearGradientBrush that contains the specified gradient stops and has the specified transform and base opacity. Declaration public D2D1LinearGradientBrush CreateLinearGradientBrush(D2D1LinearGradientBrushProperties linearGradientBrushProperties, D2D1BrushProperties brushProperties, D2D1GradientStopCollection gradientStopCollection) Parameters Type Name Description D2D1LinearGradientBrushProperties linearGradientBrushProperties The start and end points of the gradient. D2D1BrushProperties brushProperties The transform and base opacity of the new brush. D2D1GradientStopCollection gradientStopCollection A collection of D2D1GradientStop structures that describe the colors in the brush's gradient and their locations along the gradient line. Returns Type Description D2D1LinearGradientBrush The new brush. | Improve this Doc View Source CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1GradientStopCollection) Creates an D2D1LinearGradientBrush that contains the specified gradient stops and has the specified transform and base opacity. Declaration public D2D1LinearGradientBrush CreateLinearGradientBrush(D2D1LinearGradientBrushProperties linearGradientBrushProperties, D2D1GradientStopCollection gradientStopCollection) Parameters Type Name Description D2D1LinearGradientBrushProperties linearGradientBrushProperties The start and end points of the gradient. D2D1GradientStopCollection gradientStopCollection A collection of D2D1GradientStop structures that describe the colors in the brush's gradient and their locations along the gradient line. Returns Type Description D2D1LinearGradientBrush The new brush. | Improve this Doc View Source CreateMesh() Create a mesh that uses triangles to describe a shape. Declaration public D2D1Mesh CreateMesh() Returns Type Description D2D1Mesh The new mesh. | Improve this Doc View Source CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) Creates an D2D1RadialGradientBrush that contains the specified gradient stops and has the specified transform and base opacity. Declaration public D2D1RadialGradientBrush CreateRadialGradientBrush(D2D1RadialGradientBrushProperties radialGradientBrushProperties, D2D1BrushProperties brushProperties, D2D1GradientStopCollection gradientStopCollection) Parameters Type Name Description D2D1RadialGradientBrushProperties radialGradientBrushProperties The center, gradient origin offset, and x-radius and y-radius of the brush's gradient. D2D1BrushProperties brushProperties The transform and base opacity of the new brush. D2D1GradientStopCollection gradientStopCollection A collection of D2D1GradientStop structures that describe the colors in the brush's gradient and their locations along the gradient. Returns Type Description D2D1RadialGradientBrush The new brush. | Improve this Doc View Source CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1GradientStopCollection) Creates an D2D1RadialGradientBrush that contains the specified gradient stops and has the specified transform and base opacity. Declaration public D2D1RadialGradientBrush CreateRadialGradientBrush(D2D1RadialGradientBrushProperties radialGradientBrushProperties, D2D1GradientStopCollection gradientStopCollection) Parameters Type Name Description D2D1RadialGradientBrushProperties radialGradientBrushProperties The center, gradient origin offset, and x-radius and y-radius of the brush's gradient. D2D1GradientStopCollection gradientStopCollection A collection of D2D1GradientStop structures that describe the colors in the brush's gradient and their locations along the gradient. Returns Type Description D2D1RadialGradientBrush The new brush. | Improve this Doc View Source CreateSharedBitmap(Guid, Object) Creates an D2D1Bitmap whose data is shared with another resource. Declaration public D2D1Bitmap CreateSharedBitmap(Guid riid, object data) Parameters Type Name Description Guid riid The interface ID of the object supplying the source data. Object data The data to share. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateSharedBitmap(Guid, Object, D2D1BitmapProperties) Creates an D2D1Bitmap whose data is shared with another resource. Declaration public D2D1Bitmap CreateSharedBitmap(Guid riid, object data, D2D1BitmapProperties bitmapProperties) Parameters Type Name Description Guid riid The interface ID of the object supplying the source data. Object data The data to share. D2D1BitmapProperties bitmapProperties The pixel format and DPI of the bitmap to create. Returns Type Description D2D1Bitmap The new bitmap. | Improve this Doc View Source CreateSolidColorBrush(D2D1ColorF) Creates a new D2D1SolidColorBrush that has the specified color and opacity. Declaration public D2D1SolidColorBrush CreateSolidColorBrush(D2D1ColorF color) Parameters Type Name Description D2D1ColorF color The red, green, blue, and alpha values of the brush's color. Returns Type Description D2D1SolidColorBrush The new brush. | Improve this Doc View Source CreateSolidColorBrush(D2D1ColorF, D2D1BrushProperties) Creates a new D2D1SolidColorBrush that has the specified color and opacity. Declaration public D2D1SolidColorBrush CreateSolidColorBrush(D2D1ColorF color, D2D1BrushProperties brushProperties) Parameters Type Name Description D2D1ColorF color The red, green, blue, and alpha values of the brush's color. D2D1BrushProperties brushProperties The base opacity of the brush. Returns Type Description D2D1SolidColorBrush The new brush. | Improve this Doc View Source DrawBitmap(D2D1Bitmap) Draws the specified bitmap after scaling it to the size of the specified rectangle. Declaration public void DrawBitmap(D2D1Bitmap bitmap) Parameters Type Name Description D2D1Bitmap bitmap The bitmap to render. | Improve this Doc View Source DrawBitmap(D2D1Bitmap, D2D1RectF) Draws the specified bitmap after scaling it to the size of the specified rectangle. Declaration public void DrawBitmap(D2D1Bitmap bitmap, D2D1RectF destinationRectangle) Parameters Type Name Description D2D1Bitmap bitmap The bitmap to render. D2D1RectF destinationRectangle The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. | Improve this Doc View Source DrawBitmap(D2D1Bitmap, D2D1RectF, Single) Draws the specified bitmap after scaling it to the size of the specified rectangle. Declaration public void DrawBitmap(D2D1Bitmap bitmap, D2D1RectF destinationRectangle, float opacity) Parameters Type Name Description D2D1Bitmap bitmap The bitmap to render. D2D1RectF destinationRectangle The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. Single opacity A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents. | Improve this Doc View Source DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode) Draws the specified bitmap after scaling it to the size of the specified rectangle. Declaration public void DrawBitmap(D2D1Bitmap bitmap, D2D1RectF destinationRectangle, float opacity, D2D1BitmapInterpolationMode interpolationMode) Parameters Type Name Description D2D1Bitmap bitmap The bitmap to render. D2D1RectF destinationRectangle The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. Single opacity A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents. D2D1BitmapInterpolationMode interpolationMode The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. | Improve this Doc View Source DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode, D2D1RectF) Draws the specified bitmap after scaling it to the size of the specified rectangle. Declaration public void DrawBitmap(D2D1Bitmap bitmap, D2D1RectF destinationRectangle, float opacity, D2D1BitmapInterpolationMode interpolationMode, D2D1RectF sourceRectangle) Parameters Type Name Description D2D1Bitmap bitmap The bitmap to render. D2D1RectF destinationRectangle The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. Single opacity A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents. D2D1BitmapInterpolationMode interpolationMode The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. D2D1RectF sourceRectangle The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn. | Improve this Doc View Source DrawEllipse(D2D1Ellipse, D2D1Brush) Draws the outline of the specified ellipse using the specified stroke style. Declaration public void DrawEllipse(D2D1Ellipse ellipse, D2D1Brush brush) Parameters Type Name Description D2D1Ellipse ellipse The position and radius of the ellipse to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the ellipse's outline. | Improve this Doc View Source DrawEllipse(D2D1Ellipse, D2D1Brush, Single) Draws the outline of the specified ellipse using the specified stroke style. Declaration public void DrawEllipse(D2D1Ellipse ellipse, D2D1Brush brush, float strokeWidth) Parameters Type Name Description D2D1Ellipse ellipse The position and radius of the ellipse to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the ellipse's outline. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. | Improve this Doc View Source DrawEllipse(D2D1Ellipse, D2D1Brush, Single, D2D1StrokeStyle) Draws the outline of the specified ellipse using the specified stroke style. Declaration public void DrawEllipse(D2D1Ellipse ellipse, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1Ellipse ellipse The position and radius of the ellipse to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the ellipse's outline. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. D2D1StrokeStyle strokeStyle The style of stroke to apply to the ellipse's outline. | Improve this Doc View Source DrawGeometry(D2D1Geometry, D2D1Brush) Draws the outline of the specified geometry using the specified stroke style. Declaration public void DrawGeometry(D2D1Geometry geometry, D2D1Brush brush) Parameters Type Name Description D2D1Geometry geometry The geometry to draw. D2D1Brush brush The brush used to paint the geometry's stroke. | Improve this Doc View Source DrawGeometry(D2D1Geometry, D2D1Brush, Single) Draws the outline of the specified geometry using the specified stroke style. Declaration public void DrawGeometry(D2D1Geometry geometry, D2D1Brush brush, float strokeWidth) Parameters Type Name Description D2D1Geometry geometry The geometry to draw. D2D1Brush brush The brush used to paint the geometry's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. | Improve this Doc View Source DrawGeometry(D2D1Geometry, D2D1Brush, Single, D2D1StrokeStyle) Draws the outline of the specified geometry using the specified stroke style. Declaration public void DrawGeometry(D2D1Geometry geometry, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1Geometry geometry The geometry to draw. D2D1Brush brush The brush used to paint the geometry's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. D2D1StrokeStyle strokeStyle The style of stroke to apply to the geometry's outline. | Improve this Doc View Source DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush) Draws the specified glyphs. Declaration public void DrawGlyphRun(D2D1Point2F baselineOrigin, DWriteGlyphRun glyphRun, D2D1Brush foregroundBrush) Parameters Type Name Description D2D1Point2F baselineOrigin The origin, in device-independent pixels, of the glyphs' baseline. DWriteGlyphRun glyphRun The glyphs to render. D2D1Brush foregroundBrush The brush used to paint the specified glyphs. | Improve this Doc View Source DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush, DWriteMeasuringMode) Draws the specified glyphs. Declaration public void DrawGlyphRun(D2D1Point2F baselineOrigin, DWriteGlyphRun glyphRun, D2D1Brush foregroundBrush, DWriteMeasuringMode measuringMode) Parameters Type Name Description D2D1Point2F baselineOrigin The origin, in device-independent pixels, of the glyphs' baseline. DWriteGlyphRun glyphRun The glyphs to render. D2D1Brush foregroundBrush The brush used to paint the specified glyphs. DWriteMeasuringMode measuringMode A value that indicates how glyph metrics are used to measure text when it is formatted. | Improve this Doc View Source DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush) Draws a line between the specified points using the specified stroke style. Declaration public void DrawLine(D2D1Point2F point0, D2D1Point2F point1, D2D1Brush brush) Parameters Type Name Description D2D1Point2F point0 The start point of the line, in device-independent pixels. D2D1Point2F point1 The end point of the line, in device-independent pixels. D2D1Brush brush The brush used to paint the line's stroke. | Improve this Doc View Source DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single) Draws a line between the specified points using the specified stroke style. Declaration public void DrawLine(D2D1Point2F point0, D2D1Point2F point1, D2D1Brush brush, float strokeWidth) Parameters Type Name Description D2D1Point2F point0 The start point of the line, in device-independent pixels. D2D1Point2F point1 The end point of the line, in device-independent pixels. D2D1Brush brush The brush used to paint the line's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. | Improve this Doc View Source DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single, D2D1StrokeStyle) Draws a line between the specified points using the specified stroke style. Declaration public void DrawLine(D2D1Point2F point0, D2D1Point2F point1, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1Point2F point0 The start point of the line, in device-independent pixels. D2D1Point2F point1 The end point of the line, in device-independent pixels. D2D1Brush brush The brush used to paint the line's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. D2D1StrokeStyle strokeStyle The style of stroke to paint. | Improve this Doc View Source DrawRectangle(D2D1RectF, D2D1Brush) Draws the outline of a rectangle that has the specified dimensions and stroke style. Declaration public void DrawRectangle(D2D1RectF rect, D2D1Brush brush) Parameters Type Name Description D2D1RectF rect The dimensions of the rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rectangle's stroke. | Improve this Doc View Source DrawRectangle(D2D1RectF, D2D1Brush, Single) Draws the outline of a rectangle that has the specified dimensions and stroke style. Declaration public void DrawRectangle(D2D1RectF rect, D2D1Brush brush, float strokeWidth) Parameters Type Name Description D2D1RectF rect The dimensions of the rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rectangle's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. | Improve this Doc View Source DrawRectangle(D2D1RectF, D2D1Brush, Single, D2D1StrokeStyle) Draws the outline of a rectangle that has the specified dimensions and stroke style. Declaration public void DrawRectangle(D2D1RectF rect, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1RectF rect The dimensions of the rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rectangle's stroke. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. D2D1StrokeStyle strokeStyle The style of stroke to paint. | Improve this Doc View Source DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush) Draws the outline of the specified rounded rectangle using the specified stroke style. Declaration public void DrawRoundedRectangle(D2D1RoundedRect roundedRect, D2D1Brush brush) Parameters Type Name Description D2D1RoundedRect roundedRect The dimensions of the rounded rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rounded rectangle's outline. | Improve this Doc View Source DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single) Draws the outline of the specified rounded rectangle using the specified stroke style. Declaration public void DrawRoundedRectangle(D2D1RoundedRect roundedRect, D2D1Brush brush, float strokeWidth) Parameters Type Name Description D2D1RoundedRect roundedRect The dimensions of the rounded rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rounded rectangle's outline. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. | Improve this Doc View Source DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single, D2D1StrokeStyle) Draws the outline of the specified rounded rectangle using the specified stroke style. Declaration public void DrawRoundedRectangle(D2D1RoundedRect roundedRect, D2D1Brush brush, float strokeWidth, D2D1StrokeStyle strokeStyle) Parameters Type Name Description D2D1RoundedRect roundedRect The dimensions of the rounded rectangle to draw, in device-independent pixels. D2D1Brush brush The brush used to paint the rounded rectangle's outline. Single strokeWidth The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line. D2D1StrokeStyle strokeStyle The style of the rounded rectangle's stroke. | Improve this Doc View Source DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush) Draws the specified text using the format information provided by an DWriteTextFormat object. Declaration public void DrawText(string text, DWriteTextFormat textFormat, D2D1RectF layoutRect, D2D1Brush defaultForegroundBrush) Parameters Type Name Description String text An array of Unicode characters to draw. DWriteTextFormat textFormat An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction. D2D1RectF layoutRect The size and position of the area in which the text is drawn. D2D1Brush defaultForegroundBrush The brush used to paint the text. | Improve this Doc View Source DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions) Draws the specified text using the format information provided by an DWriteTextFormat object. Declaration public void DrawText(string text, DWriteTextFormat textFormat, D2D1RectF layoutRect, D2D1Brush defaultForegroundBrush, D2D1DrawTextOptions options) Parameters Type Name Description String text An array of Unicode characters to draw. DWriteTextFormat textFormat An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction. D2D1RectF layoutRect The size and position of the area in which the text is drawn. D2D1Brush defaultForegroundBrush The brush used to paint the text. D2D1DrawTextOptions options A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. | Improve this Doc View Source DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions, DWriteMeasuringMode) Draws the specified text using the format information provided by an DWriteTextFormat object. Declaration public void DrawText(string text, DWriteTextFormat textFormat, D2D1RectF layoutRect, D2D1Brush defaultForegroundBrush, D2D1DrawTextOptions options, DWriteMeasuringMode measuringMode) Parameters Type Name Description String text An array of Unicode characters to draw. DWriteTextFormat textFormat An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction. D2D1RectF layoutRect The size and position of the area in which the text is drawn. D2D1Brush defaultForegroundBrush The brush used to paint the text. D2D1DrawTextOptions options A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. DWriteMeasuringMode measuringMode A value that indicates how glyph metrics are used to measure text when it is formatted. | Improve this Doc View Source DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush) Draws the formatted text described by the specified DWriteTextLayout object. Declaration public void DrawTextLayout(D2D1Point2F origin, DWriteTextLayout textLayout, D2D1Brush defaultForegroundBrush) Parameters Type Name Description D2D1Point2F origin The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. DWriteTextLayout textLayout The formatted text to draw. D2D1Brush defaultForegroundBrush The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect. | Improve this Doc View Source DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush, D2D1DrawTextOptions) Draws the formatted text described by the specified DWriteTextLayout object. Declaration public void DrawTextLayout(D2D1Point2F origin, DWriteTextLayout textLayout, D2D1Brush defaultForegroundBrush, D2D1DrawTextOptions options) Parameters Type Name Description D2D1Point2F origin The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn. DWriteTextLayout textLayout The formatted text to draw. D2D1Brush defaultForegroundBrush The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect. D2D1DrawTextOptions options A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. | Improve this Doc View Source EndDraw() Ends drawing operations on the render target and indicates the current error state and associated tags. Declaration public void EndDraw() | Improve this Doc View Source EndDraw(out UInt64, out UInt64) Ends drawing operations on the render target and indicates the current error state and associated tags. Declaration public void EndDraw(out ulong tag1, out ulong tag2) Parameters Type Name Description UInt64 tag1 The first tag for drawing operations that caused errors or 0 if there were no errors. UInt64 tag2 The second tag for drawing operations that caused errors or 0 if there were no errors. | Improve this Doc View Source EndDrawIgnoringRecreateTargetError() Ends drawing operations on the render target, ignoring the recreate target error. Declaration public void EndDrawIgnoringRecreateTargetError() | Improve this Doc View Source FillEllipse(D2D1Ellipse, D2D1Brush) Paints the interior of the specified ellipse. Declaration public void FillEllipse(D2D1Ellipse ellipse, D2D1Brush brush) Parameters Type Name Description D2D1Ellipse ellipse The position and radius, in device-independent pixels, of the ellipse to paint. D2D1Brush brush The brush used to paint the interior of the ellipse. | Improve this Doc View Source FillGeometry(D2D1Geometry, D2D1Brush) Paints the interior of the specified geometry. Declaration public void FillGeometry(D2D1Geometry geometry, D2D1Brush brush) Parameters Type Name Description D2D1Geometry geometry The geometry to paint. D2D1Brush brush The brush used to paint the geometry's interior. | Improve this Doc View Source FillGeometry(D2D1Geometry, D2D1Brush, D2D1Brush) Paints the interior of the specified geometry. Declaration public void FillGeometry(D2D1Geometry geometry, D2D1Brush brush, D2D1Brush opacityBrush) Parameters Type Name Description D2D1Geometry geometry The geometry to paint. D2D1Brush brush The brush used to paint the geometry's interior. D2D1Brush opacityBrush The opacity mask to apply to the geometry. | Improve this Doc View Source FillMesh(D2D1Mesh, D2D1Brush) Paints the interior of the specified mesh. Declaration public void FillMesh(D2D1Mesh mesh, D2D1Brush brush) Parameters Type Name Description D2D1Mesh mesh The mesh to paint. D2D1Brush brush The brush used to paint the mesh. | Improve this Doc View Source FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent) Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target. Declaration public void FillOpacityMask(D2D1Bitmap opacityMask, D2D1Brush brush, D2D1OpacityMaskContent content) Parameters Type Name Description D2D1Bitmap opacityMask The opacity mask to apply to the brush. The alpha value of each pixel in the region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. D2D1Brush brush The brush used to paint the region of the render target specified by destinationRectangle. D2D1OpacityMaskContent content The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. | Improve this Doc View Source FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF) Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target. Declaration public void FillOpacityMask(D2D1Bitmap opacityMask, D2D1Brush brush, D2D1OpacityMaskContent content, D2D1RectF destinationRectangle) Parameters Type Name Description D2D1Bitmap opacityMask The opacity mask to apply to the brush. The alpha value of each pixel in the region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. D2D1Brush brush The brush used to paint the region of the render target specified by destinationRectangle. D2D1OpacityMaskContent content The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. D2D1RectF destinationRectangle The region of the render target to paint, in device-independent pixels. | Improve this Doc View Source FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF, D2D1RectF) Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target. Declaration public void FillOpacityMask(D2D1Bitmap opacityMask, D2D1Brush brush, D2D1OpacityMaskContent content, D2D1RectF destinationRectangle, D2D1RectF sourceRectangle) Parameters Type Name Description D2D1Bitmap opacityMask The opacity mask to apply to the brush. The alpha value of each pixel in the region specified by sourceRectangle is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by destinationRectangle. D2D1Brush brush The brush used to paint the region of the render target specified by destinationRectangle. D2D1OpacityMaskContent content The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended. D2D1RectF destinationRectangle The region of the render target to paint, in device-independent pixels. D2D1RectF sourceRectangle The region of the bitmap to use as the opacity mask, in device-independent pixels. | Improve this Doc View Source FillRectangle(D2D1RectF, D2D1Brush) Paints the interior of the specified rectangle. Declaration public void FillRectangle(D2D1RectF rect, D2D1Brush brush) Parameters Type Name Description D2D1RectF rect The dimension of the rectangle to paint, in device-independent pixels. D2D1Brush brush The brush used to paint the rectangle's interior. | Improve this Doc View Source FillRoundedRectangle(D2D1RoundedRect, D2D1Brush) Paints the interior of the specified rounded rectangle. Declaration public void FillRoundedRectangle(D2D1RoundedRect roundedRect, D2D1Brush brush) Parameters Type Name Description D2D1RoundedRect roundedRect The dimensions of the rounded rectangle to paint, in device-independent pixels. D2D1Brush brush The brush used to paint the interior of the rounded rectangle. | Improve this Doc View Source Flush() Executes all pending drawing commands. Declaration public void Flush() | Improve this Doc View Source Flush(out UInt64, out UInt64) Executes all pending drawing commands. Declaration public void Flush(out ulong tag1, out ulong tag2) Parameters Type Name Description UInt64 tag1 The first tag for drawing operations that caused errors or 0 if there were no errors. UInt64 tag2 The second tag for drawing operations that caused errors or 0 if there were no errors. | Improve this Doc View Source GetDpi(out Single, out Single) Return the render target's dots per inch (DPI). Declaration public void GetDpi(out float dpiX, out float dpiY) Parameters Type Name Description Single dpiX The horizontal DPI of the render target. Single dpiY The vertical DPI of the render target. | Improve this Doc View Source GetTags(out UInt64, out UInt64) Gets the label for subsequent drawing operations. Declaration public void GetTags(out ulong tag1, out ulong tag2) Parameters Type Name Description UInt64 tag1 The first label for subsequent drawing operations. UInt64 tag2 The second label for subsequent drawing operations. | Improve this Doc View Source GetTextRenderingParams() Retrieves the render target's current text rendering options. Declaration public DWriteRenderingParams GetTextRenderingParams() Returns Type Description DWriteRenderingParams The render target's current text rendering options. | Improve this Doc View Source IsSupported(D2D1RenderTargetProperties) Indicates whether the render target supports the specified properties. Declaration public bool IsSupported(D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description D2D1RenderTargetProperties renderTargetProperties The render target properties to test. Returns Type Description Boolean true if the specified render target properties are supported by this render target; otherwise, false . | Improve this Doc View Source PopAxisAlignedClip() Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations. Declaration public void PopAxisAlignedClip() | Improve this Doc View Source PopLayer() Stops redirecting drawing operations to the layer that is specified by the last PushLayer(D2D1LayerParameters, D2D1Layer) call. Declaration public void PopLayer() | Improve this Doc View Source PushAxisAlignedClip(D2D1RectF, D2D1AntialiasMode) Specifies a rectangle to which all subsequent drawing operations are clipped. Declaration public void PushAxisAlignedClip(D2D1RectF clipRect, D2D1AntialiasMode antialiasMode) Parameters Type Name Description D2D1RectF clipRect The size and position of the clipping area, in device-independent pixels. D2D1AntialiasMode antialiasMode The antialiasing mode that is used to draw the edges of clip rectangles that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip() method is called, and does not apply to each primitive within the layer. | Improve this Doc View Source PushLayer(D2D1LayerParameters, D2D1Layer) Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer() is called. Declaration public void PushLayer(D2D1LayerParameters layerParameters, D2D1Layer layer) Parameters Type Name Description D2D1LayerParameters layerParameters The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer. D2D1Layer layer The layer that receives subsequent drawing operations. | Improve this Doc View Source RestoreDrawingState(D2D1DrawingStateBlock) Sets the render target's drawing state to that of the specified D2D1DrawingStateBlock . Declaration public void RestoreDrawingState(D2D1DrawingStateBlock drawingStateBlock) Parameters Type Name Description D2D1DrawingStateBlock drawingStateBlock The new drawing state of the render target. | Improve this Doc View Source SaveDrawingState(D2D1DrawingStateBlock) Saves the current drawing state to the specified D2D1DrawingStateBlock . Declaration public void SaveDrawingState(D2D1DrawingStateBlock drawingStateBlock) Parameters Type Name Description D2D1DrawingStateBlock drawingStateBlock The current drawing state of the render target. | Improve this Doc View Source SetDpi(Single, Single) Sets the dots per inch (DPI) of the render target. Declaration public void SetDpi(float dpiX, float dpiY) Parameters Type Name Description Single dpiX A value greater than or equal to zero that specifies the horizontal DPI of the render target. Single dpiY A value greater than or equal to zero that specifies the vertical DPI of the render target. | Improve this Doc View Source SetTags(UInt64, UInt64) Specifies a label for subsequent drawing operations. Declaration public void SetTags(ulong tag1, ulong tag2) Parameters Type Name Description UInt64 tag1 The first to apply to subsequent drawing operations. UInt64 tag2 The second to apply to subsequent drawing operations. | Improve this Doc View Source SetTextRenderingParams() Specifies text rendering options to be applied to all subsequent text and glyph drawing operations. Declaration public void SetTextRenderingParams() | Improve this Doc View Source SetTextRenderingParams(DWriteRenderingParams) Specifies text rendering options to be applied to all subsequent text and glyph drawing operations. Declaration public void SetTextRenderingParams(DWriteRenderingParams textRenderingParams) Parameters Type Name Description DWriteRenderingParams textRenderingParams The text rendering options to be applied to all subsequent text and glyph drawing operations. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RadialGradientBrushProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RadialGradientBrushProperties.html",
    "title": "Struct D2D1RadialGradientBrushProperties",
    "keywords": "Struct D2D1RadialGradientBrushProperties Contains the gradient origin offset and the size and position of the gradient ellipse for an D2D1RadialGradientBrush . Implements IEquatable < D2D1RadialGradientBrushProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RadialGradientBrushProperties : IEquatable<D2D1RadialGradientBrushProperties> Constructors | Improve this Doc View Source D2D1RadialGradientBrushProperties(D2D1Point2F, D2D1Point2F, Single, Single) Initializes a new instance of the D2D1RadialGradientBrushProperties struct. Declaration public D2D1RadialGradientBrushProperties(D2D1Point2F center, D2D1Point2F gradientOriginOffset, float radiusX, float radiusY) Parameters Type Name Description D2D1Point2F center The center of the gradient ellipse, in the brush's coordinate space. D2D1Point2F gradientOriginOffset The offset of the gradient origin relative to the gradient ellipse's center, in the brush's coordinate space. Single radiusX The x-radius of the gradient ellipse, in the brush's coordinate space. Single radiusY The y-radius of the gradient ellipse, in the brush's coordinate space. Properties | Improve this Doc View Source Center Gets or sets the center of the gradient ellipse, in the brush's coordinate space. Declaration public D2D1Point2F Center { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source GradientOriginOffset Gets or sets the offset of the gradient origin relative to the gradient ellipse's center, in the brush's coordinate space. Declaration public D2D1Point2F GradientOriginOffset { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source RadiusX Gets or sets the x-radius of the gradient ellipse, in the brush's coordinate space. Declaration public float RadiusX { get; set; } Property Value Type Description Single | Improve this Doc View Source RadiusY Gets or sets the y-radius of the gradient ellipse, in the brush's coordinate space. Declaration public float RadiusY { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1RadialGradientBrushProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RadialGradientBrushProperties other) Parameters Type Name Description D2D1RadialGradientBrushProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RadialGradientBrushProperties, D2D1RadialGradientBrushProperties) Compares two D2D1RadialGradientBrushProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RadialGradientBrushProperties left, D2D1RadialGradientBrushProperties right) Parameters Type Name Description D2D1RadialGradientBrushProperties left The left D2D1RadialGradientBrushProperties to compare. D2D1RadialGradientBrushProperties right The right D2D1RadialGradientBrushProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RadialGradientBrushProperties, D2D1RadialGradientBrushProperties) Compares two D2D1RadialGradientBrushProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RadialGradientBrushProperties left, D2D1RadialGradientBrushProperties right) Parameters Type Name Description D2D1RadialGradientBrushProperties left The left D2D1RadialGradientBrushProperties to compare. D2D1RadialGradientBrushProperties right The right D2D1RadialGradientBrushProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RadialGradientBrush.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RadialGradientBrush.html",
    "title": "Class D2D1RadialGradientBrush",
    "keywords": "Class D2D1RadialGradientBrush Paints an area with a radial gradient. Inheritance Object D2D1Resource D2D1Brush D2D1RadialGradientBrush Implements IDisposable ID2D1Releasable Inherited Members D2D1Brush.Opacity D2D1Brush.Transform D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1RadialGradientBrush : D2D1Brush, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Center Gets or sets the center of the gradient ellipse in the brush's coordinate space. Declaration public D2D1Point2F Center { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source GradientOriginOffset Gets or sets the offset of the gradient origin relative to the gradient ellipse's center. Declaration public D2D1Point2F GradientOriginOffset { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source RadiusX Gets or sets the x-radius of the gradient ellipse, in the brush's coordinate space. Declaration public float RadiusX { get; set; } Property Value Type Description Single | Improve this Doc View Source RadiusY Gets or sets the y-radius of the gradient ellipse, in the brush's coordinate space. Declaration public float RadiusY { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source GetGradientStopCollection() Retrieves the D2D1GradientStopCollection associated with this radial gradient brush object. Declaration public D2D1GradientStopCollection GetGradientStopCollection() Returns Type Description D2D1GradientStopCollection The D2D1GradientStopCollection object associated with this linear gradient brush object. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1QuadraticBezierSegment.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1QuadraticBezierSegment.html",
    "title": "Struct D2D1QuadraticBezierSegment",
    "keywords": "Struct D2D1QuadraticBezierSegment Contains the control point and end point for a quadratic Bezier segment. Implements IEquatable < D2D1QuadraticBezierSegment > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1QuadraticBezierSegment : IEquatable<D2D1QuadraticBezierSegment> Constructors | Improve this Doc View Source D2D1QuadraticBezierSegment(D2D1Point2F, D2D1Point2F) Initializes a new instance of the D2D1QuadraticBezierSegment struct. Declaration public D2D1QuadraticBezierSegment(D2D1Point2F point1, D2D1Point2F point2) Parameters Type Name Description D2D1Point2F point1 The control point of the quadratic Bezier segment. D2D1Point2F point2 The end point of the quadratic Bezier segment. Properties | Improve this Doc View Source Point1 Gets or sets the control point of the quadratic Bezier segment. Declaration public D2D1Point2F Point1 { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Point2 Gets or sets the end point of the quadratic Bezier segment. Declaration public D2D1Point2F Point2 { get; set; } Property Value Type Description D2D1Point2F Methods | Improve this Doc View Source Equals(D2D1QuadraticBezierSegment) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1QuadraticBezierSegment other) Parameters Type Name Description D2D1QuadraticBezierSegment other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1QuadraticBezierSegment, D2D1QuadraticBezierSegment) Compares two D2D1QuadraticBezierSegment objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1QuadraticBezierSegment left, D2D1QuadraticBezierSegment right) Parameters Type Name Description D2D1QuadraticBezierSegment left The left D2D1QuadraticBezierSegment to compare. D2D1QuadraticBezierSegment right The right D2D1QuadraticBezierSegment to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1QuadraticBezierSegment, D2D1QuadraticBezierSegment) Compares two D2D1QuadraticBezierSegment objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1QuadraticBezierSegment left, D2D1QuadraticBezierSegment right) Parameters Type Name Description D2D1QuadraticBezierSegment left The left D2D1QuadraticBezierSegment to compare. D2D1QuadraticBezierSegment right The right D2D1QuadraticBezierSegment to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1PresentOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1PresentOptions.html",
    "title": "Enum D2D1PresentOptions",
    "keywords": "Enum D2D1PresentOptions Describes how a render target behaves when it presents its content. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1PresentOptions Fields Name Description Immediately The render target does not wait until the display refreshes to present. None The render target waits until the display refreshes to present and discards the frame upon presenting. RetainContents The render target does not discard the frame upon presenting."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1PathSegmentOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1PathSegmentOptions.html",
    "title": "Enum D2D1PathSegmentOptions",
    "keywords": "Enum D2D1PathSegmentOptions Indicates whether a segment should be stroked and whether the join between this segment and the previous one should be smooth. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1PathSegmentOptions Fields Name Description ForceRoundLineJoin The segment is always joined with the one preceding it using a round line join. ForceUnstroked The segment is not stroked. None The segment is joined as specified by the D2D1StrokeStyle interface, and it is stroked."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1PathGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1PathGeometry.html",
    "title": "Class D2D1PathGeometry",
    "keywords": "Class D2D1PathGeometry Represents a complex shape that may be composed of arcs, curves, and lines. Inheritance Object D2D1Resource D2D1Geometry D2D1PathGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1PathGeometry : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source FigureCount Gets the number of figures in the path geometry. Declaration public uint FigureCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source SegmentCount Gets the number of segments in the path geometry. Declaration public uint SegmentCount { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Open() Retrieves the geometry sink that is used to populate the path geometry with figures and segments. Declaration public D2D1GeometrySink Open() Returns Type Description D2D1GeometrySink The geometry sink that is used to populate the path geometry with figures and segments. | Improve this Doc View Source Stream(D2D1GeometrySink) Copies the contents of the path geometry to the specified D2D1GeometrySink . Declaration public void Stream(D2D1GeometrySink geometrySink) Parameters Type Name Description D2D1GeometrySink geometrySink The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1OpacityMaskContent.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1OpacityMaskContent.html",
    "title": "Enum D2D1OpacityMaskContent",
    "keywords": "Enum D2D1OpacityMaskContent Describes whether an opacity mask contains graphics or text. Direct2D uses this information to determine which gamma space to use when blending the opacity mask. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1OpacityMaskContent Fields Name Description Graphics The opacity mask contains graphics. The opacity mask is blended in the gamma 2.2 color space. TextGdiCompatible The opacity mask contains text rendered using the GDI-compatible rendering mode. The opacity mask is blended using the gamma for GDI rendering. TextNatural The opacity mask contains non-GDI text. The gamma space used for blending is obtained from the render target's text rendering parameters."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Mesh.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Mesh.html",
    "title": "Class D2D1Mesh",
    "keywords": "Class D2D1Mesh Represents a set of vertices that form a list of triangles. Inheritance Object D2D1Resource D2D1Mesh Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1Mesh : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Methods | Improve this Doc View Source Open() Opens the mesh for population. Declaration public D2D1TessellationSink Open() Returns Type Description D2D1TessellationSink An D2D1TessellationSink that is used to populate the mesh. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1LineJoin.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1LineJoin.html",
    "title": "Enum D2D1LineJoin",
    "keywords": "Enum D2D1LineJoin Describes the shape that joins two lines or segments. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1LineJoin Fields Name Description Bevel Beveled vertices. Miter Regular angular vertices. MiterOrBevel Regular angular vertices unless the join would extend beyond the miter limit; otherwise, beveled vertices. Round Rounded vertices."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1LinearGradientBrushProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1LinearGradientBrushProperties.html",
    "title": "Struct D2D1LinearGradientBrushProperties",
    "keywords": "Struct D2D1LinearGradientBrushProperties Contains the starting point and endpoint of the gradient axis for an D2D1LinearGradientBrush . Implements IEquatable < D2D1LinearGradientBrushProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1LinearGradientBrushProperties : IEquatable<D2D1LinearGradientBrushProperties> Constructors | Improve this Doc View Source D2D1LinearGradientBrushProperties(D2D1Point2F, D2D1Point2F) Initializes a new instance of the D2D1LinearGradientBrushProperties struct. Declaration public D2D1LinearGradientBrushProperties(D2D1Point2F startPoint, D2D1Point2F endPoint) Parameters Type Name Description D2D1Point2F startPoint The starting point of the gradient axis, in the brush's coordinate space. D2D1Point2F endPoint The endpoint of the gradient axis, in the brush's coordinate space. Properties | Improve this Doc View Source EndPoint Gets or sets the endpoint of the gradient axis, in the brush's coordinate space. Declaration public D2D1Point2F EndPoint { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source StartPoint Gets or sets the starting point of the gradient axis, in the brush's coordinate space. Declaration public D2D1Point2F StartPoint { get; set; } Property Value Type Description D2D1Point2F Methods | Improve this Doc View Source Equals(D2D1LinearGradientBrushProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1LinearGradientBrushProperties other) Parameters Type Name Description D2D1LinearGradientBrushProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1LinearGradientBrushProperties, D2D1LinearGradientBrushProperties) Compares two D2D1LinearGradientBrushProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1LinearGradientBrushProperties left, D2D1LinearGradientBrushProperties right) Parameters Type Name Description D2D1LinearGradientBrushProperties left The left D2D1LinearGradientBrushProperties to compare. D2D1LinearGradientBrushProperties right The right D2D1LinearGradientBrushProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1LinearGradientBrushProperties, D2D1LinearGradientBrushProperties) Compares two D2D1LinearGradientBrushProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1LinearGradientBrushProperties left, D2D1LinearGradientBrushProperties right) Parameters Type Name Description D2D1LinearGradientBrushProperties left The left D2D1LinearGradientBrushProperties to compare. D2D1LinearGradientBrushProperties right The right D2D1LinearGradientBrushProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1LinearGradientBrush.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1LinearGradientBrush.html",
    "title": "Class D2D1LinearGradientBrush",
    "keywords": "Class D2D1LinearGradientBrush Paints an area with a linear gradient. Inheritance Object D2D1Resource D2D1Brush D2D1LinearGradientBrush Implements IDisposable ID2D1Releasable Inherited Members D2D1Brush.Opacity D2D1Brush.Transform D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1LinearGradientBrush : D2D1Brush, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source EndPoint Gets or sets the ending coordinates of the linear gradient in the brush's coordinate space. Declaration public D2D1Point2F EndPoint { get; set; } Property Value Type Description D2D1Point2F | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source StartPoint Gets or sets the starting coordinates of the linear gradient in the brush's coordinate space. Declaration public D2D1Point2F StartPoint { get; set; } Property Value Type Description D2D1Point2F Methods | Improve this Doc View Source GetGradientStopCollection() Retrieves the D2D1GradientStopCollection associated with this linear gradient brush. Declaration public D2D1GradientStopCollection GetGradientStopCollection() Returns Type Description D2D1GradientStopCollection The D2D1GradientStopCollection object associated with this linear gradient brush object. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1LayerParameters.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1LayerParameters.html",
    "title": "Struct D2D1LayerParameters",
    "keywords": "Struct D2D1LayerParameters Contains the content bounds, mask information, opacity settings, and other options for a layer resource. Implements IEquatable < D2D1LayerParameters > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1LayerParameters : IEquatable<D2D1LayerParameters> Constructors | Improve this Doc View Source D2D1LayerParameters(D2D1RectF, D2D1Geometry, D2D1AntialiasMode, D2D1Matrix3X2F, Single, D2D1Brush, D2D1LayerOptions) Initializes a new instance of the D2D1LayerParameters struct. Declaration public D2D1LayerParameters(D2D1RectF contentBounds, D2D1Geometry geometricMask, D2D1AntialiasMode maskAntialiasMode, D2D1Matrix3X2F maskTransform, float opacity, D2D1Brush opacityBrush, D2D1LayerOptions layerOptions) Parameters Type Name Description D2D1RectF contentBounds The content bounds of the layer. Content outside these bounds is not guaranteed to render. D2D1Geometry geometricMask The geometric mask specifies the area of the layer that is composited into the render target. D2D1AntialiasMode maskAntialiasMode A value that specifies the antialiasing mode for the geometricMask. D2D1Matrix3X2F maskTransform A value that specifies the transform that is applied to the geometric mask when composing the layer. Single opacity An opacity value that is applied uniformly to all resources in the layer when compositing to the target. D2D1Brush opacityBrush A brush that is used to modify the opacity of the layer. The brush is mapped to the layer, and the alpha channel of each mapped brush pixel is multiplied against the corresponding layer pixel. D2D1LayerOptions layerOptions A value that specifies whether the layer intends to render text with ClearType antialiasing. Properties | Improve this Doc View Source ContentBounds Gets or sets the content bounds of the layer. Content outside these bounds is not guaranteed to render. Declaration public D2D1RectF ContentBounds { get; set; } Property Value Type Description D2D1RectF | Improve this Doc View Source Default Gets default parameters. Declaration public static D2D1LayerParameters Default { get; } Property Value Type Description D2D1LayerParameters | Improve this Doc View Source GeometricMask Gets or sets the geometric mask specifies the area of the layer that is composited into the render target. Declaration public D2D1Geometry GeometricMask { get; set; } Property Value Type Description D2D1Geometry | Improve this Doc View Source LayerOptions Gets or sets a value that specifies whether the layer intends to render text with ClearType antialiasing. Declaration public D2D1LayerOptions LayerOptions { get; set; } Property Value Type Description D2D1LayerOptions | Improve this Doc View Source MaskAntialiasMode Gets or sets a value that specifies the antialiasing mode for the geometricMask. Declaration public D2D1AntialiasMode MaskAntialiasMode { get; set; } Property Value Type Description D2D1AntialiasMode | Improve this Doc View Source MaskTransform Gets or sets a value that specifies the transform that is applied to the geometric mask when composing the layer. Declaration public D2D1Matrix3X2F MaskTransform { get; set; } Property Value Type Description D2D1Matrix3X2F | Improve this Doc View Source Opacity Gets or sets an opacity value that is applied uniformly to all resources in the layer when compositing to the target. Declaration public float Opacity { get; set; } Property Value Type Description Single | Improve this Doc View Source OpacityBrush Gets or sets a brush that is used to modify the opacity of the layer. The brush is mapped to the layer, and the alpha channel of each mapped brush pixel is multiplied against the corresponding layer pixel. Declaration public D2D1Brush OpacityBrush { get; set; } Property Value Type Description D2D1Brush Methods | Improve this Doc View Source Equals(D2D1LayerParameters) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1LayerParameters other) Parameters Type Name Description D2D1LayerParameters other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1LayerParameters, D2D1LayerParameters) Compares two D2D1LayerParameters objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1LayerParameters left, D2D1LayerParameters right) Parameters Type Name Description D2D1LayerParameters left The left D2D1LayerParameters to compare. D2D1LayerParameters right The right D2D1LayerParameters to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1LayerParameters, D2D1LayerParameters) Compares two D2D1LayerParameters objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1LayerParameters left, D2D1LayerParameters right) Parameters Type Name Description D2D1LayerParameters left The left D2D1LayerParameters to compare. D2D1LayerParameters right The right D2D1LayerParameters to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Image.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Image.html",
    "title": "Class D2D1Image",
    "keywords": "Class D2D1Image Represents a producer of pixels that can fill an arbitrary 2D plane. Inheritance Object D2D1Resource D2D1Image D2D1Bitmap Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.Handle D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1Image : D2D1Resource, IDisposable, ID2D1Releasable Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1HwndRenderTargetProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1HwndRenderTargetProperties.html",
    "title": "Struct D2D1HwndRenderTargetProperties",
    "keywords": "Struct D2D1HwndRenderTargetProperties Contains the HWND, pixel size, and presentation options for an D2D1HwndRenderTarget . Implements IEquatable < D2D1HwndRenderTargetProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1HwndRenderTargetProperties : IEquatable<D2D1HwndRenderTargetProperties> Constructors | Improve this Doc View Source D2D1HwndRenderTargetProperties(IntPtr) Initializes a new instance of the D2D1HwndRenderTargetProperties struct. Declaration public D2D1HwndRenderTargetProperties(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd The HWND to which the render target issues the output from its drawing commands. | Improve this Doc View Source D2D1HwndRenderTargetProperties(IntPtr, D2D1SizeU, D2D1PresentOptions) Initializes a new instance of the D2D1HwndRenderTargetProperties struct. Declaration public D2D1HwndRenderTargetProperties(IntPtr hwnd, D2D1SizeU pixelSize, D2D1PresentOptions presentOptions) Parameters Type Name Description IntPtr hwnd The HWND to which the render target issues the output from its drawing commands. D2D1SizeU pixelSize The size of the render target, in pixels. D2D1PresentOptions presentOptions A value that specifies whether the render target retains the frame after it is presented and whether the render target waits for the device to refresh before presenting. Properties | Improve this Doc View Source Hwnd Gets or sets the HWND to which the render target issues the output from its drawing commands. Declaration public IntPtr Hwnd { get; set; } Property Value Type Description IntPtr | Improve this Doc View Source PixelSize Gets or sets the size of the render target, in pixels. Declaration public D2D1SizeU PixelSize { get; set; } Property Value Type Description D2D1SizeU | Improve this Doc View Source PresentOptions Gets or sets a value that specifies whether the render target retains the frame after it is presented and whether the render target waits for the device to refresh before presenting. Declaration public D2D1PresentOptions PresentOptions { get; set; } Property Value Type Description D2D1PresentOptions Methods | Improve this Doc View Source Equals(D2D1HwndRenderTargetProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1HwndRenderTargetProperties other) Parameters Type Name Description D2D1HwndRenderTargetProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1HwndRenderTargetProperties, D2D1HwndRenderTargetProperties) Compares two D2D1HwndRenderTargetProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1HwndRenderTargetProperties left, D2D1HwndRenderTargetProperties right) Parameters Type Name Description D2D1HwndRenderTargetProperties left The left D2D1HwndRenderTargetProperties to compare. D2D1HwndRenderTargetProperties right The right D2D1HwndRenderTargetProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1HwndRenderTargetProperties, D2D1HwndRenderTargetProperties) Compares two D2D1HwndRenderTargetProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1HwndRenderTargetProperties left, D2D1HwndRenderTargetProperties right) Parameters Type Name Description D2D1HwndRenderTargetProperties left The left D2D1HwndRenderTargetProperties to compare. D2D1HwndRenderTargetProperties right The right D2D1HwndRenderTargetProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1HwndRenderTarget.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1HwndRenderTarget.html",
    "title": "Class D2D1HwndRenderTarget",
    "keywords": "Class D2D1HwndRenderTarget Renders drawing instructions to a window. Inheritance Object D2D1Resource D2D1RenderTarget D2D1HwndRenderTarget Implements IDisposable ID2D1Releasable Inherited Members D2D1RenderTarget.Transform D2D1RenderTarget.AntialiasMode D2D1RenderTarget.TextAntialiasMode D2D1RenderTarget.PixelFormat D2D1RenderTarget.Size D2D1RenderTarget.PixelSize D2D1RenderTarget.MaximumBitmapSize D2D1RenderTarget.CreateBitmap(D2D1SizeU, IntPtr, UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, Byte[], UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object, D2D1BitmapProperties) D2D1RenderTarget.CreateSharedBitmap(Guid, Object) D2D1RenderTarget.CreateSharedBitmap(Guid, Object, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties, D2D1BrushProperties) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF, D2D1BrushProperties) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[], D2D1Gamma, D2D1ExtendMode) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[]) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget() D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat) D2D1RenderTarget.CreateLayer() D2D1RenderTarget.CreateLayer(D2D1SizeF) D2D1RenderTarget.CreateMesh() D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush, D2D1Brush) D2D1RenderTarget.FillMesh(D2D1Mesh, D2D1Brush) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode, D2D1RectF) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions, DWriteMeasuringMode) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush, DWriteMeasuringMode) D2D1RenderTarget.SetTextRenderingParams() D2D1RenderTarget.SetTextRenderingParams(DWriteRenderingParams) D2D1RenderTarget.GetTextRenderingParams() D2D1RenderTarget.SetTags(UInt64, UInt64) D2D1RenderTarget.GetTags(UInt64, UInt64) D2D1RenderTarget.PushLayer(D2D1LayerParameters, D2D1Layer) D2D1RenderTarget.PopLayer() D2D1RenderTarget.Flush() D2D1RenderTarget.Flush(UInt64, UInt64) D2D1RenderTarget.SaveDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.RestoreDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.PushAxisAlignedClip(D2D1RectF, D2D1AntialiasMode) D2D1RenderTarget.PopAxisAlignedClip() D2D1RenderTarget.Clear() D2D1RenderTarget.Clear(D2D1ColorF) D2D1RenderTarget.BeginDraw() D2D1RenderTarget.EndDraw() D2D1RenderTarget.EndDraw(UInt64, UInt64) D2D1RenderTarget.EndDrawIgnoringRecreateTargetError() D2D1RenderTarget.SetDpi(Single, Single) D2D1RenderTarget.GetDpi(Single, Single) D2D1RenderTarget.IsSupported(D2D1RenderTargetProperties) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1HwndRenderTarget : D2D1RenderTarget, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source Hwnd Gets the HWND associated with this render target. Declaration public IntPtr Hwnd { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source CheckWindowState() Indicates whether the HWND associated with this render target is occluded. Declaration public D2D1WindowStates CheckWindowState() Returns Type Description D2D1WindowStates A value that indicates whether the HWND associated with this render target is occluded. | Improve this Doc View Source Resize(D2D1SizeU) Changes the size of the render target to the specified pixel size. Declaration public void Resize(D2D1SizeU pixelSize) Parameters Type Name Description D2D1SizeU pixelSize The new size of the render target in device pixels. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1GradientStopCollection.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1GradientStopCollection.html",
    "title": "Class D2D1GradientStopCollection",
    "keywords": "Class D2D1GradientStopCollection Represents an collection of D2D1GradientStop objects for linear and radial gradient brushes. Inheritance Object D2D1Resource D2D1GradientStopCollection Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1GradientStopCollection : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source ColorInterpolationGamma Gets the gamma space in which the gradient stops are interpolated. Declaration public D2D1Gamma ColorInterpolationGamma { get; } Property Value Type Description D2D1Gamma | Improve this Doc View Source ExtendMode Gets the behavior of the gradient outside the normalized gradient range. Declaration public D2D1ExtendMode ExtendMode { get; } Property Value Type Description D2D1ExtendMode | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Methods | Improve this Doc View Source GetGradientStopCount() Retrieves the number of gradient stops in the collection. Declaration public uint GetGradientStopCount() Returns Type Description UInt32 The number of gradient stops in the collection. | Improve this Doc View Source GetGradientStops() Copies the gradient stops from the collection into an array of D2D1GradientStop structures. Declaration public D2D1GradientStop[] GetGradientStops() Returns Type Description D2D1GradientStop [] The collection's gradient stops. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1FactoryOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1FactoryOptions.html",
    "title": "Struct D2D1FactoryOptions",
    "keywords": "Struct D2D1FactoryOptions Contains the debugging level of an D2D1Factory object. Implements IEquatable < D2D1FactoryOptions > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1FactoryOptions : IEquatable<D2D1FactoryOptions> Constructors | Improve this Doc View Source D2D1FactoryOptions(D2D1DebugLevel) Initializes a new instance of the D2D1FactoryOptions struct. Declaration public D2D1FactoryOptions(D2D1DebugLevel debugLevel) Parameters Type Name Description D2D1DebugLevel debugLevel The level of debugging information. Properties | Improve this Doc View Source DebugLevel Gets or sets a certain level of debugging information from the debug layer. This parameter is ignored if the debug layer DLL is not present. Declaration public D2D1DebugLevel DebugLevel { get; set; } Property Value Type Description D2D1DebugLevel Methods | Improve this Doc View Source Equals(D2D1FactoryOptions) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1FactoryOptions other) Parameters Type Name Description D2D1FactoryOptions other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1FactoryOptions, D2D1FactoryOptions) Compares two D2D1FactoryOptions objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1FactoryOptions left, D2D1FactoryOptions right) Parameters Type Name Description D2D1FactoryOptions left The left D2D1FactoryOptions to compare. D2D1FactoryOptions right The right D2D1FactoryOptions to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1FactoryOptions, D2D1FactoryOptions) Compares two D2D1FactoryOptions objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1FactoryOptions left, D2D1FactoryOptions right) Parameters Type Name Description D2D1FactoryOptions left The left D2D1FactoryOptions to compare. D2D1FactoryOptions right The right D2D1FactoryOptions to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Factory.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Factory.html",
    "title": "Class D2D1Factory",
    "keywords": "Class D2D1Factory Creates Direct2D resources. Inheritance Object D2D1Factory Implements IDisposable ID2D1Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1Factory : IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source Create(D2D1FactoryType) Creates a factory object that can be used to create Direct2D resources. Declaration public static D2D1Factory Create(D2D1FactoryType factoryType) Parameters Type Name Description D2D1FactoryType factoryType The threading model of the factory and the resources it creates. Returns Type Description D2D1Factory The new factory. | Improve this Doc View Source Create(D2D1FactoryType, D2D1DebugLevel) Creates a factory object that can be used to create Direct2D resources. Declaration public static D2D1Factory Create(D2D1FactoryType factoryType, D2D1DebugLevel debugLevel) Parameters Type Name Description D2D1FactoryType factoryType The threading model of the factory and the resources it creates. D2D1DebugLevel debugLevel The level of detail provided to the debugging layer. Returns Type Description D2D1Factory The new factory. | Improve this Doc View Source Create(D2D1FactoryType, D2D1FactoryOptions) Creates a factory object that can be used to create Direct2D resources. Declaration public static D2D1Factory Create(D2D1FactoryType factoryType, D2D1FactoryOptions factoryOptions) Parameters Type Name Description D2D1FactoryType factoryType The threading model of the factory and the resources it creates. D2D1FactoryOptions factoryOptions The level of detail provided to the debugging layer. Returns Type Description D2D1Factory The new factory. | Improve this Doc View Source CreateDCRenderTarget(D2D1RenderTargetProperties) Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context. Declaration public D2D1DCRenderTarget CreateDCRenderTarget(D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1DCRenderTarget The D2D1DCRenderTarget created by the method. | Improve this Doc View Source CreateDrawingStateBlock() Creates an D2D1DrawingStateBlock that can be used with the SaveDrawingState(D2D1DrawingStateBlock) and RestoreDrawingState(D2D1DrawingStateBlock) methods of a render target. Declaration public D2D1DrawingStateBlock CreateDrawingStateBlock() Returns Type Description D2D1DrawingStateBlock The new drawing state block created by this method. | Improve this Doc View Source CreateDrawingStateBlock(D2D1DrawingStateDescription) Creates an D2D1DrawingStateBlock that can be used with the SaveDrawingState(D2D1DrawingStateBlock) and RestoreDrawingState(D2D1DrawingStateBlock) methods of a render target. Declaration public D2D1DrawingStateBlock CreateDrawingStateBlock(D2D1DrawingStateDescription drawingStateDescription) Parameters Type Name Description D2D1DrawingStateDescription drawingStateDescription A structure that contains antialiasing, transform, and tags information. Returns Type Description D2D1DrawingStateBlock The new drawing state block created by this method. | Improve this Doc View Source CreateDrawingStateBlock(D2D1DrawingStateDescription, DWriteRenderingParams) Creates an D2D1DrawingStateBlock that can be used with the SaveDrawingState(D2D1DrawingStateBlock) and RestoreDrawingState(D2D1DrawingStateBlock) methods of a render target. Declaration public D2D1DrawingStateBlock CreateDrawingStateBlock(D2D1DrawingStateDescription drawingStateDescription, DWriteRenderingParams textRenderingParams) Parameters Type Name Description D2D1DrawingStateDescription drawingStateDescription A structure that contains antialiasing, transform, and tags information. DWriteRenderingParams textRenderingParams Optional text parameters that indicate how text should be rendered. Returns Type Description D2D1DrawingStateBlock The new drawing state block created by this method. | Improve this Doc View Source CreateDrawingStateBlock(DWriteRenderingParams) Creates an D2D1DrawingStateBlock that can be used with the SaveDrawingState(D2D1DrawingStateBlock) and RestoreDrawingState(D2D1DrawingStateBlock) methods of a render target. Declaration public D2D1DrawingStateBlock CreateDrawingStateBlock(DWriteRenderingParams textRenderingParams) Parameters Type Name Description DWriteRenderingParams textRenderingParams Optional text parameters that indicate how text should be rendered. Returns Type Description D2D1DrawingStateBlock The new drawing state block created by this method. | Improve this Doc View Source CreateDxgiSurfaceRenderTarget(DxgiSurface, D2D1RenderTargetProperties) Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. Declaration public D2D1RenderTarget CreateDxgiSurfaceRenderTarget(DxgiSurface dxgiSurface, D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description DxgiSurface dxgiSurface The DxgiSurface to which the render target will draw. D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1RenderTarget The D2D1RenderTarget object created by this method. | Improve this Doc View Source CreateDxgiSurfaceRenderTarget(DxgiSurface1, D2D1RenderTargetProperties) Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. Declaration public D2D1RenderTarget CreateDxgiSurfaceRenderTarget(DxgiSurface1 dxgiSurface, D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description DxgiSurface1 dxgiSurface The DxgiSurface1 to which the render target will draw. D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1RenderTarget The D2D1RenderTarget object created by this method. | Improve this Doc View Source CreateDxgiSurfaceRenderTarget(DxgiSurface2, D2D1RenderTargetProperties) Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. Declaration public D2D1RenderTarget CreateDxgiSurfaceRenderTarget(DxgiSurface2 dxgiSurface, D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description DxgiSurface2 dxgiSurface The DxgiSurface2 to which the render target will draw. D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1RenderTarget The D2D1RenderTarget object created by this method. | Improve this Doc View Source CreateDxgiSurfaceRenderTarget(DxgiSurface3, D2D1RenderTargetProperties) Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface. Declaration public D2D1RenderTarget CreateDxgiSurfaceRenderTarget(DxgiSurface3 dxgiSurface, D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description DxgiSurface3 dxgiSurface The DxgiSurface3 to which the render target will draw. D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1RenderTarget The D2D1RenderTarget object created by this method. | Improve this Doc View Source CreateEllipseGeometry(D2D1Ellipse) Creates an D2D1EllipseGeometry . Declaration public D2D1EllipseGeometry CreateEllipseGeometry(D2D1Ellipse ellipse) Parameters Type Name Description D2D1Ellipse ellipse A value that describes the center point, x-radius, and y-radius of the ellipse geometry. Returns Type Description D2D1EllipseGeometry The ellipse geometry created by this method. | Improve this Doc View Source CreateGeometryGroup(D2D1FillMode, D2D1Geometry[]) Creates an D2D1GeometryGroup , which is an object that holds other geometries. Declaration public D2D1GeometryGroup CreateGeometryGroup(D2D1FillMode fillMode, D2D1Geometry[] geometries) Parameters Type Name Description D2D1FillMode fillMode A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry. D2D1Geometry [] geometries An array containing the geometry objects to add to the geometry group. Returns Type Description D2D1GeometryGroup The geometry group created by this method. | Improve this Doc View Source CreateHwndRenderTarget(D2D1RenderTargetProperties, D2D1HwndRenderTargetProperties) Creates an D2D1HwndRenderTarget , a render target that renders to a window. Declaration public D2D1HwndRenderTarget CreateHwndRenderTarget(D2D1RenderTargetProperties renderTargetProperties, D2D1HwndRenderTargetProperties hwndRenderTargetProperties) Parameters Type Name Description D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. D2D1HwndRenderTargetProperties hwndRenderTargetProperties The window handle, initial size (in pixels), and present options. Returns Type Description D2D1HwndRenderTarget The D2D1HwndRenderTarget object created by this method. | Improve this Doc View Source CreatePathGeometry() Creates an empty D2D1PathGeometry . Declaration public D2D1PathGeometry CreatePathGeometry() Returns Type Description D2D1PathGeometry The path geometry created by this method. | Improve this Doc View Source CreateRectangleGeometry(D2D1RectF) Creates an D2D1RectangleGeometry . Declaration public D2D1RectangleGeometry CreateRectangleGeometry(D2D1RectF rectangle) Parameters Type Name Description D2D1RectF rectangle The coordinates of the rectangle geometry. Returns Type Description D2D1RectangleGeometry The rectangle geometry created by this method. | Improve this Doc View Source CreateRoundedRectangleGeometry(D2D1RoundedRect) Creates an D2D1RoundedRectangleGeometry . Declaration public D2D1RoundedRectangleGeometry CreateRoundedRectangleGeometry(D2D1RoundedRect roundedRectangle) Parameters Type Name Description D2D1RoundedRect roundedRectangle The coordinates and corner radii of the rounded rectangle geometry. Returns Type Description D2D1RoundedRectangleGeometry The rounded rectangle geometry created by this method. | Improve this Doc View Source CreateStrokeStyle(D2D1StrokeStyleProperties, Single[]) Creates an D2D1StrokeStyle that describes start cap, dash pattern, and other features of a stroke. Declaration public D2D1StrokeStyle CreateStrokeStyle(D2D1StrokeStyleProperties strokeStyleProperties, float[] dashes) Parameters Type Name Description D2D1StrokeStyleProperties strokeStyleProperties A structure that describes the stroke's line cap, dash offset, and other details of a stroke. Single [] dashes An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width. Returns Type Description D2D1StrokeStyle The stroke style created by this method. | Improve this Doc View Source CreateTransformedGeometry(D2D1Geometry, D2D1Matrix3X2F) Transforms the specified geometry and stores the result as an D2D1TransformedGeometry object. Declaration public D2D1TransformedGeometry CreateTransformedGeometry(D2D1Geometry sourceGeometry, D2D1Matrix3X2F transform) Parameters Type Name Description D2D1Geometry sourceGeometry The geometry to transform. D2D1Matrix3X2F transform The transformation to apply. Returns Type Description D2D1TransformedGeometry The new transformed geometry object. | Improve this Doc View Source CreateWicBitmapRenderTarget(Object, D2D1RenderTargetProperties) Creates a render target that renders to a Microsoft Windows Imaging Component (WIC) bitmap. Declaration public D2D1RenderTarget CreateWicBitmapRenderTarget(object target, D2D1RenderTargetProperties renderTargetProperties) Parameters Type Name Description Object target The bitmap that receives the rendering output of the render target. D2D1RenderTargetProperties renderTargetProperties The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. Returns Type Description D2D1RenderTarget The D2D1RenderTarget object created by this method. | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D2D1Factory object. Declaration public void Dispose() | Improve this Doc View Source GetDesktopDpi(out Single, out Single) Retrieves the current desktop dots per inch (DPI). To refresh this value, call ReloadSystemMetrics() . Declaration public void GetDesktopDpi(out float dpiX, out float dpiY) Parameters Type Name Description Single dpiX The horizontal DPI of the desktop. Single dpiY The vertical DPI of the desktop. | Improve this Doc View Source Release() Releases the managed reference to the COM D2D1 interface. Declaration public void Release() | Improve this Doc View Source ReloadSystemMetrics() Forces the factory to refresh any system defaults that it might have changed since factory creation. Declaration public void ReloadSystemMetrics() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D2D1Factory to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D2D1Factory value) Parameters Type Name Description D2D1Factory value A D2D1 object. Returns Type Description Boolean A boolean Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DrawTextOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DrawTextOptions.html",
    "title": "Enum D2D1DrawTextOptions",
    "keywords": "Enum D2D1DrawTextOptions Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1DrawTextOptions Fields Name Description Clip Text is clipped to the layout rectangle. EnableColorFont In Windows 8.1 and later, text is rendered using color versions of glyphs, if defined by the font. None Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle. NoSnap Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DrawingStateDescription.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DrawingStateDescription.html",
    "title": "Struct D2D1DrawingStateDescription",
    "keywords": "Struct D2D1DrawingStateDescription Describes the drawing state of a render target. Implements IEquatable < D2D1DrawingStateDescription > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1DrawingStateDescription : IEquatable<D2D1DrawingStateDescription> Constructors | Improve this Doc View Source D2D1DrawingStateDescription(D2D1AntialiasMode, D2D1TextAntialiasMode) Initializes a new instance of the D2D1DrawingStateDescription struct. Declaration public D2D1DrawingStateDescription(D2D1AntialiasMode antialiasMode, D2D1TextAntialiasMode textAntialiasMode) Parameters Type Name Description D2D1AntialiasMode antialiasMode The antialiasing mode for subsequent nontext drawing operations. D2D1TextAntialiasMode textAntialiasMode The antialiasing mode for subsequent text and glyph drawing operations. | Improve this Doc View Source D2D1DrawingStateDescription(D2D1AntialiasMode, D2D1TextAntialiasMode, UInt64, UInt64, D2D1Matrix3X2F) Initializes a new instance of the D2D1DrawingStateDescription struct. Declaration public D2D1DrawingStateDescription(D2D1AntialiasMode antialiasMode, D2D1TextAntialiasMode textAntialiasMode, ulong tag1, ulong tag2, D2D1Matrix3X2F transform) Parameters Type Name Description D2D1AntialiasMode antialiasMode The antialiasing mode for subsequent nontext drawing operations. D2D1TextAntialiasMode textAntialiasMode The antialiasing mode for subsequent text and glyph drawing operations. UInt64 tag1 The first label for subsequent drawing operations. UInt64 tag2 The second label for subsequent drawing operations. D2D1Matrix3X2F transform The transformation to apply to subsequent drawing operations. Properties | Improve this Doc View Source AntialiasMode Gets or sets the antialiasing mode for subsequent nontext drawing operations. Declaration public D2D1AntialiasMode AntialiasMode { get; set; } Property Value Type Description D2D1AntialiasMode | Improve this Doc View Source Default Gets default description. Declaration public static D2D1DrawingStateDescription Default { get; } Property Value Type Description D2D1DrawingStateDescription | Improve this Doc View Source Tag1 Gets or sets a label for subsequent drawing operations. Declaration public ulong Tag1 { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source Tag2 Gets or sets a label for subsequent drawing operations. Declaration public ulong Tag2 { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source TextAntialiasMode Gets or sets the antialiasing mode for subsequent text and glyph drawing operations. Declaration public D2D1TextAntialiasMode TextAntialiasMode { get; set; } Property Value Type Description D2D1TextAntialiasMode | Improve this Doc View Source Transform Gets or sets the transformation to apply to subsequent drawing operations. Declaration public D2D1Matrix3X2F Transform { get; set; } Property Value Type Description D2D1Matrix3X2F Methods | Improve this Doc View Source Equals(D2D1DrawingStateDescription) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1DrawingStateDescription other) Parameters Type Name Description D2D1DrawingStateDescription other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1DrawingStateDescription, D2D1DrawingStateDescription) Compares two D2D1DrawingStateDescription objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1DrawingStateDescription left, D2D1DrawingStateDescription right) Parameters Type Name Description D2D1DrawingStateDescription left The left D2D1DrawingStateDescription to compare. D2D1DrawingStateDescription right The right D2D1DrawingStateDescription to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1DrawingStateDescription, D2D1DrawingStateDescription) Compares two D2D1DrawingStateDescription objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1DrawingStateDescription left, D2D1DrawingStateDescription right) Parameters Type Name Description D2D1DrawingStateDescription left The left D2D1DrawingStateDescription to compare. D2D1DrawingStateDescription right The right D2D1DrawingStateDescription to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DCRenderTarget.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DCRenderTarget.html",
    "title": "Class D2D1DCRenderTarget",
    "keywords": "Class D2D1DCRenderTarget Issues drawing commands to a GDI device context. Inheritance Object D2D1Resource D2D1RenderTarget D2D1DCRenderTarget Implements IDisposable ID2D1Releasable Inherited Members D2D1RenderTarget.Transform D2D1RenderTarget.AntialiasMode D2D1RenderTarget.TextAntialiasMode D2D1RenderTarget.PixelFormat D2D1RenderTarget.Size D2D1RenderTarget.PixelSize D2D1RenderTarget.MaximumBitmapSize D2D1RenderTarget.CreateBitmap(D2D1SizeU, IntPtr, UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, Byte[], UInt32, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmap(D2D1SizeU, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object) D2D1RenderTarget.CreateBitmapFromWicBitmap(Object, D2D1BitmapProperties) D2D1RenderTarget.CreateSharedBitmap(Guid, Object) D2D1RenderTarget.CreateSharedBitmap(Guid, Object, D2D1BitmapProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties) D2D1RenderTarget.CreateBitmapBrush(D2D1Bitmap, D2D1BitmapBrushProperties, D2D1BrushProperties) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF) D2D1RenderTarget.CreateSolidColorBrush(D2D1ColorF, D2D1BrushProperties) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[], D2D1Gamma, D2D1ExtendMode) D2D1RenderTarget.CreateGradientStopCollection(D2D1GradientStop[]) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateLinearGradientBrush(D2D1LinearGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateRadialGradientBrush(D2D1RadialGradientBrushProperties, D2D1BrushProperties, D2D1GradientStopCollection) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat, D2D1CompatibleRenderTargetOptions) D2D1RenderTarget.CreateCompatibleRenderTarget() D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU) D2D1RenderTarget.CreateCompatibleRenderTarget(D2D1SizeF, D2D1SizeU, D2D1PixelFormat) D2D1RenderTarget.CreateLayer() D2D1RenderTarget.CreateLayer(D2D1SizeF) D2D1RenderTarget.CreateMesh() D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single) D2D1RenderTarget.DrawLine(D2D1Point2F, D2D1Point2F, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single) D2D1RenderTarget.DrawRectangle(D2D1RectF, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRectangle(D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single) D2D1RenderTarget.DrawRoundedRectangle(D2D1RoundedRect, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillRoundedRectangle(D2D1RoundedRect, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single) D2D1RenderTarget.DrawEllipse(D2D1Ellipse, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillEllipse(D2D1Ellipse, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single) D2D1RenderTarget.DrawGeometry(D2D1Geometry, D2D1Brush, Single, D2D1StrokeStyle) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush) D2D1RenderTarget.FillGeometry(D2D1Geometry, D2D1Brush, D2D1Brush) D2D1RenderTarget.FillMesh(D2D1Mesh, D2D1Brush) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF) D2D1RenderTarget.FillOpacityMask(D2D1Bitmap, D2D1Brush, D2D1OpacityMaskContent, D2D1RectF, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode) D2D1RenderTarget.DrawBitmap(D2D1Bitmap, D2D1RectF, Single, D2D1BitmapInterpolationMode, D2D1RectF) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawText(String, DWriteTextFormat, D2D1RectF, D2D1Brush, D2D1DrawTextOptions, DWriteMeasuringMode) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush) D2D1RenderTarget.DrawTextLayout(D2D1Point2F, DWriteTextLayout, D2D1Brush, D2D1DrawTextOptions) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush) D2D1RenderTarget.DrawGlyphRun(D2D1Point2F, DWriteGlyphRun, D2D1Brush, DWriteMeasuringMode) D2D1RenderTarget.SetTextRenderingParams() D2D1RenderTarget.SetTextRenderingParams(DWriteRenderingParams) D2D1RenderTarget.GetTextRenderingParams() D2D1RenderTarget.SetTags(UInt64, UInt64) D2D1RenderTarget.GetTags(UInt64, UInt64) D2D1RenderTarget.PushLayer(D2D1LayerParameters, D2D1Layer) D2D1RenderTarget.PopLayer() D2D1RenderTarget.Flush() D2D1RenderTarget.Flush(UInt64, UInt64) D2D1RenderTarget.SaveDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.RestoreDrawingState(D2D1DrawingStateBlock) D2D1RenderTarget.PushAxisAlignedClip(D2D1RectF, D2D1AntialiasMode) D2D1RenderTarget.PopAxisAlignedClip() D2D1RenderTarget.Clear() D2D1RenderTarget.Clear(D2D1ColorF) D2D1RenderTarget.BeginDraw() D2D1RenderTarget.EndDraw() D2D1RenderTarget.EndDraw(UInt64, UInt64) D2D1RenderTarget.EndDrawIgnoringRecreateTargetError() D2D1RenderTarget.SetDpi(Single, Single) D2D1RenderTarget.GetDpi(Single, Single) D2D1RenderTarget.IsSupported(D2D1RenderTargetProperties) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1DCRenderTarget : D2D1RenderTarget, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Methods | Improve this Doc View Source BindDC(IntPtr, D2D1RectL) Binds the render target to the device context to which it issues drawing commands. Declaration public void BindDC(IntPtr hdc, D2D1RectL subRect) Parameters Type Name Description IntPtr hdc The device context to which the render target issues drawing commands. D2D1RectL subRect The dimensions of the handle to a device context (HDC) to which the render target is bound. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1DCInitializeMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1DCInitializeMode.html",
    "title": "Enum D2D1DCInitializeMode",
    "keywords": "Enum D2D1DCInitializeMode Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1DCInitializeMode Fields Name Description Clear The device context is cleared to transparent black when it is initialized. Copy The current contents of the render target are copied to the device context when it is initialized."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1CompatibleRenderTargetOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1CompatibleRenderTargetOptions.html",
    "title": "Enum D2D1CompatibleRenderTargetOptions",
    "keywords": "Enum D2D1CompatibleRenderTargetOptions Specifies additional features supportable by a compatible render target when it is created. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1CompatibleRenderTargetOptions Fields Name Description GdiCompatible The render target supports interoperability with the Windows Graphics Device Interface (GDI). None The render target supports no additional features."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1CombineMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1CombineMode.html",
    "title": "Enum D2D1CombineMode",
    "keywords": "Enum D2D1CombineMode This enumeration describes the type of combine operation to be performed. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1CombineMode Fields Name Description Exclude Produce a geometry representing the set of points contained in the first geometry but not the second geometry. Intersect Produce a geometry representing the set of points common to the first and the second geometries. Union Produce a geometry representing the set of points contained in either the first or the second geometry. Xor Produce a geometry representing the set of points contained in the first geometry or the second geometry, but not both."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1CapStyle.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1CapStyle.html",
    "title": "Enum D2D1CapStyle",
    "keywords": "Enum D2D1CapStyle Describes the shape at the end of a line or segment. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1CapStyle Fields Name Description Flat Flat line cap. Round Round line cap. Square Square line cap. Triangle Triangle line cap."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Brush.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Brush.html",
    "title": "Class D2D1Brush",
    "keywords": "Class D2D1Brush The root brush interface. All brushes can be used to fill or pen a geometry. Inheritance Object D2D1Resource D2D1Brush D2D1BitmapBrush D2D1LinearGradientBrush D2D1RadialGradientBrush D2D1SolidColorBrush Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.Handle D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public abstract class D2D1Brush : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Opacity Gets or sets the degree of opacity of this brush. Declaration public float Opacity { get; set; } Property Value Type Description Single | Improve this Doc View Source Transform Gets or sets the transform applied to this brush. Declaration public D2D1Matrix3X2F Transform { get; set; } Property Value Type Description D2D1Matrix3X2F Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapProperties.html",
    "title": "Struct D2D1BitmapProperties",
    "keywords": "Struct D2D1BitmapProperties Describes the pixel format and dpi of a bitmap. Implements IEquatable < D2D1BitmapProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1BitmapProperties : IEquatable<D2D1BitmapProperties> Constructors | Improve this Doc View Source D2D1BitmapProperties(D2D1PixelFormat, Single, Single) Initializes a new instance of the D2D1BitmapProperties struct. Declaration public D2D1BitmapProperties(D2D1PixelFormat pixelFormat, float dpiX, float dpiY) Parameters Type Name Description D2D1PixelFormat pixelFormat The bitmap's pixel format and alpha mode. Single dpiX The horizontal dpi of the bitmap. Single dpiY The vertical dpi of the bitmap. Properties | Improve this Doc View Source Default Gets default properties (Default, 96, 96). Declaration public static D2D1BitmapProperties Default { get; } Property Value Type Description D2D1BitmapProperties | Improve this Doc View Source DpiX Gets or sets the horizontal dpi of the bitmap. Declaration public float DpiX { get; set; } Property Value Type Description Single | Improve this Doc View Source DpiY Gets or sets the vertical dpi of the bitmap. Declaration public float DpiY { get; set; } Property Value Type Description Single | Improve this Doc View Source PixelFormat Gets or sets the bitmap's pixel format and alpha mode. Declaration public D2D1PixelFormat PixelFormat { get; set; } Property Value Type Description D2D1PixelFormat Methods | Improve this Doc View Source Equals(D2D1BitmapProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1BitmapProperties other) Parameters Type Name Description D2D1BitmapProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1BitmapProperties, D2D1BitmapProperties) Compares two D2D1BitmapProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1BitmapProperties left, D2D1BitmapProperties right) Parameters Type Name Description D2D1BitmapProperties left The left D2D1BitmapProperties to compare. D2D1BitmapProperties right The right D2D1BitmapProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1BitmapProperties, D2D1BitmapProperties) Compares two D2D1BitmapProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1BitmapProperties left, D2D1BitmapProperties right) Parameters Type Name Description D2D1BitmapProperties left The left D2D1BitmapProperties to compare. D2D1BitmapProperties right The right D2D1BitmapProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapBrushProperties.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1BitmapBrushProperties.html",
    "title": "Struct D2D1BitmapBrushProperties",
    "keywords": "Struct D2D1BitmapBrushProperties Describes the extend modes and the interpolation mode of an D2D1BitmapBrush . Implements IEquatable < D2D1BitmapBrushProperties > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1BitmapBrushProperties : IEquatable<D2D1BitmapBrushProperties> Constructors | Improve this Doc View Source D2D1BitmapBrushProperties(D2D1ExtendMode, D2D1ExtendMode, D2D1BitmapInterpolationMode) Initializes a new instance of the D2D1BitmapBrushProperties struct. Declaration public D2D1BitmapBrushProperties(D2D1ExtendMode extendModeX, D2D1ExtendMode extendModeY, D2D1BitmapInterpolationMode interpolationMode) Parameters Type Name Description D2D1ExtendMode extendModeX A value that describes how the brush horizontally tiles those areas that extend past its bitmap. D2D1ExtendMode extendModeY A value that describes how the brush vertically tiles those areas that extend past its bitmap. D2D1BitmapInterpolationMode interpolationMode A value that specifies how the bitmap is interpolated when it is scaled or rotated. Properties | Improve this Doc View Source Default Gets default properties (Clamp, Clamp, Linear). Declaration public static D2D1BitmapBrushProperties Default { get; } Property Value Type Description D2D1BitmapBrushProperties | Improve this Doc View Source ExtendModeX Gets or sets a value that describes how the brush horizontally tiles those areas that extend past its bitmap. Declaration public D2D1ExtendMode ExtendModeX { get; set; } Property Value Type Description D2D1ExtendMode | Improve this Doc View Source ExtendModeY Gets or sets a value that describes how the brush vertically tiles those areas that extend past its bitmap. Declaration public D2D1ExtendMode ExtendModeY { get; set; } Property Value Type Description D2D1ExtendMode | Improve this Doc View Source InterpolationMode Gets or sets a value that specifies how the bitmap is interpolated when it is scaled or rotated. Declaration public D2D1BitmapInterpolationMode InterpolationMode { get; set; } Property Value Type Description D2D1BitmapInterpolationMode Methods | Improve this Doc View Source Equals(D2D1BitmapBrushProperties) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1BitmapBrushProperties other) Parameters Type Name Description D2D1BitmapBrushProperties other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1BitmapBrushProperties, D2D1BitmapBrushProperties) Compares two D2D1BitmapBrushProperties objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1BitmapBrushProperties left, D2D1BitmapBrushProperties right) Parameters Type Name Description D2D1BitmapBrushProperties left The left D2D1BitmapBrushProperties to compare. D2D1BitmapBrushProperties right The right D2D1BitmapBrushProperties to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1BitmapBrushProperties, D2D1BitmapBrushProperties) Compares two D2D1BitmapBrushProperties objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1BitmapBrushProperties left, D2D1BitmapBrushProperties right) Parameters Type Name Description D2D1BitmapBrushProperties left The left D2D1BitmapBrushProperties to compare. D2D1BitmapBrushProperties right The right D2D1BitmapBrushProperties to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Bitmap.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Bitmap.html",
    "title": "Class D2D1Bitmap",
    "keywords": "Class D2D1Bitmap Root bitmap resource, linearly scaled on a draw call. Inheritance Object D2D1Resource D2D1Image D2D1Bitmap Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1Bitmap : D2D1Image, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source PixelFormat Gets the format of the bitmap. Declaration public D2D1PixelFormat PixelFormat { get; } Property Value Type Description D2D1PixelFormat | Improve this Doc View Source PixelSize Gets the size of the bitmap in resolution dependent units, (pixels). Declaration public D2D1SizeU PixelSize { get; } Property Value Type Description D2D1SizeU | Improve this Doc View Source Size Gets the size of the bitmap in resolution independent units. Declaration public D2D1SizeF Size { get; } Property Value Type Description D2D1SizeF Methods | Improve this Doc View Source CopyFromBitmap(D2D1Bitmap) Copies the specified region from the specified bitmap into the current bitmap. Declaration public void CopyFromBitmap(D2D1Bitmap srcBitmap) Parameters Type Name Description D2D1Bitmap srcBitmap The bitmap to copy from. | Improve this Doc View Source CopyFromBitmap(D2D1Bitmap, D2D1RectU) Copies the specified region from the specified bitmap into the current bitmap. Declaration public void CopyFromBitmap(D2D1Bitmap srcBitmap, D2D1RectU srcRect) Parameters Type Name Description D2D1Bitmap srcBitmap The bitmap to copy from. D2D1RectU srcRect The area of bitmap to copy. | Improve this Doc View Source CopyFromBitmap(D2D1Point2U, D2D1Bitmap) Copies the specified region from the specified bitmap into the current bitmap. Declaration public void CopyFromBitmap(D2D1Point2U destPoint, D2D1Bitmap srcBitmap) Parameters Type Name Description D2D1Point2U destPoint In the current bitmap, the upper-left corner of the area to which the region is copied. D2D1Bitmap srcBitmap The bitmap to copy from. | Improve this Doc View Source CopyFromBitmap(D2D1Point2U, D2D1Bitmap, D2D1RectU) Copies the specified region from the specified bitmap into the current bitmap. Declaration public void CopyFromBitmap(D2D1Point2U destPoint, D2D1Bitmap srcBitmap, D2D1RectU srcRect) Parameters Type Name Description D2D1Point2U destPoint In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. D2D1Bitmap srcBitmap The bitmap to copy from. D2D1RectU srcRect The area of bitmap to copy. | Improve this Doc View Source CopyFromMemory(D2D1RectU, Byte[], UInt32) Copies the specified region from memory into the current bitmap. Declaration public void CopyFromMemory(D2D1RectU destRect, byte[] srcData, uint pitch) Parameters Type Name Description D2D1RectU destRect In the current bitmap, the upper-left corner of the area to which the region specified by srcData is copied. Byte [] srcData The data to copy. UInt32 pitch The stride, or pitch, of the source bitmap stored in srcData . The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding . | Improve this Doc View Source CopyFromMemory(D2D1RectU, IntPtr, UInt32) Copies the specified region from memory into the current bitmap. Declaration public void CopyFromMemory(D2D1RectU destRect, IntPtr srcData, uint pitch) Parameters Type Name Description D2D1RectU destRect In the current bitmap, the upper-left corner of the area to which the region specified by srcData is copied. IntPtr srcData The data to copy. UInt32 pitch The stride, or pitch, of the source bitmap stored in srcData . The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding . | Improve this Doc View Source CopyFromMemory(Byte[], UInt32) Copies the specified region from memory into the current bitmap. Declaration public void CopyFromMemory(byte[] srcData, uint pitch) Parameters Type Name Description Byte [] srcData The data to copy. UInt32 pitch The stride, or pitch, of the source bitmap stored in srcData . The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding . | Improve this Doc View Source CopyFromMemory(IntPtr, UInt32) Copies the specified region from memory into the current bitmap. Declaration public void CopyFromMemory(IntPtr srcData, uint pitch) Parameters Type Name Description IntPtr srcData The data to copy. UInt32 pitch The stride, or pitch, of the source bitmap stored in srcData . The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding . | Improve this Doc View Source CopyFromRenderTarget(D2D1Point2U, D2D1RenderTarget) Copies the specified region from the specified render target into the current bitmap. Declaration public void CopyFromRenderTarget(D2D1Point2U destPoint, D2D1RenderTarget renderTarget) Parameters Type Name Description D2D1Point2U destPoint In the current bitmap, the upper-left corner of the area to which the region is copied. D2D1RenderTarget renderTarget The render target that contains the region to copy. | Improve this Doc View Source CopyFromRenderTarget(D2D1Point2U, D2D1RenderTarget, D2D1RectU) Copies the specified region from the specified render target into the current bitmap. Declaration public void CopyFromRenderTarget(D2D1Point2U destPoint, D2D1RenderTarget renderTarget, D2D1RectU srcRect) Parameters Type Name Description D2D1Point2U destPoint In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied. D2D1RenderTarget renderTarget The render target that contains the region to copy. D2D1RectU srcRect The area of renderTarget to copy. | Improve this Doc View Source CopyFromRenderTarget(D2D1RenderTarget) Copies the specified region from the specified render target into the current bitmap. Declaration public void CopyFromRenderTarget(D2D1RenderTarget renderTarget) Parameters Type Name Description D2D1RenderTarget renderTarget The render target that contains the region to copy. | Improve this Doc View Source CopyFromRenderTarget(D2D1RenderTarget, D2D1RectU) Copies the specified region from the specified render target into the current bitmap. Declaration public void CopyFromRenderTarget(D2D1RenderTarget renderTarget, D2D1RectU srcRect) Parameters Type Name Description D2D1RenderTarget renderTarget The render target that contains the region to copy. D2D1RectU srcRect The area of renderTarget to copy. | Improve this Doc View Source GetDpi(out Single, out Single) Return the dots per inch (DPI) of the bitmap. Declaration public void GetDpi(out float dpiX, out float dpiY) Parameters Type Name Description Single dpiX The horizontal DPI of the image. Single dpiY The vertical DPI of the image. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResource2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResource2.html",
    "title": "Class DxgiResource2",
    "keywords": "Class DxgiResource2 An IDXGIResource1 interface extends the IDXGIResource interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiResource2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiResource2 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiResource2(Object) Initializes a new instance of the DxgiResource2 class. Declaration public DxgiResource2(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDxgiResource1 interface. Properties | Improve this Doc View Source EvictionPriority Gets or sets the eviction priority. Declaration public DxgiResourceEvictionPriority EvictionPriority { get; set; } Property Value Type Description DxgiResourceEvictionPriority | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source Usage Gets the expected resource usage. Declaration public DxgiUsages Usage { get; } Property Value Type Description DxgiUsages Methods | Improve this Doc View Source CreateSubresourceSurface(UInt32) Creates a sub-resource surface object. Declaration public DxgiSurface2 CreateSubresourceSurface(uint index) Parameters Type Name Description UInt32 index The index of the sub-resource surface object to enumerate. Returns Type Description DxgiSurface2 A IDXGISurface2 interface that represents the created sub-resource surface object at the position specified. | Improve this Doc View Source GetSharedHandle() Gets the handle to a shared resource. Declaration public IntPtr GetSharedHandle() Returns Type Description IntPtr A handle. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResource1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResource1.html",
    "title": "Class DxgiResource1",
    "keywords": "Class DxgiResource1 An IDXGIResource interface allows resource sharing and identifies the memory that a resource resides in. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiResource1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiResource1 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiResource1(Object) Initializes a new instance of the DxgiResource1 class. Declaration public DxgiResource1(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDxgiResource interface. Properties | Improve this Doc View Source EvictionPriority Gets or sets the eviction priority. Declaration public DxgiResourceEvictionPriority EvictionPriority { get; set; } Property Value Type Description DxgiResourceEvictionPriority | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source Usage Gets the expected resource usage. Declaration public DxgiUsages Usage { get; } Property Value Type Description DxgiUsages Methods | Improve this Doc View Source GetSharedHandle() Gets the handle to a shared resource. Declaration public IntPtr GetSharedHandle() Returns Type Description IntPtr A handle. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.html",
    "title": "Struct DxgiModeDesc1",
    "keywords": "Struct DxgiModeDesc1 Describes a display mode and whether the display mode supports stereo. Implements IEquatable < DxgiModeDesc1 > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiModeDesc1 : IEquatable<DxgiModeDesc1> Properties | Improve this Doc View Source Format Gets or sets a member of the DxgiFormat enumeration describing the display format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets a value describing the resolution height. Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source RefreshRate Gets or sets a DxgiRational structure describing the refresh rate in hertz. Declaration public DxgiRational RefreshRate { get; set; } Property Value Type Description DxgiRational | Improve this Doc View Source Scaling Gets or sets a member of the DxgiModeScaling enumeration describing the scaling mode. Declaration public DxgiModeScaling Scaling { get; set; } Property Value Type Description DxgiModeScaling | Improve this Doc View Source ScanlineOrdering Gets or sets a member of the DxgiModeScanlineOrder enumeration describing the scanline drawing mode. Declaration public DxgiModeScanlineOrder ScanlineOrdering { get; set; } Property Value Type Description DxgiModeScanlineOrder | Improve this Doc View Source Stereo Gets or sets a value indicating whether the full-screen display mode is stereo. Declaration public bool Stereo { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Width Gets or sets a value that describes the resolution width. Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiModeDesc1) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiModeDesc1 other) Parameters Type Name Description DxgiModeDesc1 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiModeDesc1, DxgiModeDesc1) Compares two DxgiModeDesc1 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiModeDesc1 left, DxgiModeDesc1 right) Parameters Type Name Description DxgiModeDesc1 left The left DxgiModeDesc1 to compare. DxgiModeDesc1 right The right DxgiModeDesc1 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiModeDesc1, DxgiModeDesc1) Compares two DxgiModeDesc1 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiModeDesc1 left, DxgiModeDesc1 right) Parameters Type Name Description DxgiModeDesc1 left The left DxgiModeDesc1 to compare. DxgiModeDesc1 right The right DxgiModeDesc1 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.html",
    "title": "Struct DxgiModeDesc",
    "keywords": "Struct DxgiModeDesc Describes a display mode. Implements IEquatable < DxgiModeDesc > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiModeDesc : IEquatable<DxgiModeDesc> Properties | Improve this Doc View Source Format Gets or sets a member of the DxgiFormat enumeration describing the display format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets a value describing the resolution height. Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source RefreshRate Gets or sets a DxgiRational structure describing the refresh rate in hertz. Declaration public DxgiRational RefreshRate { get; set; } Property Value Type Description DxgiRational | Improve this Doc View Source Scaling Gets or sets a member of the DxgiModeScaling enumeration describing the scaling mode. Declaration public DxgiModeScaling Scaling { get; set; } Property Value Type Description DxgiModeScaling | Improve this Doc View Source ScanlineOrdering Gets or sets a member of the DxgiModeScanlineOrder enumeration describing the scanline drawing mode. Declaration public DxgiModeScanlineOrder ScanlineOrdering { get; set; } Property Value Type Description DxgiModeScanlineOrder | Improve this Doc View Source Width Gets or sets a value that describes the resolution width. Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiModeDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiModeDesc other) Parameters Type Name Description DxgiModeDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiModeDesc, DxgiModeDesc) Compares two DxgiModeDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiModeDesc left, DxgiModeDesc right) Parameters Type Name Description DxgiModeDesc left The left DxgiModeDesc to compare. DxgiModeDesc right The right DxgiModeDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiModeDesc, DxgiModeDesc) Compares two DxgiModeDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiModeDesc left, DxgiModeDesc right) Parameters Type Name Description DxgiModeDesc left The left DxgiModeDesc to compare. DxgiModeDesc right The right DxgiModeDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.html",
    "title": "Struct DxgiMatrix3x2F",
    "keywords": "Struct DxgiMatrix3x2F Represents a 3x2 matrix. Implements IEquatable < DxgiMatrix3x2F > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiMatrix3x2F : IEquatable<DxgiMatrix3x2F> Properties | Improve this Doc View Source M11 Gets or sets the value in the first row and first column of the matrix. Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Gets or sets the value in the first row and second column of the matrix. Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Gets or sets the value in the second row and first column of the matrix. Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Gets or sets the value in the second row and second column of the matrix. Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Gets or sets the value in the third row and first column of the matrix. Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Gets or sets the value in the third row and second column of the matrix. Declaration public float M32 { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DxgiMatrix3x2F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiMatrix3x2F other) Parameters Type Name Description DxgiMatrix3x2F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiMatrix3x2F, DxgiMatrix3x2F) Compares two DxgiMatrix3x2F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiMatrix3x2F left, DxgiMatrix3x2F right) Parameters Type Name Description DxgiMatrix3x2F left The left DxgiMatrix3x2F to compare. DxgiMatrix3x2F right The right DxgiMatrix3x2F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiMatrix3x2F, DxgiMatrix3x2F) Compares two DxgiMatrix3x2F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiMatrix3x2F left, DxgiMatrix3x2F right) Parameters Type Name Description DxgiMatrix3x2F left The left DxgiMatrix3x2F to compare. DxgiMatrix3x2F right The right DxgiMatrix3x2F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.html",
    "title": "Struct DxgiMappedRect",
    "keywords": "Struct DxgiMappedRect Describes a mapped rectangle that is used to access a surface. Implements IEquatable < DxgiMappedRect > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiMappedRect : IEquatable<DxgiMappedRect> Properties | Improve this Doc View Source BitsPointer Gets a pointer to the image buffer of the surface. Declaration public IntPtr BitsPointer { get; } Property Value Type Description IntPtr | Improve this Doc View Source Pitch Gets a value that describes the width, in bytes, of the surface. Declaration public int Pitch { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DxgiMappedRect) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiMappedRect other) Parameters Type Name Description DxgiMappedRect other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiMappedRect, DxgiMappedRect) Compares two DxgiMappedRect objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiMappedRect left, DxgiMappedRect right) Parameters Type Name Description DxgiMappedRect left The left DxgiMappedRect to compare. DxgiMappedRect right The right DxgiMappedRect to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiMappedRect, DxgiMappedRect) Compares two DxgiMappedRect objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiMappedRect left, DxgiMappedRect right) Parameters Type Name Description DxgiMappedRect left The left DxgiMappedRect to compare. DxgiMappedRect right The right DxgiMappedRect to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.html",
    "title": "Enum DxgiMapOptions",
    "keywords": "Enum DxgiMapOptions CPU read-write options. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiMapOptions Fields Name Description Discard Discard the previous contents of a resource when it is mapped. None No option. Read Allow CPU read access. Write Allow CPU write access."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.html",
    "title": "Class DxgiKeyedMutex",
    "keywords": "Class DxgiKeyedMutex Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiKeyedMutex Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiKeyedMutex : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiKeyedMutex(Object) Initializes a new instance of the DxgiKeyedMutex class. Declaration public DxgiKeyedMutex(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDXGIKeyedMutex interface. Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source AcquireSync(UInt64, UInt32) Using a key, acquires exclusive rendering access to a shared resource. Declaration public void AcquireSync(ulong key, uint milliseconds) Parameters Type Name Description UInt64 key A value that indicates which device to give access to. UInt32 milliseconds The time-out interval, in milliseconds. | Improve this Doc View Source ReleaseSync(UInt64) Using a key, releases exclusive rendering access to a shared resource. Declaration public void ReleaseSync(ulong key) Parameters Type Name Description UInt64 key A value that indicates which device to give access to. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.html",
    "title": "Enum DxgiGraphicsPreemptionGranularity",
    "keywords": "Enum DxgiGraphicsPreemptionGranularity Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current graphics rendering task. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiGraphicsPreemptionGranularity Fields Name Description DmaBufferBoundary Indicates the preemption granularity as a DMA buffer. InstructionBoundary Indicates the preemption granularity as a graphics instruction. A graphics instruction operates on a pixel. PixelBoundary Indicates the preemption granularity as a pixel. A pixel is a part of a triangle. PrimitiveBoundary Indicates the preemption granularity as a graphics primitive. A primitive is a section in a DMA buffer and can be a group of triangles. TriangleBoundary Indicates the preemption granularity as a triangle. A triangle is a part of a primitive."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.html",
    "title": "Struct DxgiGammaControlCapabilities",
    "keywords": "Struct DxgiGammaControlCapabilities Controls the gamma capabilities of an adapter. Implements IEquatable < DxgiGammaControlCapabilities > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiGammaControlCapabilities : IEquatable<DxgiGammaControlCapabilities> Properties | Improve this Doc View Source IsScaleAndOffsetSupported Gets a value indicating whether scaling and offset operations are supported during gamma correction. Declaration public bool IsScaleAndOffsetSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source MaximumConvertedValue Gets a value describing the maximum range of the control-point positions. Declaration public float MaximumConvertedValue { get; } Property Value Type Description Single | Improve this Doc View Source MinimumConvertedValue Gets a value describing the minimum range of the control-point positions. Declaration public float MinimumConvertedValue { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DxgiGammaControlCapabilities) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiGammaControlCapabilities other) Parameters Type Name Description DxgiGammaControlCapabilities other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetGammaControlPointPositions() Gets an array of values describing control points; the maximum length of control points is 1025. Declaration public float[] GetGammaControlPointPositions() Returns Type Description Single [] An array of values describing control points. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DxgiGammaControlCapabilities, DxgiGammaControlCapabilities) Compares two DxgiGammaControlCapabilities objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiGammaControlCapabilities left, DxgiGammaControlCapabilities right) Parameters Type Name Description DxgiGammaControlCapabilities left The left DxgiGammaControlCapabilities to compare. DxgiGammaControlCapabilities right The right DxgiGammaControlCapabilities to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiGammaControlCapabilities, DxgiGammaControlCapabilities) Compares two DxgiGammaControlCapabilities objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiGammaControlCapabilities left, DxgiGammaControlCapabilities right) Parameters Type Name Description DxgiGammaControlCapabilities left The left DxgiGammaControlCapabilities to compare. DxgiGammaControlCapabilities right The right DxgiGammaControlCapabilities to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.html",
    "title": "Struct DxgiGammaControl",
    "keywords": "Struct DxgiGammaControl Controls the settings of a gamma curve. Implements IEquatable < DxgiGammaControl > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiGammaControl : IEquatable<DxgiGammaControl> Properties | Improve this Doc View Source Offset Gets or sets a DxgiColorRgb structure with offset values that are applied to the RGB values before being sent to the gamma look up table. Declaration public DxgiColorRgb Offset { get; set; } Property Value Type Description DxgiColorRgb | Improve this Doc View Source Scale Gets or sets a DxgiColorRgb structure with scalar values that are applied to RGB values before being sent to the gamma look up table. Declaration public DxgiColorRgb Scale { get; set; } Property Value Type Description DxgiColorRgb Methods | Improve this Doc View Source Equals(DxgiGammaControl) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiGammaControl other) Parameters Type Name Description DxgiGammaControl other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetGammaCurve() Gets an array of DxgiColorRgb structures that control the points of a gamma curve. Declaration public DxgiColorRgb[] GetGammaCurve() Returns Type Description DxgiColorRgb [] An array of DxgiColorRgb structures. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source SetGammaCurve(DxgiColorRgb[]) Sets an array of DxgiColorRgb structures that control the points of a gamma curve. Declaration public void SetGammaCurve(DxgiColorRgb[] curve) Parameters Type Name Description DxgiColorRgb [] curve An array of DxgiColorRgb structures. Operators | Improve this Doc View Source Equality(DxgiGammaControl, DxgiGammaControl) Compares two DxgiGammaControl objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiGammaControl left, DxgiGammaControl right) Parameters Type Name Description DxgiGammaControl left The left DxgiGammaControl to compare. DxgiGammaControl right The right DxgiGammaControl to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiGammaControl, DxgiGammaControl) Compares two DxgiGammaControl objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiGammaControl left, DxgiGammaControl right) Parameters Type Name Description DxgiGammaControl left The left DxgiGammaControl to compare. DxgiGammaControl right The right DxgiGammaControl to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.html",
    "title": "Struct DxgiFrameStatistics",
    "keywords": "Struct DxgiFrameStatistics Describes timing and presentation statistics for a frame. Implements IEquatable < DxgiFrameStatistics > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiFrameStatistics : IEquatable<DxgiFrameStatistics> Properties | Improve this Doc View Source PresentCount Gets a value that represents the running total count of times that an image was presented to the monitor since the computer booted. Declaration public uint PresentCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source PresentRefreshCount Gets a value that represents the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created). Declaration public uint PresentRefreshCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source SyncGpuTime Gets the GPU time. Reserved. Always returns 0. Declaration public ulong SyncGpuTime { get; } Property Value Type Description UInt64 | Improve this Doc View Source SyncQpcTime Gets a value that represents the high-resolution performance counter timer. This value is the same as the value returned by the QueryPerformanceCounter function. Declaration public ulong SyncQpcTime { get; } Property Value Type Description UInt64 | Improve this Doc View Source SyncRefreshCount Gets a value that represents the running total count of v-blanks when the scheduler last sampled the machine time by calling QueryPerformanceCounter and that have happened since the computer booted (for windowed mode, since the swap chain was created). Declaration public uint SyncRefreshCount { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiFrameStatistics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiFrameStatistics other) Parameters Type Name Description DxgiFrameStatistics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiFrameStatistics, DxgiFrameStatistics) Compares two DxgiFrameStatistics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiFrameStatistics left, DxgiFrameStatistics right) Parameters Type Name Description DxgiFrameStatistics left The left DxgiFrameStatistics to compare. DxgiFrameStatistics right The right DxgiFrameStatistics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiFrameStatistics, DxgiFrameStatistics) Compares two DxgiFrameStatistics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiFrameStatistics left, DxgiFrameStatistics right) Parameters Type Name Description DxgiFrameStatistics left The left DxgiFrameStatistics to compare. DxgiFrameStatistics right The right DxgiFrameStatistics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFormat.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFormat.html",
    "title": "Enum DxgiFormat",
    "keywords": "Enum DxgiFormat Resource data formats which includes fully-typed and typeless formats. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiFormat Fields Name Description A8P8 8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes Blu-Ray data. A8UNorm A single-component, 8-bit unsigned-normalized-integer format for alpha only. AI44 4-bit palletized YUV format that is commonly used for DVD sub-picture. AYuv Most common YUV 4:4:4 video resource format. B4G4R4A4UNorm A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha. B5G5R5A1UNorm A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha. B5G6R5UNorm A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red. B8G8R8A8Typeless A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. B8G8R8A8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha. B8G8R8A8UNormSrgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. B8G8R8X8Typeless A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. B8G8R8X8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused. B8G8R8X8UNormSrgb A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. BC1Typeless Four-component typeless block-compression format. BC1UNorm Four-component block-compression format. BC1UNormSrgb Four-component block-compression format for sRGB data. BC2Typeless Four-component typeless block-compression format. BC2UNorm Four-component block-compression format. BC2UNormSrgb Four-component block-compression format for sRGB data. BC3Typeless Four-component typeless block-compression format. BC3UNorm Four-component block-compression format. BC3UNormSrgb Four-component block-compression format for sRGB data. BC4SNorm One-component block-compression format. BC4Typeless One-component typeless block-compression format. BC4UNorm One-component block-compression format. BC5SNorm Two-component block-compression format. BC5Typeless Two-component typeless block-compression format. BC5UNorm Two-component block-compression format. BC6HalfSF16 A block-compression format. BC6HalfTypeless A typeless block-compression format. BC6HalfUF16 A block-compression format. BC7Typeless A typeless block-compression format. BC7UNorm A block-compression format. BC7UNormSrgb A block-compression format. D16UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth. D24UNormS8UInt A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil. D32Float A single-component, 32-bit floating-point format that supports 32 bits for depth. D32FloatS8X24UInt A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused. G8R8G8B8UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. IA44 4-bit palletized YUV format that is commonly used for DVD sub-picture. NV11 Most common planar YUV 4:1:1 video resource format. NV12 Most common YUV 4:2:0 video resource format. P010 10-bit per channel planar YUV 4:2:0 video resource format. P016 16-bit per channel planar YUV 4:2:0 video resource format. P420Opaque 8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value. P8 8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes Blu-Ray data. R10G10B10A2Typeless A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2UInt A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10A2UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha. R10G10B10XRBiasA2UNorm A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha. R11G11B10Float Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B. R16Float A single-component, 16-bit floating-point format that supports 16 bits for the red channel. R16G16B16A16Float A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha. R16G16B16A16SInt A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha. R16G16B16A16SNorm A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha. R16G16B16A16Typeless A four-component, 64-bit typeless format that supports 16 bits per channel including alpha. R16G16B16A16UInt A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha. R16G16B16A16UNorm A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha. R16G16Float A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16SInt A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16SNorm A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16Typeless A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16UInt A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel. R16G16UNorm A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels. R16SInt A single-component, 16-bit signed-integer format that supports 16 bits for the red channel. R16SNorm A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel. R16Typeless A single-component, 16-bit typeless format that supports 16 bits for the red channel. R16UInt A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel. R16UNorm A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel. R1UNorm A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. R24G8Typeless A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel. R24UNormX8Typeless A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused. R32Float A single-component, 32-bit floating-point format that supports 32 bits for the red channel. R32FloatX8X24Typeless A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused. R32G32B32A32Float A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. R32G32B32A32SInt A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. R32G32B32A32Typeless A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. R32G32B32A32UInt A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. R32G32B32Float A three-component, 96-bit floating-point format that supports 32 bits per color channel. R32G32B32SInt A three-component, 96-bit signed-integer format that supports 32 bits per color channel. R32G32B32Typeless A three-component, 96-bit typeless format that supports 32 bits per color channel. R32G32B32UInt A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel. R32G32Float A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32SInt A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel. R32G32UInt A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel. R32G8X24Typeless A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused. R32SInt A single-component, 32-bit signed-integer format that supports 32 bits for the red channel. R32Typeless A single-component, 32-bit typeless format that supports 32 bits for the red channel. R32UInt A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel. R8G8B8A8SInt A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha. R8G8B8A8SNorm A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8Typeless A four-component, 32-bit typeless format that supports 8 bits per channel including alpha. R8G8B8A8UInt A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha. R8G8B8A8UNorm A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha. R8G8B8A8UNormSrgb A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha. R8G8B8G8UNorm A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. R8G8SInt A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8SNorm A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8Typeless A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8UInt A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8G8UNorm A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel. R8SInt A single-component, 8-bit signed-integer format that supports 8 bits for the red channel. R8SNorm A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel. R8Typeless A single-component, 8-bit typeless format that supports 8 bits for the red channel. R8UInt A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel. R8UNorm A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel. R9G9B9E5SharedExp Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel. Unknown The format is not known. X24TypelessG8UInt A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel. X32TypelessG8X24UInt A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused. Y210 10-bit per channel packed YUV 4:2:2 video resource format. Y216 16-bit per channel packed YUV 4:2:2 video resource format. Y410 10-bit per channel packed YUV 4:4:4 video resource format. Y416 16-bit per channel packed YUV 4:4:4 video resource format. Yuy2 8-bit per channel planar YUV 4:2:0 video resource format."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory3.html",
    "title": "Class DxgiFactory3",
    "keywords": "Class DxgiFactory3 Enables creating Microsoft DirectX Graphics Infrastructure (DXGI) objects. Inheritance Object DxgiObject DxgiFactory3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiFactory3 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source CreationOptions Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created. Declaration public DxgiCreateFactoryOptions CreationOptions { get; } Property Value Type Description DxgiCreateFactoryOptions | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source IsCurrent Gets a value indicating whether the adapter has not changed. Declaration public bool IsCurrent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWindowedStereoEnabled Gets a value indicating whether to use stereo mode. Declaration public bool IsWindowedStereoEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source WindowAssociation Gets the window through which the user controls the transition to and from full screen. Declaration public IntPtr WindowAssociation { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Create() Creates a DXGI 1.3 factory that you can use to generate other DXGI objects. Declaration public static DxgiFactory3 Create() Returns Type Description DxgiFactory3 A DxgiFactory3 object. | Improve this Doc View Source Create(DxgiCreateFactoryOptions) Creates a DXGI 1.3 factory that you can use to generate other DXGI objects. Declaration public static DxgiFactory3 Create(DxgiCreateFactoryOptions options) Parameters Type Name Description DxgiCreateFactoryOptions options The creation options. Returns Type Description DxgiFactory3 A DxgiFactory3 object. | Improve this Doc View Source CreateSwapChainForWindowHandle(Object, IntPtr, DxgiSwapChainDesc1, Nullable<DxgiSwapChainFullscreenDesc>, DxgiOutput3) Creates a swap chain that is associated with an HWND handle to the output window for the swap chain. Declaration public DxgiSwapChain3 CreateSwapChainForWindowHandle(object device, IntPtr hwnd, DxgiSwapChainDesc1 desc, DxgiSwapChainFullscreenDesc? fullscreenDesc, DxgiOutput3 restrictToOutput) Parameters Type Name Description Object device The Direct3D device for the swap chain. IntPtr hwnd The HWND handle that is associated with the swap chain. DxgiSwapChainDesc1 desc A DXGI_SWAP_CHAIN_DESC1 structure for the swap-chain description. Nullable < DxgiSwapChainFullscreenDesc > fullscreenDesc A DXGI_SWAP_CHAIN_FULLSCREEN_DESC structure for the description of a full-screen swap chain. DxgiOutput3 restrictToOutput The IDXGIOutput interface for the output to restrict content to. Returns Type Description DxgiSwapChain3 The IDXGISwapChain1 interface for the swap chain. | Improve this Doc View Source EnumAdapters() Enumerates both adapters (video cards) with or without outputs. Declaration public IEnumerable<DxgiAdapter3> EnumAdapters() Returns Type Description IEnumerable < DxgiAdapter3 > An IEnumerable of DxgiAdapter3 . | Improve this Doc View Source MakeWindowAssociation(IntPtr, DxgiWindowAssociationOptions) Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa). Declaration public void MakeWindowAssociation(IntPtr windowHandle, DxgiWindowAssociationOptions options) Parameters Type Name Description IntPtr windowHandle The handle of the window that is to be monitored. This parameter can be Zero ; but only if the flags are also 0. DxgiWindowAssociationOptions options One or more options. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory2.html",
    "title": "Class DxgiFactory2",
    "keywords": "Class DxgiFactory2 The IDXGIFactory2 interface includes methods to create a newer version swap chain with more features than IDXGISwapChain and to monitor stereoscopic 3D capabilities. Inheritance Object DxgiObject DxgiFactory2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiFactory2 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source IsCurrent Gets a value indicating whether the adapter has not changed. Declaration public bool IsCurrent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWindowedStereoEnabled Gets a value indicating whether to use stereo mode. Declaration public bool IsWindowedStereoEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source WindowAssociation Gets the window through which the user controls the transition to and from full screen. Declaration public IntPtr WindowAssociation { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Create() Creates a DXGI 1.2 factory that you can use to generate other DXGI objects. Declaration public static DxgiFactory2 Create() Returns Type Description DxgiFactory2 A DxgiFactory2 object. | Improve this Doc View Source CreateSwapChainForWindowHandle(Object, IntPtr, DxgiSwapChainDesc1, Nullable<DxgiSwapChainFullscreenDesc>, DxgiOutput2) Creates a swap chain that is associated with an HWND handle to the output window for the swap chain. Declaration public DxgiSwapChain2 CreateSwapChainForWindowHandle(object device, IntPtr hwnd, DxgiSwapChainDesc1 desc, DxgiSwapChainFullscreenDesc? fullscreenDesc, DxgiOutput2 restrictToOutput) Parameters Type Name Description Object device The Direct3D device for the swap chain. IntPtr hwnd The HWND handle that is associated with the swap chain. DxgiSwapChainDesc1 desc A DXGI_SWAP_CHAIN_DESC1 structure for the swap-chain description. Nullable < DxgiSwapChainFullscreenDesc > fullscreenDesc A DXGI_SWAP_CHAIN_FULLSCREEN_DESC structure for the description of a full-screen swap chain. DxgiOutput2 restrictToOutput The IDXGIOutput interface for the output to restrict content to. Returns Type Description DxgiSwapChain2 The IDXGISwapChain1 interface for the swap chain. | Improve this Doc View Source EnumAdapters() Enumerates both adapters (video cards) with or without outputs. Declaration public IEnumerable<DxgiAdapter2> EnumAdapters() Returns Type Description IEnumerable < DxgiAdapter2 > An IEnumerable of DxgiAdapter2 . | Improve this Doc View Source MakeWindowAssociation(IntPtr, DxgiWindowAssociationOptions) Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa). Declaration public void MakeWindowAssociation(IntPtr windowHandle, DxgiWindowAssociationOptions options) Parameters Type Name Description IntPtr windowHandle The handle of the window that is to be monitored. This parameter can be Zero ; but only if the flags are also 0. DxgiWindowAssociationOptions options One or more options. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory1.html",
    "title": "Class DxgiFactory1",
    "keywords": "Class DxgiFactory1 The IDXGIFactory1 interface implements methods for generating DXGI objects. Inheritance Object DxgiObject DxgiFactory1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiFactory1 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source IsCurrent Gets a value indicating whether the adapter has not changed. Declaration public bool IsCurrent { get; } Property Value Type Description Boolean | Improve this Doc View Source WindowAssociation Gets the window through which the user controls the transition to and from full screen. Declaration public IntPtr WindowAssociation { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Create() Creates a DXGI 1.1 factory that you can use to generate other DXGI objects. Declaration public static DxgiFactory1 Create() Returns Type Description DxgiFactory1 A DxgiFactory1 object. | Improve this Doc View Source CreateSwapChain(Object, DxgiSwapChainDesc) Creates a swap chain. Declaration public DxgiSwapChain1 CreateSwapChain(object device, DxgiSwapChainDesc desc) Parameters Type Name Description Object device A Direct3D device that will write 2D images to the swap chain. DxgiSwapChainDesc desc A DXGI_SWAP_CHAIN_DESC structure for the swap-chain description. Returns Type Description DxgiSwapChain1 An IDXGISwapChain interface for the swap chain | Improve this Doc View Source EnumAdapters() Enumerates both adapters (video cards) with or without outputs. Declaration public IEnumerable<DxgiAdapter1> EnumAdapters() Returns Type Description IEnumerable < DxgiAdapter1 > An IEnumerable of DxgiAdapter1 . | Improve this Doc View Source MakeWindowAssociation(IntPtr, DxgiWindowAssociationOptions) Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa). Declaration public void MakeWindowAssociation(IntPtr windowHandle, DxgiWindowAssociationOptions options) Parameters Type Name Description IntPtr windowHandle The handle of the window that is to be monitored. This parameter can be Zero ; but only if the flags are also 0. DxgiWindowAssociationOptions options One or more options. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiFactory.html",
    "title": "Class DxgiFactory",
    "keywords": "Class DxgiFactory An IDXGIFactory interface implements methods for generating DXGI objects (which handle full screen transitions). Inheritance Object DxgiObject DxgiFactory Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiFactory : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source WindowAssociation Gets the window through which the user controls the transition to and from full screen. Declaration public IntPtr WindowAssociation { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source Create() Creates a DXGI 1.0 factory that you can use to generate other DXGI objects. Declaration public static DxgiFactory Create() Returns Type Description DxgiFactory A DxgiFactory object. | Improve this Doc View Source CreateSwapChain(Object, DxgiSwapChainDesc) Creates a swap chain. Declaration public DxgiSwapChain CreateSwapChain(object device, DxgiSwapChainDesc desc) Parameters Type Name Description Object device A Direct3D device that will write 2D images to the swap chain. DxgiSwapChainDesc desc A DXGI_SWAP_CHAIN_DESC structure for the swap-chain description. Returns Type Description DxgiSwapChain An IDXGISwapChain interface for the swap chain | Improve this Doc View Source EnumAdapters() Enumerates the adapters (video cards). Declaration public IEnumerable<DxgiAdapter> EnumAdapters() Returns Type Description IEnumerable < DxgiAdapter > An IEnumerable of DxgiAdapter . | Improve this Doc View Source MakeWindowAssociation(IntPtr, DxgiWindowAssociationOptions) Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa). Declaration public void MakeWindowAssociation(IntPtr windowHandle, DxgiWindowAssociationOptions options) Parameters Type Name Description IntPtr windowHandle The handle of the window that is to be monitored. This parameter can be Zero ; but only if the flags are also 0. DxgiWindowAssociationOptions options One or more options. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiError.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiError.html",
    "title": "Class DxgiError",
    "keywords": "Class DxgiError DXGI error codes. Inheritance Object DxgiError Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public static class DxgiError Fields | Improve this Doc View Source AccessDenied The application is trying to use a resource to which it does not have the required access privileges. This is most commonly caused by writing to a shared resource with read-only access. Declaration public const int AccessDenied = -2005270485 Field Value Type Description Int32 | Improve this Doc View Source AccessLost The keyed mutex was abandoned. Declaration public const int AccessLost = -2005270490 Field Value Type Description Int32 | Improve this Doc View Source CannotProtectContent DXGI is unable to provide content protection on the swap chain. This is typically caused by an older driver, or by the application using a swap chain that is incompatible with content protection. Declaration public const int CannotProtectContent = -2005270486 Field Value Type Description Int32 | Improve this Doc View Source DeviceHung The GPU will not respond to more commands, most likely because of an invalid command passed by the calling application. Declaration public const int DeviceHung = -2005270522 Field Value Type Description Int32 | Improve this Doc View Source DeviceRemoved The GPU device instance has been suspended. Use GetDeviceRemovedReason to determine the appropriate action. Declaration public const int DeviceRemoved = -2005270523 Field Value Type Description Int32 | Improve this Doc View Source DeviceReset The GPU will not respond to more commands, most likely because some other application submitted invalid commands. The calling application should re-create the device and continue. Declaration public const int DeviceReset = -2005270521 Field Value Type Description Int32 | Improve this Doc View Source DriverInternalError An internal issue prevented the driver from carrying out the specified operation. The driver's state is probably suspect, and the application should not continue. Declaration public const int DriverInternalError = -2005270496 Field Value Type Description Int32 | Improve this Doc View Source FrameStatisticsDisjoint An event (such as power cycle) interrupted the gathering of presentation statistics. Any previous statistics should be considered invalid. Declaration public const int FrameStatisticsDisjoint = -2005270517 Field Value Type Description Int32 | Improve this Doc View Source GraphicsVidpnSourceInUse Full screen mode could not be achieved because the specified output was already in use. Declaration public const int GraphicsVidpnSourceInUse = -2005270516 Field Value Type Description Int32 | Improve this Doc View Source InvalidCall The application made a call that is invalid. Either the parameters of the call or the state of some object was incorrect. Declaration public const int InvalidCall = -2005270527 Field Value Type Description Int32 | Improve this Doc View Source MoreData The caller did not supply a sufficiently large buffer. Declaration public const int MoreData = -2005270525 Field Value Type Description Int32 | Improve this Doc View Source NameAlreadyExists The application is trying to create a shared handle using a name that is already associated with some other resource. Declaration public const int NameAlreadyExists = -2005270484 Field Value Type Description Int32 | Improve this Doc View Source NonExclusive A global counter resource was in use, and the specified counter cannot be used by this Direct3D device at this time. Declaration public const int NonExclusive = -2005270495 Field Value Type Description Int32 | Improve this Doc View Source NotCurrentlyAvailable A resource is not available at the time of the call, but may become available later. Declaration public const int NotCurrentlyAvailable = -2005270494 Field Value Type Description Int32 | Improve this Doc View Source NotFound The object was not found. Declaration public const int NotFound = -2005270526 Field Value Type Description Int32 | Improve this Doc View Source RemoteClientDisconnected The application's remote device has been removed due to session disconnect or network disconnect. The application should call IDXGIFactory1::IsCurrent to find out when the remote device becomes available again. Declaration public const int RemoteClientDisconnected = -2005270493 Field Value Type Description Int32 | Improve this Doc View Source RemoteOutOfMemory The device has been removed during a remote session because the remote computer ran out of memory. Declaration public const int RemoteOutOfMemory = -2005270492 Field Value Type Description Int32 | Improve this Doc View Source RestrictToOutputStale The DXGI output (monitor) to which the swap chain content was restricted, has been disconnected or changed. Declaration public const int RestrictToOutputStale = -2005270487 Field Value Type Description Int32 | Improve this Doc View Source SdkComponentMissing The application requested an operation that depends on an SDK component that is missing or mismatched. Declaration public const int SdkComponentMissing = -2005270483 Field Value Type Description Int32 | Improve this Doc View Source SessionDisconnected The output duplication has been turned off because the Windows session ended or was disconnected. This happens when a remote user disconnects, or when \"switch user\" is used locally. Declaration public const int SessionDisconnected = -2005270488 Field Value Type Description Int32 | Improve this Doc View Source Unsupported The specified device interface or feature level is not supported on this system. Declaration public const int Unsupported = -2005270524 Field Value Type Description Int32 | Improve this Doc View Source WaitTimeout The timeout value has elapsed and the resource is not yet available. Declaration public const int WaitTimeout = -2005270489 Field Value Type Description Int32 | Improve this Doc View Source WasStillDrawing The GPU was busy at the moment when the call was made, and the call was neither executed nor scheduled. Declaration public const int WasStillDrawing = -2005270518 Field Value Type Description Int32"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.html",
    "title": "Class DxgiAdapter3",
    "keywords": "Class DxgiAdapter3 The IDXGIAdapter2 interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory. Inheritance Object DxgiObject DxgiAdapter3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiAdapter3 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a DXGI 1.2 description of an adapter (or video card). Declaration public DxgiAdapterDesc2 Description { get; } Property Value Type Description DxgiAdapterDesc2 | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source EnumOutputs() Enumerate adapter (video card) outputs. Declaration public IEnumerable<DxgiOutput3> EnumOutputs() Returns Type Description IEnumerable < DxgiOutput3 > An IEnumerable of DxgiOutput2 . | Improve this Doc View Source GetParent() Gets the parent of the object. Declaration public DxgiFactory3 GetParent() Returns Type Description DxgiFactory3 The parent of the object. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.html",
    "title": "Class DxgiAdapter2",
    "keywords": "Class DxgiAdapter2 The IDXGIAdapter2 interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory. Inheritance Object DxgiObject DxgiAdapter2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiAdapter2 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a DXGI 1.2 description of an adapter (or video card). Declaration public DxgiAdapterDesc2 Description { get; } Property Value Type Description DxgiAdapterDesc2 | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source EnumOutputs() Enumerate adapter (video card) outputs. Declaration public IEnumerable<DxgiOutput2> EnumOutputs() Returns Type Description IEnumerable < DxgiOutput2 > An IEnumerable of DxgiOutput2 . | Improve this Doc View Source GetParent() Gets the parent of the object. Declaration public DxgiFactory2 GetParent() Returns Type Description DxgiFactory2 The parent of the object. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.html",
    "title": "Class DxgiAdapter1",
    "keywords": "Class DxgiAdapter1 The IDXGIAdapter1 interface represents a display sub-system (including one or more GPU's, DACs and video memory). Inheritance Object DxgiObject DxgiAdapter1 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiAdapter1 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a DXGI 1.1 description of an adapter (or video card). Declaration public DxgiAdapterDesc1 Description { get; } Property Value Type Description DxgiAdapterDesc1 | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source EnumOutputs() Enumerate adapter (video card) outputs. Declaration public IEnumerable<DxgiOutput1> EnumOutputs() Returns Type Description IEnumerable < DxgiOutput1 > An IEnumerable of DxgiOutput . | Improve this Doc View Source GetParent() Gets the parent of the object. Declaration public DxgiFactory1 GetParent() Returns Type Description DxgiFactory1 The parent of the object. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiAdapter.html",
    "title": "Class DxgiAdapter",
    "keywords": "Class DxgiAdapter The IDXGIAdapter interface represents a display sub-system (including one or more GPU's, DACs and video memory). Inheritance Object DxgiObject DxgiAdapter Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiAdapter : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a DXGI 1.0 description of an adapter (or video card). Declaration public DxgiAdapterDesc Description { get; } Property Value Type Description DxgiAdapterDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source EnumOutputs() Enumerate adapter (video card) outputs. Declaration public IEnumerable<DxgiOutput> EnumOutputs() Returns Type Description IEnumerable < DxgiOutput > An IEnumerable of DxgiOutput . | Improve this Doc View Source GetParent() Gets the parent of the object. Declaration public DxgiFactory GetParent() Returns Type Description DxgiFactory The parent of the object. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.html",
    "title": "Namespace JeremyAnsel.DirectX.DWrite",
    "keywords": "Namespace JeremyAnsel.DirectX.DWrite Classes DWriteError DWrite error codes. DWriteFactory The root factory interface for all DWrite objects. DWriteFont The IDWriteFont interface represents a physical font in a font collection. DWriteFontCollection The DWriteFontCollection encapsulates a collection of fonts. DWriteFontFace The interface that represents an absolute reference to a font face. It contains font face type, appropriate file references and face identification data. Various font data such as metrics, names and glyph outlines is obtained from IDWriteFontFace. DWriteFontFamily The IDWriteFontFamily interface represents a set of fonts that share the same design but are differentiated by weight, stretch, and style. DWriteFontFile The interface that represents a reference to a font file. DWriteFontList The IDWriteFontList interface represents a list of fonts. DWriteLocalizedStrings Represents a collection of strings indexed by locale name. DWriteRenderingParams The interface that represents text rendering settings for glyph rasterization and filtering. DWriteTextFormat The format of text used for text layout. DWriteTextLayout The IDWriteTextLayout interface represents a block of text after it has been fully analyzed and formatted. All coordinates are in device independent pixels (DIPs). DWriteTypography Font typography setting. DWriteUtils Utility methods. Structs DWriteClusterMetrics The DWRITE_CLUSTER_METRICS structure contains information about a glyph cluster. DWriteFontFeature The DWRITE_FONT_FEATURE structure specifies properties used to identify and execute typographic feature in the font. DWriteFontMetrics The DWRITE_FONT_METRICS structure specifies the metrics of a font face that are applicable to all glyphs within the font face. DWriteGlyphMetrics The DWRITE_GLYPH_METRICS structure specifies the metrics of an individual glyph. The units depend on how the metrics are obtained. DWriteGlyphOffset Optional adjustment to a glyph's position. A glyph offset changes the position of a glyph without affecting the pen position. Offsets are in logical, pre-transform units. DWriteGlyphRun The DWRITE_GLYPH_RUN structure contains the information needed by renderers to draw glyph runs. All coordinates are in device independent pixels (DIPs). DWriteGlyphRunDescription The DWRITE_GLYPH_RUN_DESCRIPTION structure contains additional properties related to those in DWRITE_GLYPH_RUN. DWriteHitTestMetrics Geometry enclosing of text positions. DWriteInlineObjectMetrics Properties describing the geometric measurement of an application-defined inline object. DWriteLineBreakpoint Line breakpoint characteristics of a character. DWriteLineMetrics The DWRITE_LINE_METRICS structure contains information about a formatted line of text. DWriteMatrix The DWRITE_MATRIX structure specifies the graphics transform to be applied to rendered glyphs. DWriteOverhangMetrics The DWRITE_OVERHANG_METRICS structure holds how much any visible pixels (in DIPs) overshoot each side of the layout or inline objects. DWriteRect Defines the coordinates of the upper-left and lower-right corners of a rectangle. DWriteScriptAnalysis Association of text and its writing system script as well as some display attributes. DWriteShapingGlyphProperties Shaping output properties per output glyph. DWriteShapingTextProperties Shaping output properties per input character. DWriteSize Specifies the width and height of a rectangle. DWriteStrikethrough The DWRITE_STRIKETHROUGH structure contains information about the size and placement of strikethroughs. All coordinates are in device independent pixels (DIPs). DWriteTextMetrics Overall metrics associated with text after layout. All coordinates are in device independent pixels (DIPs). DWriteTextRange The DWRITE_TEXT_RANGE structure specifies a range of text positions where format is applied. DWriteTrimming The DWRITE_TRIMMING structure specifies the trimming option for text overflowing the layout box. DWriteUnderline The DWRITE_UNDERLINE structure contains information about the size and placement of underlines. All coordinates are in device independent pixels (DIPs). Interfaces IDWriteReleasable Defines a method to release the managed reference to the COM interface. Enums DWriteBreakCondition Condition at the edges of inline object or text used to determine line-breaking behavior. DWriteFactoryType Specifies the type of DirectWrite factory object. DirectWrite factory contains internal state such as font loader registration and cached font data. In most cases it is recommended to use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state and reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended to use an isolated factory for the sandboxed component. DWriteFlowDirection Direction for how lines of text are placed relative to one another. DWriteFontFaceType The file format of a complete font face. Font formats that consist of multiple files a single entry. DWriteFontFeatureTag Typographic feature of text supplied by the font. DWriteFontFileType The type of a font represented by a single font file. Font formats that consist of multiple files, e.g. Type 1 .PFM and .PFB, have separate values for each of the file type. DWriteFontSimulations Specifies algorithmic style simulations to be applied to the font face. Bold and oblique simulations can be combined via bitwise OR operation. DWriteFontStretch The font stretch enumeration describes relative change from the normal aspect ratio as specified by a font designer for the glyphs in a font. Values less than 1 or greater than 9 are considered to be invalid, and they are rejected by font API functions. DWriteFontStyle The font style enumeration describes the slope style of a font face, such as Normal, Italic or Oblique. Values other than the ones defined in the enumeration are considered to be invalid, and they are rejected by font API functions. DWriteFontWeight The font weight enumeration describes common values for degree of blackness or thickness of strokes of characters in a font. Font weight values less than 1 or greater than 999 are considered to be invalid, and they are rejected by font API functions. DWriteInformationalStringId The informational string enumeration identifies a string in a font. DWriteLineSpacingMethod The method used for line spacing in layout. DWriteMeasuringMode The measuring method used for text layout. DWriteNumberSubstitutionMethod How to apply number substitution on digits and related punctuation. DWriteParagraphAlignment Alignment of paragraph text along the flow direction axis relative to the flow's beginning and ending edge of the layout box. DWritePixelGeometry Represents the internal structure of a device pixel (i.e., the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text. DWriteReadingDirection Direction for how reading progresses. DWriteRenderingMode Represents a method of rendering glyphs. DWriteScriptShape Indicates additional shaping requirements for text. DWriteTextAlignment Alignment of paragraph text along the reading direction axis relative to the leading and trailing edge of the layout box. DWriteTextureType Identifies a type of alpha texture. An alpha texture is a bitmap of alpha values, each representing the darkness (i.e., opacity) of a pixel or subpixel. DWriteTrimmingGranularity Text granularity used to trim text overflowing the layout box. DWriteWordWrapping Word wrapping in multiline paragraph."
  },
  "api/JeremyAnsel.DirectX.DWrite.IDWriteReleasable.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.IDWriteReleasable.html",
    "title": "Interface IDWriteReleasable",
    "keywords": "Interface IDWriteReleasable Defines a method to release the managed reference to the COM interface. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public interface IDWriteReleasable Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources. Declaration void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM interface. Declaration void Release()"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteWordWrapping.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteWordWrapping.html",
    "title": "Enum DWriteWordWrapping",
    "keywords": "Enum DWriteWordWrapping Word wrapping in multiline paragraph. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteWordWrapping Fields Name Description Character Wrap between any valid characters clusters. EmergencyBreak Words are broken across lines to avoid text overflowing the layout box. Emergency wrapping occurs if the word is larger than the maximum width. NoWrap Words are kept within the same line even when it overflows the layout box. This option is often used with scrolling to reveal overflow text. WholeWord Only wrap whole words, never breaking words (emergency wrapping) when the layout width is too small for even a single word. Wrap Words are broken across lines to avoid text overflowing the layout box."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteUtils.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteUtils.html",
    "title": "Class DWriteUtils",
    "keywords": "Class DWriteUtils Utility methods. Inheritance Object DWriteUtils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public static class DWriteUtils Methods | Improve this Doc View Source DisposeAndNull<T>(ref T) Immediately releases the unmanaged resources. Declaration public static void DisposeAndNull<T>(ref T o) where T : class, IDWriteReleasable Parameters Type Name Description T o The object. Type Parameters Name Description T A releasable type. | Improve this Doc View Source ReleaseAndNull<T>(ref T) Releases the managed reference to the COM interface. Declaration public static void ReleaseAndNull<T>(ref T o) where T : class, IDWriteReleasable Parameters Type Name Description T o The COM interface. Type Parameters Name Description T A releasable type."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteUnderline.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteUnderline.html",
    "title": "Struct DWriteUnderline",
    "keywords": "Struct DWriteUnderline The DWRITE_UNDERLINE structure contains information about the size and placement of underlines. All coordinates are in device independent pixels (DIPs). Implements IEquatable < DWriteUnderline > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteUnderline : IEquatable<DWriteUnderline> Constructors | Improve this Doc View Source DWriteUnderline(Single, Single, Single, Single, DWriteReadingDirection, DWriteFlowDirection, String, DWriteMeasuringMode) Initializes a new instance of the DWriteUnderline struct. Declaration public DWriteUnderline(float width, float thickness, float offset, float runHeight, DWriteReadingDirection readingDirection, DWriteFlowDirection flowDirection, string localeName, DWriteMeasuringMode measuringMode) Parameters Type Name Description Single width Width of the underline, measured parallel to the baseline. Single thickness Thickness of the underline, measured perpendicular to the baseline. Single offset Offset of the underline from the baseline. Single runHeight Height of the tallest run where the underline applies. DWriteReadingDirection readingDirection Reading direction of the text associated with the underline. DWriteFlowDirection flowDirection Flow direction of the text associated with the underline. String localeName Locale of the text the underline is being drawn under. DWriteMeasuringMode measuringMode The measuring mode. Properties | Improve this Doc View Source FlowDirection Gets or sets the flow direction of the text associated with the underline. This value is used to interpret whether the thickness value advances top to bottom, left to right, or right to left. Declaration public DWriteFlowDirection FlowDirection { get; set; } Property Value Type Description DWriteFlowDirection | Improve this Doc View Source LocaleName Gets or sets the locale of the text the underline is being drawn under. Can be pertinent where the locale affects how the underline is drawn. For example, in vertical text, the underline belongs on the left for Chinese but on the right for Japanese. This choice is completely left up to higher levels. Declaration public string LocaleName { get; set; } Property Value Type Description String | Improve this Doc View Source MeasuringMode Gets or sets the measuring mode can be useful to the renderer to determine how underlines are rendered, e.g. rounding the thickness to a whole pixel in GDI-compatible modes. Declaration public DWriteMeasuringMode MeasuringMode { get; set; } Property Value Type Description DWriteMeasuringMode | Improve this Doc View Source Offset Gets or sets the offset of the underline from the baseline. A positive offset represents a position below the baseline and a negative offset is above. Declaration public float Offset { get; set; } Property Value Type Description Single | Improve this Doc View Source ReadingDirection Gets or sets the reading direction of the text associated with the underline. This value is used to interpret whether the width value runs horizontally or vertically. Declaration public DWriteReadingDirection ReadingDirection { get; set; } Property Value Type Description DWriteReadingDirection | Improve this Doc View Source RunHeight Gets or sets the height of the tallest run where the underline applies. Declaration public float RunHeight { get; set; } Property Value Type Description Single | Improve this Doc View Source Thickness Gets or sets the thickness of the underline, measured perpendicular to the baseline. Declaration public float Thickness { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the underline, measured parallel to the baseline. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteUnderline) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteUnderline other) Parameters Type Name Description DWriteUnderline other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteUnderline, DWriteUnderline) Compares two DWriteUnderline objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteUnderline left, DWriteUnderline right) Parameters Type Name Description DWriteUnderline left The left DWriteUnderline to compare. DWriteUnderline right The right DWriteUnderline to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteUnderline, DWriteUnderline) Compares two DWriteUnderline objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteUnderline left, DWriteUnderline right) Parameters Type Name Description DWriteUnderline left The left DWriteUnderline to compare. DWriteUnderline right The right DWriteUnderline to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTypography.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTypography.html",
    "title": "Class DWriteTypography",
    "keywords": "Class DWriteTypography Font typography setting. Inheritance Object DWriteTypography Implements IDisposable IDWriteReleasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public sealed class DWriteTypography : IDisposable, IDWriteReleasable Properties | Improve this Doc View Source Handle Gets an handle representing the DWrite object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source AddFontFeature(DWriteFontFeature) Add font feature. Declaration public void AddFontFeature(DWriteFontFeature fontFeature) Parameters Type Name Description DWriteFontFeature fontFeature The font feature to add. | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the DWrite object. Declaration public void Dispose() | Improve this Doc View Source GetFontFeature(UInt32) Get the font feature at the specified index. Declaration public DWriteFontFeature GetFontFeature(uint fontFeatureIndex) Parameters Type Name Description UInt32 fontFeatureIndex The zero-based index of the font feature to get. Returns Type Description DWriteFontFeature DWriteFontFeature | Improve this Doc View Source GetFontFeatureCount() Get the number of font features. Declaration public uint GetFontFeatureCount() Returns Type Description UInt32 UInt32 | Improve this Doc View Source Release() Releases the managed reference to the COM DWrite interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(DWriteTypography to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (DWriteTypography value) Parameters Type Name Description DWriteTypography value A DWrite object. Returns Type Description Boolean A boolean Implements System.IDisposable IDWriteReleasable"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTrimmingGranularity.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTrimmingGranularity.html",
    "title": "Enum DWriteTrimmingGranularity",
    "keywords": "Enum DWriteTrimmingGranularity Text granularity used to trim text overflowing the layout box. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteTrimmingGranularity Fields Name Description Character Trimming occurs at character cluster boundary. None No trimming occurs. Text flows beyond the layout width. Word Trimming occurs at word boundary."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTrimming.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTrimming.html",
    "title": "Struct DWriteTrimming",
    "keywords": "Struct DWriteTrimming The DWRITE_TRIMMING structure specifies the trimming option for text overflowing the layout box. Implements IEquatable < DWriteTrimming > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteTrimming : IEquatable<DWriteTrimming> Constructors | Improve this Doc View Source DWriteTrimming(DWriteTrimmingGranularity, UInt32, UInt32) Initializes a new instance of the DWriteTrimming struct. Declaration public DWriteTrimming(DWriteTrimmingGranularity granularity, uint delimiter, uint delimiterCount) Parameters Type Name Description DWriteTrimmingGranularity granularity Text granularity of which trimming applies. UInt32 delimiter Character code used as the delimiter signaling the beginning of the portion of text to be preserved. UInt32 delimiterCount How many occurrences of the delimiter to step back. Properties | Improve this Doc View Source Delimiter Gets or sets the character code used as the delimiter signaling the beginning of the portion of text to be preserved, most useful for path ellipsis, where the delimiter would be a slash. Declaration public uint Delimiter { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source DelimiterCount Gets or sets how many occurrences of the delimiter to step back. Declaration public uint DelimiterCount { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Granularity Gets or sets the text granularity of which trimming applies. Declaration public DWriteTrimmingGranularity Granularity { get; set; } Property Value Type Description DWriteTrimmingGranularity Methods | Improve this Doc View Source Equals(DWriteTrimming) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteTrimming other) Parameters Type Name Description DWriteTrimming other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteTrimming, DWriteTrimming) Compares two DWriteTrimming objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteTrimming left, DWriteTrimming right) Parameters Type Name Description DWriteTrimming left The left DWriteTrimming to compare. DWriteTrimming right The right DWriteTrimming to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteTrimming, DWriteTrimming) Compares two DWriteTrimming objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteTrimming left, DWriteTrimming right) Parameters Type Name Description DWriteTrimming left The left DWriteTrimming to compare. DWriteTrimming right The right DWriteTrimming to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextureType.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextureType.html",
    "title": "Enum DWriteTextureType",
    "keywords": "Enum DWriteTextureType Identifies a type of alpha texture. An alpha texture is a bitmap of alpha values, each representing the darkness (i.e., opacity) of a pixel or subpixel. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteTextureType Fields Name Description Aliased1X1 Specifies an alpha texture for aliased text rendering (i.e., bi-level, where each pixel is either fully opaque or fully transparent), with one byte per pixel. ClearType3X1 Specifies an alpha texture for ClearType text rendering, with three bytes per pixel in the horizontal dimension and one byte per pixel in the vertical dimension."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteTextRange.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteTextRange.html",
    "title": "Struct DWriteTextRange",
    "keywords": "Struct DWriteTextRange The DWRITE_TEXT_RANGE structure specifies a range of text positions where format is applied. Implements IEquatable < DWriteTextRange > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteTextRange : IEquatable<DWriteTextRange> Constructors | Improve this Doc View Source DWriteTextRange(UInt32, UInt32) Initializes a new instance of the DWriteTextRange struct. Declaration public DWriteTextRange(uint startPosition, uint length) Parameters Type Name Description UInt32 startPosition The start text position of the range. UInt32 length The number of text positions in the range. Properties | Improve this Doc View Source Length Gets or sets the number of text positions in the range. Declaration public uint Length { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source StartPosition Gets or sets the start text position of the range. Declaration public uint StartPosition { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DWriteTextRange) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteTextRange other) Parameters Type Name Description DWriteTextRange other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteTextRange, DWriteTextRange) Compares two DWriteTextRange objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteTextRange left, DWriteTextRange right) Parameters Type Name Description DWriteTextRange left The left DWriteTextRange to compare. DWriteTextRange right The right DWriteTextRange to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteTextRange, DWriteTextRange) Compares two DWriteTextRange objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteTextRange left, DWriteTextRange right) Parameters Type Name Description DWriteTextRange left The left DWriteTextRange to compare. DWriteTextRange right The right DWriteTextRange to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontStyle.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontStyle.html",
    "title": "Enum DWriteFontStyle",
    "keywords": "Enum DWriteFontStyle The font style enumeration describes the slope style of a font face, such as Normal, Italic or Oblique. Values other than the ones defined in the enumeration are considered to be invalid, and they are rejected by font API functions. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontStyle Fields Name Description Italic Font slope style : Italic. Normal Font slope style : Normal. Oblique Font slope style : Oblique."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontStretch.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontStretch.html",
    "title": "Enum DWriteFontStretch",
    "keywords": "Enum DWriteFontStretch The font stretch enumeration describes relative change from the normal aspect ratio as specified by a font designer for the glyphs in a font. Values less than 1 or greater than 9 are considered to be invalid, and they are rejected by font API functions. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontStretch Fields Name Description Condensed Predefined font stretch : Condensed (3). Expanded Predefined font stretch : Expanded (7). ExtraCondensed Predefined font stretch : Extra-condensed (2). ExtraExpanded Predefined font stretch : Extra-expanded (8). Medium Predefined font stretch : Medium (5). Normal Predefined font stretch : Normal (5). SemiCondensed Predefined font stretch : Semi-condensed (4). SemiExpanded Predefined font stretch : Semi-expanded (6). UltraCondensed Predefined font stretch : Ultra-condensed (1). UltraExpanded Predefined font stretch : Ultra-expanded (9). Undefined Predefined font stretch : Not known (0)."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteClusterMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteClusterMetrics.html",
    "title": "Struct DWriteClusterMetrics",
    "keywords": "Struct DWriteClusterMetrics The DWRITE_CLUSTER_METRICS structure contains information about a glyph cluster. Implements IEquatable < DWriteClusterMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteClusterMetrics : IEquatable<DWriteClusterMetrics> Properties | Improve this Doc View Source CanWrapLineAfter Gets a value indicating whether the line can be broken right after the cluster. Declaration public bool CanWrapLineAfter { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNewline Gets a value indicating whether the cluster corresponds to a newline character. Declaration public bool IsNewline { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRightToLeft Gets a value indicating whether the cluster is read from right to left. Declaration public bool IsRightToLeft { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSoftHyphen Gets a value indicating whether the cluster corresponds to soft hyphen character. Declaration public bool IsSoftHyphen { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWhitespace Gets a value indicating whether the cluster corresponds to whitespace character. Declaration public bool IsWhitespace { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the number of text positions in the cluster. Declaration public ushort Length { get; } Property Value Type Description UInt16 | Improve this Doc View Source Width Gets the total advance width of all glyphs in the cluster. Declaration public float Width { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteClusterMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteClusterMetrics other) Parameters Type Name Description DWriteClusterMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteClusterMetrics, DWriteClusterMetrics) Compares two DWriteClusterMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteClusterMetrics left, DWriteClusterMetrics right) Parameters Type Name Description DWriteClusterMetrics left The left DWriteClusterMetrics to compare. DWriteClusterMetrics right The right DWriteClusterMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteClusterMetrics, DWriteClusterMetrics) Compares two DWriteClusterMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteClusterMetrics left, DWriteClusterMetrics right) Parameters Type Name Description DWriteClusterMetrics left The left DWriteClusterMetrics to compare. DWriteClusterMetrics right The right DWriteClusterMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteBreakCondition.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteBreakCondition.html",
    "title": "Enum DWriteBreakCondition",
    "keywords": "Enum DWriteBreakCondition Condition at the edges of inline object or text used to determine line-breaking behavior. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteBreakCondition Fields Name Description CanBreak A break is allowed, unless overruled by the condition of the neighboring text span or inline object, either prohibited by a May Not or forced by a Must. MayNotBreak There should be no break, unless overruled by a Must condition from the neighboring text span or inline object. MustBreak The break must happen, regardless of the condition of the adjacent text span or inline object. Neutral Whether a break is allowed is determined by the condition of the neighboring text span or inline object."
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.html",
    "title": "Namespace JeremyAnsel.DirectX.D3DCompiler",
    "keywords": "Namespace JeremyAnsel.DirectX.D3DCompiler Classes D3DCompile Contains methods for compiling HLSL shaders. D3DTargets D3D compile targets Structs D3DShaderMacro Defines a shader macro. Enums D3DCompileOptions These constants specify how the compiler compiles the HLSL code. D3DDisassembleOptions Flags affecting the behavior of D3DDisassemble ."
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.D3DTargets.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.D3DTargets.html",
    "title": "Class D3DTargets",
    "keywords": "Class D3DTargets D3D compile targets Inheritance Object D3DTargets Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3DCompiler Assembly : JeremyAnsel.DirectX.D3DCompiler.dll Syntax public static class D3DTargets Fields | Improve this Doc View Source CS_4_0 Compute Shader 4.0 Declaration public const string CS_4_0 = \"cs_4_0\" Field Value Type Description String | Improve this Doc View Source CS_4_1 Compute Shader 4.1 Declaration public const string CS_4_1 = \"cs_4_1\" Field Value Type Description String | Improve this Doc View Source CS_5_0 Compute Shader 5.0 Declaration public const string CS_5_0 = \"cs_5_0\" Field Value Type Description String | Improve this Doc View Source DS_5_0 Domain shader 5.0 Declaration public const string DS_5_0 = \"ds_5_0\" Field Value Type Description String | Improve this Doc View Source GS_4_0 Geometry shader 4.0 Declaration public const string GS_4_0 = \"gs_4_0\" Field Value Type Description String | Improve this Doc View Source GS_4_1 Geometry shader 4.1 Declaration public const string GS_4_1 = \"gs_4_1\" Field Value Type Description String | Improve this Doc View Source GS_5_0 Geometry shader 5.0 Declaration public const string GS_5_0 = \"gs_5_0\" Field Value Type Description String | Improve this Doc View Source HS_5_0 Hull shader 5.0 Declaration public const string HS_5_0 = \"hs_5_0\" Field Value Type Description String | Improve this Doc View Source PS_2_0 Pixel shader 2.0 Declaration public const string PS_2_0 = \"ps_2_0\" Field Value Type Description String | Improve this Doc View Source PS_3_0 Pixel shader 3.0 Declaration public const string PS_3_0 = \"ps_3_0\" Field Value Type Description String | Improve this Doc View Source PS_4_0 Pixel shader 4.0 Declaration public const string PS_4_0 = \"ps_4_0\" Field Value Type Description String | Improve this Doc View Source PS_4_0_level_9_1 Pixel Shader 4.0 level 9.1 Declaration public const string PS_4_0_level_9_1 = \"ps_4_0_level_9_1\" Field Value Type Description String | Improve this Doc View Source PS_4_0_level_9_3 Pixel Shader 4.0 level 9.3 Declaration public const string PS_4_0_level_9_3 = \"ps_4_0_level_9_3\" Field Value Type Description String | Improve this Doc View Source PS_4_1 Pixel shader 4.1 Declaration public const string PS_4_1 = \"ps_4_1\" Field Value Type Description String | Improve this Doc View Source PS_5_0 Pixel shader 5.0 Declaration public const string PS_5_0 = \"ps_5_0\" Field Value Type Description String | Improve this Doc View Source VS_2_0 Vertex shader 2.0 Declaration public const string VS_2_0 = \"vs_2_0\" Field Value Type Description String | Improve this Doc View Source VS_3_0 Vertex shader 3.0 Declaration public const string VS_3_0 = \"vs_3_0\" Field Value Type Description String | Improve this Doc View Source VS_4_0 Vertex shader 4.0 Declaration public const string VS_4_0 = \"vs_4_0\" Field Value Type Description String | Improve this Doc View Source VS_4_0_level_9_1 Vertex Shader 4.0 level 9.1 Declaration public const string VS_4_0_level_9_1 = \"vs_4_0_level_9_1\" Field Value Type Description String | Improve this Doc View Source VS_4_0_level_9_3 Vertex Shader 4.0 level 9.3 Declaration public const string VS_4_0_level_9_3 = \"vs_4_0_level_9_3\" Field Value Type Description String | Improve this Doc View Source VS_4_1 Vertex shader 4.1 Declaration public const string VS_4_1 = \"vs_4_1\" Field Value Type Description String | Improve this Doc View Source VS_5_0 Vertex shader 5.0 Declaration public const string VS_5_0 = \"vs_5_0\" Field Value Type Description String"
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.D3DShaderMacro.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.D3DShaderMacro.html",
    "title": "Struct D3DShaderMacro",
    "keywords": "Struct D3DShaderMacro Defines a shader macro. Implements IEquatable < D3DShaderMacro > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3DCompiler Assembly : JeremyAnsel.DirectX.D3DCompiler.dll Syntax public struct D3DShaderMacro : IEquatable<D3DShaderMacro> Constructors | Improve this Doc View Source D3DShaderMacro(String, String) Initializes a new instance of the D3DShaderMacro struct. Declaration public D3DShaderMacro(string name, string definition) Parameters Type Name Description String name The macro name. String definition The macro definition Properties | Improve this Doc View Source Definition Gets or sets the macro definition. Declaration public string Definition { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the macro name. Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Equals(D3DShaderMacro) Declaration public bool Equals(D3DShaderMacro other) Parameters Type Name Description D3DShaderMacro other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3DShaderMacro, D3DShaderMacro) Declaration public static bool operator ==(D3DShaderMacro left, D3DShaderMacro right) Parameters Type Name Description D3DShaderMacro left D3DShaderMacro right Returns Type Description Boolean | Improve this Doc View Source Inequality(D3DShaderMacro, D3DShaderMacro) Declaration public static bool operator !=(D3DShaderMacro left, D3DShaderMacro right) Parameters Type Name Description D3DShaderMacro left D3DShaderMacro right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.D3DDisassembleOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.D3DDisassembleOptions.html",
    "title": "Enum D3DDisassembleOptions",
    "keywords": "Enum D3DDisassembleOptions Flags affecting the behavior of D3DDisassemble . Namespace : JeremyAnsel.DirectX.D3DCompiler Assembly : JeremyAnsel.DirectX.D3DCompiler.dll Syntax [Flags] public enum D3DDisassembleOptions Fields Name Description DisableDebugInfo Disable debug information. EnableColorCode Enable the output of color codes. EnableDefaultValuePrints Enable the output of default values. EnableInstructionCycle No effect. EnableInstructionNumbering Enable instruction numbering. EnableInstructionOffset Enable instruction offsets. InstructionOnly Disassemble instructions only. None No option. PrintHexLiterals Use hex symbols in disassemblies."
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.D3DCompileOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.D3DCompileOptions.html",
    "title": "Enum D3DCompileOptions",
    "keywords": "Enum D3DCompileOptions These constants specify how the compiler compiles the HLSL code. Namespace : JeremyAnsel.DirectX.D3DCompiler Assembly : JeremyAnsel.DirectX.D3DCompiler.dll Syntax [Flags] public enum D3DCompileOptions Fields Name Description AllResourcesBound Directs the compiler to ensure all resources are bound. AvoidFlowControl Directs the compiler to not use flow-control constructs where possible. Debug Directs the compiler to insert debug file/line/type/symbol information into the output code. EnableBackwardsCompatibility Directs the compiler to enable older shaders to compile to 5_0 targets. EnableStrictness Forces strict compile, which might not allow for legacy syntax. By default, the compiler disables strictness on deprecated syntax. EnableUnboundedDescriptorTables Directs the compiler to enable unbounded descriptor tables. ForcePixelShaderSoftwareNoOptimization Directs the compiler to compile a pixel shader for the next highest shader profile. This constant also turns debugging on and optimizations off. ForceVertexShaderSoftwareNoOptimization Directs the compiler to compile a vertex shader for the next highest shader profile. This constant turns debugging on and optimizations off. IEEEStrictness Forces the IEEE strict compile. None No option. NoPreshader Directs the compiler to disable Preshaders. If you set this constant, the compiler does not pull out static expression for evaluation. OptimizationLevel0 Directs the compiler to use the lowest optimization level. If you set this constant, the compiler might produce slower code but produces the code more quickly. Set this constant when you develop the shader iteratively. OptimizationLevel1 Directs the compiler to use the second lowest optimization level. OptimizationLevel2 Directs the compiler to use the second highest optimization level. OptimizationLevel3 Directs the compiler to use the highest optimization level. If you set this constant, the compiler produces the best possible code but might take significantly longer to do so. Set this constant for final builds of an application when performance is the most important factor. PackMatrixColumnMajor Directs the compiler to pack matrices in column-major order on input and output from the shader. This type of packing is generally more efficient because a series of dot-products can then perform vector-matrix multiplication. PackMatrixRowMajor Directs the compiler to pack matrices in row-major order on input and output from the shader. PartialPrecision Directs the compiler to perform all computations with partial precision. If you set this constant, the compiled code might run faster on some hardware. PreferFlowControl Directs the compiler to use flow-control constructs where possible. ResourcesMayAlias Directs the compiler to assume that unordered access views (UAVs) and shader resource views (SRVs) may alias for cs_5_0. SkipOptimization Directs the compiler to skip optimization steps during code generation. We recommend that you set this constant for debug purposes only. SkipValidation Directs the compiler not to validate the generated code against known capabilities and constraints. We recommend that you use this constant only with shaders that have been successfully compiled in the past. DirectX always validates shaders before it sets them to a device. WarningsAreErrors Directs the compiler to treat all warnings as errors when it compiles the shader code. We recommend that you use this constant for new shader code, so that you can resolve all warnings and lower the number of hard-to-find code defects."
  },
  "api/JeremyAnsel.DirectX.D3DCompiler.D3DCompile.html": {
    "href": "api/JeremyAnsel.DirectX.D3DCompiler.D3DCompile.html",
    "title": "Class D3DCompile",
    "keywords": "Class D3DCompile Contains methods for compiling HLSL shaders. Inheritance Object D3DCompile Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3DCompiler Assembly : JeremyAnsel.DirectX.D3DCompiler.dll Syntax public static class D3DCompile Methods | Improve this Doc View Source Compile(String, String, D3DShaderMacro[], String, String, D3DCompileOptions, out Byte[], out String) Compile HLSL code or an effect file into bytecode for a given target. Declaration public static void Compile(string sourceData, string sourceName, D3DShaderMacro[] defines, string entrypoint, string target, D3DCompileOptions options, out byte[] code, out string errorMessages) Parameters Type Name Description String sourceData Uncompiled shader data. String sourceName You can use this parameter for strings that specify error messages. If not used, set to NULL . D3DShaderMacro [] defines An array of macro definitions. String entrypoint The name of the shader entry point function where shader execution begins. String target A string that specifies the shader target or set of shader features to compile against. D3DCompileOptions options Constants that specify how the compiler compiles the HLSL code. Byte [] code A pointer to a variable that receives the compiled code. String errorMessages A pointer to a variable that receives compiler error messages, or NULL if there are no errors. | Improve this Doc View Source Compile(String, String, String, String, D3DCompileOptions, out Byte[], out String) Compile HLSL code or an effect file into bytecode for a given target. Declaration public static void Compile(string sourceData, string sourceName, string entrypoint, string target, D3DCompileOptions options, out byte[] code, out string errorMessages) Parameters Type Name Description String sourceData Uncompiled shader data. String sourceName You can use this parameter for strings that specify error messages. If not used, set to NULL . String entrypoint The name of the shader entry point function where shader execution begins. String target A string that specifies the shader target or set of shader features to compile against. D3DCompileOptions options Constants that specify how the compiler compiles the HLSL code. Byte [] code A pointer to a variable that receives the compiled code. String errorMessages A pointer to a variable that receives compiler error messages, or NULL if there are no errors. | Improve this Doc View Source CompileFromFile(String, D3DShaderMacro[], String, String, D3DCompileOptions, out Byte[], out String) Compile HLSL code or an effect file into bytecode for a given target. Declaration public static void CompileFromFile(string sourceFileName, D3DShaderMacro[] defines, string entrypoint, string target, D3DCompileOptions options, out byte[] code, out string errorMessages) Parameters Type Name Description String sourceFileName The name of the file that contains the shader code. D3DShaderMacro [] defines An array of macro definitions. String entrypoint The name of the shader entry point function where shader execution begins. String target A string that specifies the shader target or set of shader features to compile against. D3DCompileOptions options Constants that specify how the compiler compiles the HLSL code. Byte [] code A pointer to a variable that receives the compiled code. String errorMessages A pointer to a variable that receives compiler error messages, or NULL if there are no errors. | Improve this Doc View Source CompileFromFile(String, String, String, D3DCompileOptions, out Byte[], out String) Compile HLSL code or an effect file into bytecode for a given target. Declaration public static void CompileFromFile(string sourceFileName, string entrypoint, string target, D3DCompileOptions options, out byte[] code, out string errorMessages) Parameters Type Name Description String sourceFileName The name of the file that contains the shader code. String entrypoint The name of the shader entry point function where shader execution begins. String target A string that specifies the shader target or set of shader features to compile against. D3DCompileOptions options Constants that specify how the compiler compiles the HLSL code. Byte [] code A pointer to a variable that receives the compiled code. String errorMessages A pointer to a variable that receives compiler error messages, or NULL if there are no errors. | Improve this Doc View Source Disassemble(Byte[]) Disassembles compiled HLSL code. Declaration public static string Disassemble(byte[] sourceData) Parameters Type Name Description Byte [] sourceData The source data as compiled HLSL code. Returns Type Description String The assembly text. | Improve this Doc View Source Disassemble(Byte[], D3DDisassembleOptions) Disassembles compiled HLSL code. Declaration public static string Disassemble(byte[] sourceData, D3DDisassembleOptions options) Parameters Type Name Description Byte [] sourceData The source data as compiled HLSL code. D3DDisassembleOptions options Flags affecting the behavior of D3DDisassemble . Returns Type Description String The assembly text. | Improve this Doc View Source Disassemble(Byte[], D3DDisassembleOptions, String) Disassembles compiled HLSL code. Declaration public static string Disassemble(byte[] sourceData, D3DDisassembleOptions options, string comments) Parameters Type Name Description Byte [] sourceData The source data as compiled HLSL code. D3DDisassembleOptions options Flags affecting the behavior of D3DDisassemble . String comments The comment string at the top of the shader that identifies the shader constants and variables. Returns Type Description String The assembly text."
  },
  "api/JeremyAnsel.DirectX.D3D11.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.html",
    "title": "Namespace JeremyAnsel.DirectX.D3D11",
    "keywords": "Namespace JeremyAnsel.DirectX.D3D11 Classes D3D11Asynchronous This interface encapsulates methods for retrieving data from the GPU asynchronously. D3D11BlendState The blend-state interface holds a description for blending state that you can bind to the output-merger stage. D3D11Buffer A buffer interface accesses a buffer resource, which is unstructured memory. D3D11ClassInstance This interface encapsulates an HLSL class. D3D11ClassLinkage This interface encapsulates an HLSL dynamic linkage. D3D11CommandList Encapsulates a list of graphics commands for play back. D3D11ComputeShader A compute shader interface manages an executable program (a compute shader) that controls the compute shader stage. D3D11Constants Constants generated from the D3D11 hardware spec. D3D11Counter This interface encapsulates methods for measuring GPU performance. D3D11DepthStencilState The depth-stencil-state interface holds a description for depth-stencil state that you can bind to the output-merger stage. D3D11DepthStencilView A depth-stencil-view interface accesses a texture resource during depth-stencil testing. D3D11Device The device interface represents a virtual adapter; it is used to create resources. D3D11DeviceChild A device-child interface accesses data used by a device. D3D11DeviceContext Represents a device context which generates rendering commands. D3D11DomainShader A domain shader interface manages an executable program (a domain shader) that controls the domain shader stage. D3D11Error D3D11 error codes. D3D11GeometryShader A geometry shader interface manages an executable program (a geometry shader) that controls the geometry shader stage. D3D11HullShader A hull shader interface manages an executable program (a hull shader) that controls the hull shader stage. D3D11InputLayout An input-layout interface holds a definition of how to feed vertex data that is laid out in memory into the input-assembler stage of the graphics pipeline. D3D11PixelShader A pixel shader interface manages an executable program (a pixel shader) that controls the pixel shader stage. D3D11Predicate A predicate interface determines whether geometry should be processed depending on the results of a previous draw call. D3D11Query A query interface queries information from the GPU. D3D11RasterizerState The rasterizer-state interface holds a description for rasterizer state that you can bind to the rasterizer stage. D3D11RenderTargetView A render-target-view interface identifies the render-target subresources that can be accessed during rendering. D3D11Resource A resource interface provides common actions on all resources. D3D11SamplerState The sampler-state interface holds a description for sampler state that you can bind to any shader stage of the pipeline for reference by texture sample operations. D3D11ShaderResourceView A shader-resource-view interface specifies the subresources a shader can access during rendering. D3D11Texture1D A 1D texture interface accesses texel data, which is structured memory. D3D11Texture2D A 2D texture interface manages texel data, which is structured memory. D3D11Texture3D A 3D texture interface accesses texel data, which is structured memory. D3D11UnorderedAccessView A view interface specifies the parts of a resource the pipeline can access during rendering. D3D11Utils Utility methods. D3D11VertexShader A vertex shader interface manages an executable program (a vertex shader) that controls the vertex shader stage. D3D11View A view interface specifies the parts of a resource the pipeline can access during rendering. D3D11WellKnownPrivateDataId Well-Known Private Data IDs DxgiSwapChainExtensions Swap chain extensions. Structs D3D11BlendDesc Describes the blend state that you use in a call to CreateBlendState(D3D11BlendDesc) to create a blend-state object. D3D11Box Defines a 3D box. D3D11BufferDesc Describes a buffer resource. D3D11BufferExSrv Describes the elements in a raw buffer resource to use in a shader resource view. D3D11BufferRtv Specifies the elements in a buffer resource to use in a render-target view. D3D11BufferSrv Specifies the elements in a buffer resource to use in a shader resource view. D3D11BufferUav Describes the elements in a buffer to use in a unordered-access view. D3D11ClassInstanceDesc Describes an HLSL class instance. D3D11CounterDesc Describes a counter. D3D11CounterInfo Information about the video card's performance counter capabilities. D3D11DepthStencilDesc Describes depth-stencil state. D3D11DepthStencilOperationDesc Stencil operations that can be performed based on the results of stencil test. D3D11DepthStencilViewDesc Specifies the subresources of a texture that are accessible from a depth-stencil view. D3D11FeatureDataArchitectureInfo Describes information about Direct3D 11.1 adapter architecture. D3D11FeatureDataD3D10XHardwareOptions Describes compute shader and raw and structured buffer support in the current graphics driver. D3D11FeatureDataD3D11Options Describes Direct3D 11.1 feature options in the current graphics driver. D3D11FeatureDataD3D11Options1 Describes Direct3D 11.2 feature options in the current graphics driver. D3D11FeatureDataD3D9Options Describes Direct3D 9 feature options in the current graphics driver. D3D11FeatureDataD3D9Options1 Describes Direct3D 9 feature options in the current graphics driver. D3D11FeatureDataD3D9ShadowSupport Describes Direct3D 9 shadow support in the current graphics driver. D3D11FeatureDataD3D9SimpleInstancingSupport Describes whether simple instancing is supported. D3D11FeatureDataDoubles Describes double data type support in the current graphics driver. D3D11FeatureDataFormatSupport Describes which resources are supported by the current graphics driver for a given format. D3D11FeatureDataFormatSupport2 Describes which unordered resource options are supported by the current graphics driver for a given format. D3D11FeatureDataMarkerSupport Describes whether a GPU profiling technique is supported. D3D11FeatureDataShaderMinPrecisionSupport Describes precision support options for shaders in the current graphics driver. D3D11FeatureDataThreading Describes the multi-threading features that are supported by the current graphics driver. D3D11InputElementDesc A description of a single element for the input-assembler stage. D3D11MappedSubResource Provides access to subresource data. D3D11QueryDataPipelineStatistics Query information about graphics-pipeline activity in between calls to Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . D3D11QueryDataStreamOutputStatistics Query information about the amount of data streamed out to the stream-output buffers in between Begin(D3D11Asynchronous) and End(D3D11Asynchronous) . D3D11QueryDataTimestampDisjoint Query information about the reliability of a timestamp query. D3D11QueryDesc Describes a query. D3D11RasterizerDesc Describes rasterizer state. D3D11Rect Defines the coordinates of the upper-left and lower-right corners of a rectangle. D3D11RenderTargetBlendDesc Describes the blend state for a render target. D3D11RenderTargetViewDesc Specifies the subresources from a resource that are accessible using a render-target view. D3D11SamplerDesc Describes a sampler state. D3D11ShaderResourceViewDesc Describes a shader resource view. D3D11StreamOutputDeclarationEntry Description of a vertex element in a vertex buffer in an output slot. D3D11SubResourceData Specifies data for initializing a subresource. D3D11Texture1DArrayDsv Specifies the subresources from an array of 1D textures to use in a depth-stencil view. D3D11Texture1DArrayRtv Specifies the subresources from an array of 1D textures to use in a render-target view. D3D11Texture1DArraySrv Specifies the subresources from an array of 1D textures to use in a shader resource view. D3D11Texture1DArrayUav Describes an array of unordered-access 1D texture resources. D3D11Texture1DDesc Describes a 1D texture. D3D11Texture1DDsv Specifies the subresource from a 1D texture that is accessible to a depth-stencil view. D3D11Texture1DRtv Specifies the subresource from a 1D texture to use in a render-target view. D3D11Texture1DSrv Specifies the subresource from a 1D texture to use in a shader resource view. D3D11Texture1DUav Describes a unordered-access 1D texture resource. D3D11Texture2DArrayDsv Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view. D3D11Texture2DArrayRtv Specifies the subresources from an array of 2D textures to use in a render-target view. D3D11Texture2DArraySrv Specifies the subresources from an array of 2D textures to use in a shader resource view. D3D11Texture2DArrayUav Describes an array of unordered-access 2D texture resources. D3D11Texture2DDesc Describes a 2D texture. D3D11Texture2DDsv Specifies the subresource from a 2D texture that is accessible to a depth-stencil view. D3D11Texture2DMsArrayDsv Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view. D3D11Texture2DMsArrayRtv Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view. D3D11Texture2DMsArraySrv Specifies the subresources from an array of multisampled 2D textures to use in a shader resource view. D3D11Texture2DMsDsv Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view. D3D11Texture2DMsRtv Specifies the subresource from a multisampled 2D texture to use in a render-target view. D3D11Texture2DMsSrv Specifies the subresources from a multisampled 2D texture to use in a shader resource view. D3D11Texture2DRtv Specifies the subresource from a 2D texture to use in a render-target view. D3D11Texture2DSrv Specifies the subresource from a 2D texture to use in a shader resource view. D3D11Texture2DUav Describes a unordered-access 2D texture resource. D3D11Texture3DDesc Describes a 3D texture. D3D11Texture3DRtv Specifies the subresources from a 3D texture to use in a render-target view. D3D11Texture3DSrv Specifies the subresources from a 3D texture to use in a shader resource view. D3D11Texture3DUav Describes a unordered-access 3D texture resource. D3D11TextureCubeArraySrv Specifies the subresources from an array of cube textures to use in a shader resource view. D3D11TextureCubeSrv Specifies the subresource from a cube texture to use in a shader resource view. D3D11UnorderedAccessViewDesc Specifies the subresources from a resource that are accessible using an unordered-access view. D3D11Viewport Defines the dimensions of a viewport. Interfaces ID3D11Releasable Defines a method to release the managed reference to the COM interface. Enums D3D11AsyncGetDataOptions Optional flags that control the behavior of GetData. D3D11BindOptions Identifies how to bind a resource to the pipeline. D3D11BlendOperation RGB or alpha blending operation. D3D11BlendValue Blend factors, which modulate values for the pixel shader and render target. D3D11BufferExSrvOptions Identifies how to view a buffer resource. D3D11BufferUavOptions Identifies unordered-access view options for a buffer resource. D3D11ClearOptions Specifies the parts of the depth stencil to clear. D3D11ColorWriteEnables Identify which components of each pixel of a render target are writable during blending. D3D11ComparisonFunction Comparison options. D3D11CounterDataType Data type of a performance counter. D3D11CounterType Options for performance counters. D3D11CpuAccessOptions Specifies the types of CPU access allowed for a resource. D3D11CreateDeviceOptions Describes parameters that are used to create a device. D3D11CullMode Indicates triangles facing a particular direction are not drawn. D3D11DepthStencilViewOptions Depth-stencil view options. D3D11DepthWriteMask Identify the portion of a depth-stencil buffer for writing depth data. D3D11DeviceContextType Device context options. D3D11DriverType Driver type options. D3D11DsvDimension Specifies how to access a resource used in a depth-stencil view. D3D11Feature Direct3D 11 feature options. D3D11FeatureLevel Describes the set of features targeted by a Direct3D device. D3D11FillMode Determines the fill mode to use when rendering triangles. D3D11Filter Filtering options during texture sampling. D3D11FormatSupport Which resources are supported for a given format and given device. D3D11FormatSupport2 Unordered resource support options for a compute shader resource. D3D11InputClassification Type of data contained in an input slot. D3D11MapCpuPermission Identifies a resource to be accessed for reading and writing by the CPU. D3D11MapOptions Specifies how the CPU should respond when an application calls the Map(D3D11Resource, UInt32, D3D11MapCpuPermission, D3D11MapOptions) method on a resource that is being used by the GPU. D3D11Primitive Indicates how the pipeline interprets geometry or hull shader input primitives. D3D11PrimitiveTopology How the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen. D3D11QueryMiscOptions Flags that describe miscellaneous query behavior. D3D11QueryType Query types. D3D11RaiseOptions Option(s) for raising an error to a non-continuable exception. D3D11ResourceDimension Identifies the type of resource being used. D3D11ResourceMiscOptions Identifies options for resources. D3D11RtvDimension These flags identify the type of resource that will be viewed as a render target. D3D11ShaderMinPrecisionSupports Values that specify minimum precision levels at shader stages. D3D11SrvDimension These flags identify the type of resource that will be viewed as a shader resource. D3D11StencilOperation The stencil operations that can be performed during depth-stencil testing. D3D11TextureAddressMode Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture. D3D11TextureCubeFace The different faces of a cube texture. D3D11TiledResourcesTier Indicates the tier level at which tiled resources are supported. D3D11UavDimension Unordered-access view options. D3D11Usage Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the graphics processing unit (GPU)."
  },
  "api/JeremyAnsel.DirectX.D3D11.ID3D11Releasable.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.ID3D11Releasable.html",
    "title": "Interface ID3D11Releasable",
    "keywords": "Interface ID3D11Releasable Defines a method to release the managed reference to the COM interface. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public interface ID3D11Releasable Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources. Declaration void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM interface. Declaration void Release()"
  },
  "api/JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.html",
    "title": "Class DxgiSwapChainExtensions",
    "keywords": "Class DxgiSwapChainExtensions Swap chain extensions. Inheritance Object DxgiSwapChainExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public static class DxgiSwapChainExtensions Methods | Improve this Doc View Source GetTexture2D(DxgiSwapChain, UInt32) Accesses one of the swap-chain's back buffers, viewed as a 2D texture. Declaration public static D3D11Texture2D GetTexture2D(this DxgiSwapChain swapChain, uint buffer) Parameters Type Name Description DxgiSwapChain swapChain The swap chain. UInt32 buffer A zero-based buffer index. Returns Type Description D3D11Texture2D A 2D texture. | Improve this Doc View Source GetTexture2D(DxgiSwapChain1, UInt32) Accesses one of the swap-chain's back buffers, viewed as a 2D texture. Declaration public static D3D11Texture2D GetTexture2D(this DxgiSwapChain1 swapChain, uint buffer) Parameters Type Name Description DxgiSwapChain1 swapChain The swap chain. UInt32 buffer A zero-based buffer index. Returns Type Description D3D11Texture2D A 2D texture. | Improve this Doc View Source GetTexture2D(DxgiSwapChain2, UInt32) Accesses one of the swap-chain's back buffers, viewed as a 2D texture. Declaration public static D3D11Texture2D GetTexture2D(this DxgiSwapChain2 swapChain, uint buffer) Parameters Type Name Description DxgiSwapChain2 swapChain The swap chain. UInt32 buffer A zero-based buffer index. Returns Type Description D3D11Texture2D A 2D texture. | Improve this Doc View Source GetTexture2D(DxgiSwapChain3, UInt32) Accesses one of the swap-chain's back buffers, viewed as a 2D texture. Declaration public static D3D11Texture2D GetTexture2D(this DxgiSwapChain3 swapChain, uint buffer) Parameters Type Name Description DxgiSwapChain3 swapChain The swap chain. UInt32 buffer A zero-based buffer index. Returns Type Description D3D11Texture2D A 2D texture."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11WellKnownPrivateDataId.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11WellKnownPrivateDataId.html",
    "title": "Class D3D11WellKnownPrivateDataId",
    "keywords": "Class D3D11WellKnownPrivateDataId Well-Known Private Data IDs Inheritance Object D3D11WellKnownPrivateDataId Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public static class D3D11WellKnownPrivateDataId Fields | Improve this Doc View Source DebugObjectName Provides a unique name to objects in order to assist the developer during debugging. Declaration public static readonly Guid DebugObjectName Field Value Type Description Guid"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Viewport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Viewport.html",
    "title": "Struct D3D11Viewport",
    "keywords": "Struct D3D11Viewport Defines the dimensions of a viewport. Implements IEquatable < D3D11Viewport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Viewport : IEquatable<D3D11Viewport> Constructors | Improve this Doc View Source D3D11Viewport(D3D11Buffer, D3D11RenderTargetView) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Buffer buffer, D3D11RenderTargetView view) Parameters Type Name Description D3D11Buffer buffer A buffer. D3D11RenderTargetView view The render-target view. | Improve this Doc View Source D3D11Viewport(D3D11Buffer, D3D11RenderTargetView, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Buffer buffer, D3D11RenderTargetView view, float topLeftX) Parameters Type Name Description D3D11Buffer buffer A buffer. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Buffer, D3D11RenderTargetView, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Buffer buffer, D3D11RenderTargetView view, float topLeftX, float minDepth, float maxDepth) Parameters Type Name Description D3D11Buffer buffer A buffer. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single minDepth The minimum depth of the viewport. Single maxDepth The maximum depth of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture1D, D3D11RenderTargetView) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture1D texture, D3D11RenderTargetView view) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RenderTargetView view The render-target view. | Improve this Doc View Source D3D11Viewport(D3D11Texture1D, D3D11RenderTargetView, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture1D texture, D3D11RenderTargetView view, float topLeftX) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture1D, D3D11RenderTargetView, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture1D texture, D3D11RenderTargetView view, float topLeftX, float minDepth, float maxDepth) Parameters Type Name Description D3D11Texture1D texture A 1D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single minDepth The minimum depth of the viewport. Single maxDepth The maximum depth of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture2D, D3D11RenderTargetView) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture2D texture, D3D11RenderTargetView view) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RenderTargetView view The render-target view. | Improve this Doc View Source D3D11Viewport(D3D11Texture2D, D3D11RenderTargetView, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture2D texture, D3D11RenderTargetView view, float topLeftX, float topLeftY) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture2D, D3D11RenderTargetView, Single, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture2D texture, D3D11RenderTargetView view, float topLeftX, float topLeftY, float minDepth, float maxDepth) Parameters Type Name Description D3D11Texture2D texture A 2D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. Single minDepth The minimum depth of the viewport. Single maxDepth The maximum depth of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture3D, D3D11RenderTargetView) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture3D texture, D3D11RenderTargetView view) Parameters Type Name Description D3D11Texture3D texture A 3D texture. D3D11RenderTargetView view The render-target view. | Improve this Doc View Source D3D11Viewport(D3D11Texture3D, D3D11RenderTargetView, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture3D texture, D3D11RenderTargetView view, float topLeftX, float topLeftY) Parameters Type Name Description D3D11Texture3D texture A 3D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. | Improve this Doc View Source D3D11Viewport(D3D11Texture3D, D3D11RenderTargetView, Single, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(D3D11Texture3D texture, D3D11RenderTargetView view, float topLeftX, float topLeftY, float minDepth, float maxDepth) Parameters Type Name Description D3D11Texture3D texture A 3D texture. D3D11RenderTargetView view The render-target view. Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. Single minDepth The minimum depth of the viewport. Single maxDepth The maximum depth of the viewport. | Improve this Doc View Source D3D11Viewport(Single, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(float topLeftX, float topLeftY, float width, float height) Parameters Type Name Description Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. Single width The width of the viewport. Single height The height of the viewport. | Improve this Doc View Source D3D11Viewport(Single, Single, Single, Single, Single, Single) Initializes a new instance of the D3D11Viewport struct. Declaration public D3D11Viewport(float topLeftX, float topLeftY, float width, float height, float minDepth, float maxDepth) Parameters Type Name Description Single topLeftX The X position of the left hand side of the viewport. Single topLeftY The Y position of the top of the viewport. Single width The width of the viewport. Single height The height of the viewport. Single minDepth The minimum depth of the viewport. Single maxDepth The maximum depth of the viewport. Properties | Improve this Doc View Source Height Gets or sets the height of the viewport. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source MaxDepth Gets or sets the maximum depth of the viewport. Declaration public float MaxDepth { get; set; } Property Value Type Description Single | Improve this Doc View Source MinDepth Gets or sets the minimum depth of the viewport. Declaration public float MinDepth { get; set; } Property Value Type Description Single | Improve this Doc View Source TopLeftX Gets or sets the X position of the left hand side of the viewport. Declaration public float TopLeftX { get; set; } Property Value Type Description Single | Improve this Doc View Source TopLeftY Gets or sets the Y position of the top of the viewport. Declaration public float TopLeftY { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the viewport. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D3D11Viewport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Viewport other) Parameters Type Name Description D3D11Viewport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Viewport, D3D11Viewport) Compares two D3D11Viewport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Viewport left, D3D11Viewport right) Parameters Type Name Description D3D11Viewport left The left D3D11Viewport to compare. D3D11Viewport right The right D3D11Viewport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Viewport, D3D11Viewport) Compares two D3D11Viewport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Viewport left, D3D11Viewport right) Parameters Type Name Description D3D11Viewport left The left D3D11Viewport to compare. D3D11Viewport right The right D3D11Viewport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11View.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11View.html",
    "title": "Class D3D11View",
    "keywords": "Class D3D11View A view interface specifies the parts of a resource the pipeline can access during rendering. Inheritance Object D3D11DeviceChild D3D11View D3D11DepthStencilView D3D11RenderTargetView D3D11ShaderResourceView D3D11UnorderedAccessView Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.Handle D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public abstract class D3D11View : D3D11DeviceChild, IDisposable, ID3D11Releasable Methods | Improve this Doc View Source GetResource() Gets the resource that is accessed through this view. Declaration public D3D11Resource GetResource() Returns Type Description D3D11Resource The resource that is accessed through this view. Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11VertexShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11VertexShader.html",
    "title": "Class D3D11VertexShader",
    "keywords": "Class D3D11VertexShader A vertex shader interface manages an executable program (a vertex shader) that controls the vertex shader stage. Inheritance Object D3D11DeviceChild D3D11VertexShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11VertexShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Utils.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Utils.html",
    "title": "Class D3D11Utils",
    "keywords": "Class D3D11Utils Utility methods. Inheritance Object D3D11Utils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public static class D3D11Utils Methods | Improve this Doc View Source CalcSubresource(UInt32, UInt32, UInt32) Calculates a subresource index for a texture. Declaration public static uint CalcSubresource(uint mipSlice, uint arraySlice, uint mipLevels) Parameters Type Name Description UInt32 mipSlice A zero-based index for the mipmap level to address; 0 indicates the first, most detailed mipmap level UInt32 arraySlice The zero-based index for the array level to address; always use 0 for volume (3D) textures. UInt32 mipLevels Number of mipmap levels in the resource. Returns Type Description UInt32 The index which equals MipSlice + (ArraySlice * MipLevels) . | Improve this Doc View Source DisposeAndNull<T>(ref T) Immediately releases the unmanaged resources. Declaration public static void DisposeAndNull<T>(ref T o) where T : class, ID3D11Releasable Parameters Type Name Description T o The object. Type Parameters Name Description T A releasable type. | Improve this Doc View Source ReleaseAndNull<T>(ref T) Releases the managed reference to the COM interface. Declaration public static void ReleaseAndNull<T>(ref T o) where T : class, ID3D11Releasable Parameters Type Name Description T o The COM interface. Type Parameters Name Description T A releasable type."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.html",
    "title": "Enum D3D11TextureAddressMode",
    "keywords": "Enum D3D11TextureAddressMode Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11TextureAddressMode Fields Name Description Border Texture coordinates outside the range [0.0, 1.0] are set to the border color. Clamp Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. Mirror Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on. MirrorOnce Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. None No value. Wrap Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.html",
    "title": "Struct D3D11Texture3DUav",
    "keywords": "Struct D3D11Texture3DUav Describes a unordered-access 3D texture resource. Implements IEquatable < D3D11Texture3DUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture3DUav : IEquatable<D3D11Texture3DUav> Properties | Improve this Doc View Source FirstWSlice Gets or sets the zero-based index of the first depth slice to be accessed. Declaration public uint FirstWSlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the mipmap slice index. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source WSize Gets or sets the number of depth slices. Declaration public uint WSize { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture3DUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture3DUav other) Parameters Type Name Description D3D11Texture3DUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture3DUav, D3D11Texture3DUav) Compares two D3D11Texture3DUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture3DUav left, D3D11Texture3DUav right) Parameters Type Name Description D3D11Texture3DUav left The left D3D11Texture3DUav to compare. D3D11Texture3DUav right The right D3D11Texture3DUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture3DUav, D3D11Texture3DUav) Compares two D3D11Texture3DUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture3DUav left, D3D11Texture3DUav right) Parameters Type Name Description D3D11Texture3DUav left The left D3D11Texture3DUav to compare. D3D11Texture3DUav right The right D3D11Texture3DUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.html",
    "title": "Struct D3D11Texture3DSrv",
    "keywords": "Struct D3D11Texture3DSrv Specifies the subresources from a 3D texture to use in a shader resource view. Implements IEquatable < D3D11Texture3DSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture3DSrv : IEquatable<D3D11Texture3DSrv> Properties | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture3DSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture3DSrv other) Parameters Type Name Description D3D11Texture3DSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture3DSrv, D3D11Texture3DSrv) Compares two D3D11Texture3DSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture3DSrv left, D3D11Texture3DSrv right) Parameters Type Name Description D3D11Texture3DSrv left The left D3D11Texture3DSrv to compare. D3D11Texture3DSrv right The right D3D11Texture3DSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture3DSrv, D3D11Texture3DSrv) Compares two D3D11Texture3DSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture3DSrv left, D3D11Texture3DSrv right) Parameters Type Name Description D3D11Texture3DSrv left The left D3D11Texture3DSrv to compare. D3D11Texture3DSrv right The right D3D11Texture3DSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.html",
    "title": "Struct D3D11Texture3DRtv",
    "keywords": "Struct D3D11Texture3DRtv Specifies the subresources from a 3D texture to use in a render-target view. Implements IEquatable < D3D11Texture3DRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture3DRtv : IEquatable<D3D11Texture3DRtv> Properties | Improve this Doc View Source FirstWSlice Gets or sets the first depth level to use. Declaration public uint FirstWSlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipSlice Gets or sets the index of the mipmap level to use mip slice. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source WSize Gets or sets the number of depth levels to use in the render-target view. Declaration public uint WSize { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture3DRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture3DRtv other) Parameters Type Name Description D3D11Texture3DRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture3DRtv, D3D11Texture3DRtv) Compares two D3D11Texture3DRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture3DRtv left, D3D11Texture3DRtv right) Parameters Type Name Description D3D11Texture3DRtv left The left D3D11Texture3DRtv to compare. D3D11Texture3DRtv right The right D3D11Texture3DRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture3DRtv, D3D11Texture3DRtv) Compares two D3D11Texture3DRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture3DRtv left, D3D11Texture3DRtv right) Parameters Type Name Description D3D11Texture3DRtv left The left D3D11Texture3DRtv to compare. D3D11Texture3DRtv right The right D3D11Texture3DRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.html",
    "title": "Struct D3D11Texture3DDesc",
    "keywords": "Struct D3D11Texture3DDesc Describes a 3D texture. Implements IEquatable < D3D11Texture3DDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture3DDesc : IEquatable<D3D11Texture3DDesc> Constructors | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth, uint mipLevels) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). UInt32 mipLevels The maximum number of mipmap levels in the texture. | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth, uint mipLevels, D3D11BindOptions bindOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. | Improve this Doc View Source D3D11Texture3DDesc(DxgiFormat, UInt32, UInt32, UInt32, UInt32, D3D11BindOptions, D3D11Usage, D3D11CpuAccessOptions, D3D11ResourceMiscOptions) Initializes a new instance of the D3D11Texture3DDesc struct. Declaration public D3D11Texture3DDesc(DxgiFormat format, uint width, uint height, uint depth, uint mipLevels, D3D11BindOptions bindOptions, D3D11Usage usage, D3D11CpuAccessOptions cpuAccessOptions, D3D11ResourceMiscOptions miscOptions) Parameters Type Name Description DxgiFormat format The texture format. UInt32 width The texture width (in texels). UInt32 height The texture height (in texels). UInt32 depth The texture depth (in texels). UInt32 mipLevels The maximum number of mipmap levels in the texture. D3D11BindOptions bindOptions Options for binding to pipeline stages. D3D11Usage usage Identifies how the texture is to be read from and written to. D3D11CpuAccessOptions cpuAccessOptions Options to specify the types of CPU access allowed. D3D11ResourceMiscOptions miscOptions Options that identify other, less common resource options. Properties | Improve this Doc View Source BindOptions Gets or sets options for binding to pipeline stages. Declaration public D3D11BindOptions BindOptions { get; set; } Property Value Type Description D3D11BindOptions | Improve this Doc View Source CpuAccessOptions Gets or sets options to specify the types of CPU access allowed. Declaration public D3D11CpuAccessOptions CpuAccessOptions { get; set; } Property Value Type Description D3D11CpuAccessOptions | Improve this Doc View Source Depth Gets or sets the texture depth (in texels). Declaration public uint Depth { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Format Gets or sets the texture format. Declaration public DxgiFormat Format { get; set; } Property Value Type Description DxgiFormat | Improve this Doc View Source Height Gets or sets the texture height (in texels). Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels in the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MiscOptions Gets or sets options that identify other, less common resource options. Declaration public D3D11ResourceMiscOptions MiscOptions { get; set; } Property Value Type Description D3D11ResourceMiscOptions | Improve this Doc View Source Usage Gets or sets a value indicating how the texture is to be read from and written to. Declaration public D3D11Usage Usage { get; set; } Property Value Type Description D3D11Usage | Improve this Doc View Source Width Gets or sets the texture width (in texels). Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture3DDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture3DDesc other) Parameters Type Name Description D3D11Texture3DDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture3DDesc, D3D11Texture3DDesc) Compares two D3D11Texture3DDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture3DDesc left, D3D11Texture3DDesc right) Parameters Type Name Description D3D11Texture3DDesc left The left D3D11Texture3DDesc to compare. D3D11Texture3DDesc right The right D3D11Texture3DDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture3DDesc, D3D11Texture3DDesc) Compares two D3D11Texture3DDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture3DDesc left, D3D11Texture3DDesc right) Parameters Type Name Description D3D11Texture3DDesc left The left D3D11Texture3DDesc to compare. D3D11Texture3DDesc right The right D3D11Texture3DDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3D.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture3D.html",
    "title": "Class D3D11Texture3D",
    "keywords": "Class D3D11Texture3D A 3D texture interface accesses texel data, which is structured memory. Inheritance Object D3D11DeviceChild D3D11Resource D3D11Texture3D Implements IDisposable ID3D11Releasable Inherited Members D3D11Resource.Dimension D3D11Resource.EvictionPriority D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11Texture3D : D3D11Resource, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Description Gets the properties of the texture resource. Declaration public D3D11Texture3DDesc Description { get; } Property Value Type Description D3D11Texture3DDesc | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.html",
    "title": "Struct D3D11Texture2DUav",
    "keywords": "Struct D3D11Texture2DUav Describes a unordered-access 2D texture resource. Implements IEquatable < D3D11Texture2DUav > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DUav : IEquatable<D3D11Texture2DUav> Properties | Improve this Doc View Source MipSlice Gets or sets the mipmap slice index. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DUav) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DUav other) Parameters Type Name Description D3D11Texture2DUav other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DUav, D3D11Texture2DUav) Compares two D3D11Texture2DUav objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DUav left, D3D11Texture2DUav right) Parameters Type Name Description D3D11Texture2DUav left The left D3D11Texture2DUav to compare. D3D11Texture2DUav right The right D3D11Texture2DUav to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DUav, D3D11Texture2DUav) Compares two D3D11Texture2DUav objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DUav left, D3D11Texture2DUav right) Parameters Type Name Description D3D11Texture2DUav left The left D3D11Texture2DUav to compare. D3D11Texture2DUav right The right D3D11Texture2DUav to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.html",
    "title": "Struct D3D11Texture2DSrv",
    "keywords": "Struct D3D11Texture2DSrv Specifies the subresource from a 2D texture to use in a shader resource view. Implements IEquatable < D3D11Texture2DSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DSrv : IEquatable<D3D11Texture2DSrv> Properties | Improve this Doc View Source MipLevels Gets or sets the maximum number of mipmap levels for the view of the texture. Declaration public uint MipLevels { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MostDetailedMip Gets or sets the index of the most detailed mipmap level to use. Declaration public uint MostDetailedMip { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DSrv other) Parameters Type Name Description D3D11Texture2DSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DSrv, D3D11Texture2DSrv) Compares two D3D11Texture2DSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DSrv left, D3D11Texture2DSrv right) Parameters Type Name Description D3D11Texture2DSrv left The left D3D11Texture2DSrv to compare. D3D11Texture2DSrv right The right D3D11Texture2DSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DSrv, D3D11Texture2DSrv) Compares two D3D11Texture2DSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DSrv left, D3D11Texture2DSrv right) Parameters Type Name Description D3D11Texture2DSrv left The left D3D11Texture2DSrv to compare. D3D11Texture2DSrv right The right D3D11Texture2DSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.html",
    "title": "Struct D3D11Texture2DRtv",
    "keywords": "Struct D3D11Texture2DRtv Specifies the subresource from a 2D texture to use in a render-target view. Implements IEquatable < D3D11Texture2DRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DRtv : IEquatable<D3D11Texture2DRtv> Properties | Improve this Doc View Source MipSlice Gets or sets the index of the mipmap level to use mip slice. Declaration public uint MipSlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DRtv other) Parameters Type Name Description D3D11Texture2DRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DRtv, D3D11Texture2DRtv) Compares two D3D11Texture2DRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DRtv left, D3D11Texture2DRtv right) Parameters Type Name Description D3D11Texture2DRtv left The left D3D11Texture2DRtv to compare. D3D11Texture2DRtv right The right D3D11Texture2DRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DRtv, D3D11Texture2DRtv) Compares two D3D11Texture2DRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DRtv left, D3D11Texture2DRtv right) Parameters Type Name Description D3D11Texture2DRtv left The left D3D11Texture2DRtv to compare. D3D11Texture2DRtv right The right D3D11Texture2DRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.html",
    "title": "Struct D3D11Texture2DMsSrv",
    "keywords": "Struct D3D11Texture2DMsSrv Specifies the subresources from a multisampled 2D texture to use in a shader resource view. Implements IEquatable < D3D11Texture2DMsSrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsSrv : IEquatable<D3D11Texture2DMsSrv> Methods | Improve this Doc View Source Equals(D3D11Texture2DMsSrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsSrv other) Parameters Type Name Description D3D11Texture2DMsSrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsSrv, D3D11Texture2DMsSrv) Compares two D3D11Texture2DMsSrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsSrv left, D3D11Texture2DMsSrv right) Parameters Type Name Description D3D11Texture2DMsSrv left The left D3D11Texture2DMsSrv to compare. D3D11Texture2DMsSrv right The right D3D11Texture2DMsSrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsSrv, D3D11Texture2DMsSrv) Compares two D3D11Texture2DMsSrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsSrv left, D3D11Texture2DMsSrv right) Parameters Type Name Description D3D11Texture2DMsSrv left The left D3D11Texture2DMsSrv to compare. D3D11Texture2DMsSrv right The right D3D11Texture2DMsSrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.html",
    "title": "Struct D3D11Texture2DMsRtv",
    "keywords": "Struct D3D11Texture2DMsRtv Specifies the subresource from a multisampled 2D texture to use in a render-target view. Implements IEquatable < D3D11Texture2DMsRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsRtv : IEquatable<D3D11Texture2DMsRtv> Methods | Improve this Doc View Source Equals(D3D11Texture2DMsRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsRtv other) Parameters Type Name Description D3D11Texture2DMsRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsRtv, D3D11Texture2DMsRtv) Compares two D3D11Texture2DMsRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsRtv left, D3D11Texture2DMsRtv right) Parameters Type Name Description D3D11Texture2DMsRtv left The left D3D11Texture2DMsRtv to compare. D3D11Texture2DMsRtv right The right D3D11Texture2DMsRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsRtv, D3D11Texture2DMsRtv) Compares two D3D11Texture2DMsRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsRtv left, D3D11Texture2DMsRtv right) Parameters Type Name Description D3D11Texture2DMsRtv left The left D3D11Texture2DMsRtv to compare. D3D11Texture2DMsRtv right The right D3D11Texture2DMsRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.html",
    "title": "Struct D3D11Texture2DMsDsv",
    "keywords": "Struct D3D11Texture2DMsDsv Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view. Implements IEquatable < D3D11Texture2DMsDsv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsDsv : IEquatable<D3D11Texture2DMsDsv> Methods | Improve this Doc View Source Equals(D3D11Texture2DMsDsv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsDsv other) Parameters Type Name Description D3D11Texture2DMsDsv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsDsv, D3D11Texture2DMsDsv) Compares two D3D11Texture2DMsDsv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsDsv left, D3D11Texture2DMsDsv right) Parameters Type Name Description D3D11Texture2DMsDsv left The left D3D11Texture2DMsDsv to compare. D3D11Texture2DMsDsv right The right D3D11Texture2DMsDsv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsDsv, D3D11Texture2DMsDsv) Compares two D3D11Texture2DMsDsv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsDsv left, D3D11Texture2DMsDsv right) Parameters Type Name Description D3D11Texture2DMsDsv left The left D3D11Texture2DMsDsv to compare. D3D11Texture2DMsDsv right The right D3D11Texture2DMsDsv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.html",
    "title": "Struct D3D11Texture2DMsArraySrv",
    "keywords": "Struct D3D11Texture2DMsArraySrv Specifies the subresources from an array of multisampled 2D textures to use in a shader resource view. Implements IEquatable < D3D11Texture2DMsArraySrv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsArraySrv : IEquatable<D3D11Texture2DMsArraySrv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DMsArraySrv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsArraySrv other) Parameters Type Name Description D3D11Texture2DMsArraySrv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsArraySrv, D3D11Texture2DMsArraySrv) Compares two D3D11Texture2DMsArraySrv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsArraySrv left, D3D11Texture2DMsArraySrv right) Parameters Type Name Description D3D11Texture2DMsArraySrv left The left D3D11Texture2DMsArraySrv to compare. D3D11Texture2DMsArraySrv right The right D3D11Texture2DMsArraySrv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsArraySrv, D3D11Texture2DMsArraySrv) Compares two D3D11Texture2DMsArraySrv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsArraySrv left, D3D11Texture2DMsArraySrv right) Parameters Type Name Description D3D11Texture2DMsArraySrv left The left D3D11Texture2DMsArraySrv to compare. D3D11Texture2DMsArraySrv right The right D3D11Texture2DMsArraySrv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.html",
    "title": "Struct D3D11Texture2DMsArrayRtv",
    "keywords": "Struct D3D11Texture2DMsArrayRtv Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view. Implements IEquatable < D3D11Texture2DMsArrayRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11Texture2DMsArrayRtv : IEquatable<D3D11Texture2DMsArrayRtv> Properties | Improve this Doc View Source ArraySize Gets or sets the number of textures to use. Declaration public uint ArraySize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstArraySlice Gets or sets the index of the first texture to use in an array of textures. Declaration public uint FirstArraySlice { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11Texture2DMsArrayRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11Texture2DMsArrayRtv other) Parameters Type Name Description D3D11Texture2DMsArrayRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11Texture2DMsArrayRtv, D3D11Texture2DMsArrayRtv) Compares two D3D11Texture2DMsArrayRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11Texture2DMsArrayRtv left, D3D11Texture2DMsArrayRtv right) Parameters Type Name Description D3D11Texture2DMsArrayRtv left The left D3D11Texture2DMsArrayRtv to compare. D3D11Texture2DMsArrayRtv right The right D3D11Texture2DMsArrayRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11Texture2DMsArrayRtv, D3D11Texture2DMsArrayRtv) Compares two D3D11Texture2DMsArrayRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11Texture2DMsArrayRtv left, D3D11Texture2DMsArrayRtv right) Parameters Type Name Description D3D11Texture2DMsArrayRtv left The left D3D11Texture2DMsArrayRtv to compare. D3D11Texture2DMsArrayRtv right The right D3D11Texture2DMsArrayRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11PixelShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11PixelShader.html",
    "title": "Class D3D11PixelShader",
    "keywords": "Class D3D11PixelShader A pixel shader interface manages an executable program (a pixel shader) that controls the pixel shader stage. Inheritance Object D3D11DeviceChild D3D11PixelShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11PixelShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.html",
    "title": "Struct D3D11MappedSubResource",
    "keywords": "Struct D3D11MappedSubResource Provides access to subresource data. Implements IEquatable < D3D11MappedSubResource > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11MappedSubResource : IEquatable<D3D11MappedSubResource> Properties | Improve this Doc View Source Data Gets or sets the pointer to the data. Declaration public IntPtr Data { get; set; } Property Value Type Description IntPtr | Improve this Doc View Source DepthPitch Gets or sets the depth pitch, or width, or physical size (in bytes)of the data. Declaration public uint DepthPitch { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source RowPitch Gets or sets the row pitch, or width, or physical size (in bytes) of the data. Declaration public uint RowPitch { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11MappedSubResource) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11MappedSubResource other) Parameters Type Name Description D3D11MappedSubResource other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11MappedSubResource, D3D11MappedSubResource) Compares two D3D11MappedSubResource objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11MappedSubResource left, D3D11MappedSubResource right) Parameters Type Name Description D3D11MappedSubResource left The left D3D11MappedSubResource to compare. D3D11MappedSubResource right The right D3D11MappedSubResource to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11MappedSubResource, D3D11MappedSubResource) Compares two D3D11MappedSubResource objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11MappedSubResource left, D3D11MappedSubResource right) Parameters Type Name Description D3D11MappedSubResource left The left D3D11MappedSubResource to compare. D3D11MappedSubResource right The right D3D11MappedSubResource to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.html",
    "title": "Enum D3D11FormatSupport",
    "keywords": "Enum D3D11FormatSupport Which resources are supported for a given format and given device. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11FormatSupport Fields Name Description BackBufferCast Format supports casting when the resource is a back buffer. Blendable Blend operations supported. Buffer Buffer resources supported. CastWithinBitLayout Format cannot be cast to another format. CpuLockable CPU locking supported. DecoderOutput Format can be used with the decoder output. DepthStencil Depth stencils supported. Display Format can be displayed on screen. InputAssemblerIndexBuffer Index buffers supported. InputAssemblerVertexBuffer Vertex buffers supported. Mip Mipmaps are supported. MipAutogen Automatic generation of mipmaps is supported. MultisampleLoad Format can be used as a multisampled texture and read into a shader with the HLSL load function. MultisampleRenderTarget Format can be used as a multisampled render target. MultisampleResolve Multisample antialiasing (MSAA) resolve operations are supported. None No value. RenderTarget Render targets are supported. ShaderGather Format can be used with the HLSL gather function. ShaderGatherComparison Format can be used with the HLSL gather with comparison function. ShaderLoad The HLSL Load function for texture objects is supported. ShaderSample The HLSL Sample function for texture objects is supported. note If the device supports the format as a resource (1D, 2D, 3D, or cube map) but doesn't support this option, the resource can still use the Sample method but must use only the point filtering sampler state to perform the sample. ShaderSampleComparison The HLSL SampleCmp and SampleCmpLevelZero functions for texture objects are supported. ShaderSampleMonoTexture Reserved value. StreamOutputBuffer Streaming output buffers supported. Texture1D 1D texture resources supported. Texture2D 2D texture resources supported. Texture3D 3D texture resources supported. TextureCube Cube texture resources supported. TypedUnorderedAccessView Format can be used for an unordered access view. VideoEncoder Format can be used with the video encoder. VideoProcessorInput Format can be used with the video processor input. VideoProcessorOutput Format can be used with the video processor output."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Filter.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Filter.html",
    "title": "Enum D3D11Filter",
    "keywords": "Enum D3D11Filter Filtering options during texture sampling. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11Filter Fields Name Description Anisotropic Use anisotropic interpolation for minification, magnification, and mip-level sampling. ComparisonAnisotropic Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. ComparisonMinLinearMagMipPoint Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value. ComparisonMinLinearMagPointMipLinear Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. ComparisonMinMagLinearMipPoint Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. ComparisonMinMagMipLinear Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value. ComparisonMinMagMipPoint Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value. ComparisonMinMagPointMipLinear Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value. ComparisonMinPointMagLinearMipPoint Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value. ComparisonMinPointMagMipLinear Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value. MaximumAnisotropic Fetch the same set of texels as D3D11_FILTER_ANISOTROPIC and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinLinearMagMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinLinearMagPointMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinMagLinearMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinMagMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_LINEAR and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinMagMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_POINT and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinMagPointMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinPointMagLinearMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MaximumMinPointMagMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum. MinimumAnisotropic Fetch the same set of texels as D3D11_FILTER_ANISOTROPIC and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinLinearMagMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinLinearMagPointMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinMagLinearMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinMagMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_LINEAR and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinMagMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_MAG_MIP_POINT and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinMagPointMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinPointMagLinearMipPoint Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinimumMinPointMagMipLinear Fetch the same set of texels as D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum. MinLinearMagMipPoint Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. MinLinearMagPointMipLinear Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. MinMagLinearMipPoint Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. MinMagMipLinear Use linear interpolation for minification, magnification, and mip-level sampling. MinMagMipPoint Use point sampling for minification, magnification, and mip-level sampling. MinMagPointMipLinear Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. MinPointMagLinearMipPoint Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. MinPointMagMipLinear Use point sampling for minification; use linear interpolation for magnification and mip-level sampling."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FillMode.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FillMode.html",
    "title": "Enum D3D11FillMode",
    "keywords": "Enum D3D11FillMode Determines the fill mode to use when rendering triangles. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11FillMode Fields Name Description None No mode. Solid Fill the triangles formed by the vertices. Adjacent vertices are not drawn. WireFrame Draw lines connecting the vertices. Adjacent vertices are not drawn."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.html",
    "title": "Enum D3D11FeatureLevel",
    "keywords": "Enum D3D11FeatureLevel Describes the set of features targeted by a Direct3D device. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11FeatureLevel Fields Name Description FeatureLevel100 Targets features supported by Direct3D 10.0 including shader model 4. FeatureLevel101 Targets features supported by Direct3D 10.1 including shader model 4. FeatureLevel110 Targets features supported by Direct3D 11.0 including shader model 5. FeatureLevel111 Targets features supported by Direct3D 11.1 including shader model 5 and logical blend operations. FeatureLevel91 Targets features supported by feature level 9.1 including shader model 2. FeatureLevel92 Targets features supported by feature level 9.2 including shader model 2. FeatureLevel93 Targets features supported by feature level 9.3 including shader model 2.0b."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.html",
    "title": "Struct D3D11FeatureDataThreading",
    "keywords": "Struct D3D11FeatureDataThreading Describes the multi-threading features that are supported by the current graphics driver. Implements IEquatable < D3D11FeatureDataThreading > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataThreading : IEquatable<D3D11FeatureDataThreading> Properties | Improve this Doc View Source IsDriverCommandListsSupported Gets a value indicating whether command lists are supported by the current driver. Declaration public bool IsDriverCommandListsSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDriverConcurrentCreatesSupported Gets a value indicating whether resources can be created concurrently on multiple threads while drawing. Declaration public bool IsDriverConcurrentCreatesSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataThreading) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataThreading other) Parameters Type Name Description D3D11FeatureDataThreading other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataThreading, D3D11FeatureDataThreading) Compares two D3D11FeatureDataThreading objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataThreading left, D3D11FeatureDataThreading right) Parameters Type Name Description D3D11FeatureDataThreading left The left D3D11FeatureDataThreading to compare. D3D11FeatureDataThreading right The right D3D11FeatureDataThreading to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataThreading, D3D11FeatureDataThreading) Compares two D3D11FeatureDataThreading objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataThreading left, D3D11FeatureDataThreading right) Parameters Type Name Description D3D11FeatureDataThreading left The left D3D11FeatureDataThreading to compare. D3D11FeatureDataThreading right The right D3D11FeatureDataThreading to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.html",
    "title": "Struct D3D11FeatureDataShaderMinPrecisionSupport",
    "keywords": "Struct D3D11FeatureDataShaderMinPrecisionSupport Describes precision support options for shaders in the current graphics driver. Implements IEquatable < D3D11FeatureDataShaderMinPrecisionSupport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataShaderMinPrecisionSupport : IEquatable<D3D11FeatureDataShaderMinPrecisionSupport> Properties | Improve this Doc View Source AllOtherShaderStagesMinPrecision Gets the minimum precision levels that the driver supports for all other shader stages. Declaration public D3D11ShaderMinPrecisionSupports AllOtherShaderStagesMinPrecision { get; } Property Value Type Description D3D11ShaderMinPrecisionSupports | Improve this Doc View Source PixelShaderMinPrecision Gets the minimum precision levels that the driver supports for the pixel shader. Declaration public D3D11ShaderMinPrecisionSupports PixelShaderMinPrecision { get; } Property Value Type Description D3D11ShaderMinPrecisionSupports Methods | Improve this Doc View Source Equals(D3D11FeatureDataShaderMinPrecisionSupport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataShaderMinPrecisionSupport other) Parameters Type Name Description D3D11FeatureDataShaderMinPrecisionSupport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataShaderMinPrecisionSupport, D3D11FeatureDataShaderMinPrecisionSupport) Compares two D3D11FeatureDataShaderMinPrecisionSupport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataShaderMinPrecisionSupport left, D3D11FeatureDataShaderMinPrecisionSupport right) Parameters Type Name Description D3D11FeatureDataShaderMinPrecisionSupport left The left D3D11FeatureDataShaderMinPrecisionSupport to compare. D3D11FeatureDataShaderMinPrecisionSupport right The right D3D11FeatureDataShaderMinPrecisionSupport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataShaderMinPrecisionSupport, D3D11FeatureDataShaderMinPrecisionSupport) Compares two D3D11FeatureDataShaderMinPrecisionSupport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataShaderMinPrecisionSupport left, D3D11FeatureDataShaderMinPrecisionSupport right) Parameters Type Name Description D3D11FeatureDataShaderMinPrecisionSupport left The left D3D11FeatureDataShaderMinPrecisionSupport to compare. D3D11FeatureDataShaderMinPrecisionSupport right The right D3D11FeatureDataShaderMinPrecisionSupport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.html",
    "title": "Struct D3D11FeatureDataMarkerSupport",
    "keywords": "Struct D3D11FeatureDataMarkerSupport Describes whether a GPU profiling technique is supported. Implements IEquatable < D3D11FeatureDataMarkerSupport > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataMarkerSupport : IEquatable<D3D11FeatureDataMarkerSupport> Properties | Improve this Doc View Source IsProfileSupported Gets a value indicating whether the hardware and driver support a GPU profiling technique that can be used with development tools. Declaration public bool IsProfileSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataMarkerSupport) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataMarkerSupport other) Parameters Type Name Description D3D11FeatureDataMarkerSupport other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataMarkerSupport, D3D11FeatureDataMarkerSupport) Compares two D3D11FeatureDataMarkerSupport objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataMarkerSupport left, D3D11FeatureDataMarkerSupport right) Parameters Type Name Description D3D11FeatureDataMarkerSupport left The left D3D11FeatureDataMarkerSupport to compare. D3D11FeatureDataMarkerSupport right The right D3D11FeatureDataMarkerSupport to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataMarkerSupport, D3D11FeatureDataMarkerSupport) Compares two D3D11FeatureDataMarkerSupport objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataMarkerSupport left, D3D11FeatureDataMarkerSupport right) Parameters Type Name Description D3D11FeatureDataMarkerSupport left The left D3D11FeatureDataMarkerSupport to compare. D3D11FeatureDataMarkerSupport right The right D3D11FeatureDataMarkerSupport to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.html",
    "title": "Struct D3D11FeatureDataFormatSupport2",
    "keywords": "Struct D3D11FeatureDataFormatSupport2 Describes which unordered resource options are supported by the current graphics driver for a given format. Implements IEquatable < D3D11FeatureDataFormatSupport2 > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataFormatSupport2 : IEquatable<D3D11FeatureDataFormatSupport2> Properties | Improve this Doc View Source InFormat Gets the DxgiFormat to return information on. Declaration public DxgiFormat InFormat { get; } Property Value Type Description DxgiFormat | Improve this Doc View Source OutFormatSupport2 Gets a combination of D3D11FormatSupport2 flags indicating which unordered resource options are supported. Declaration public D3D11FormatSupport2 OutFormatSupport2 { get; } Property Value Type Description D3D11FormatSupport2 Methods | Improve this Doc View Source Equals(D3D11FeatureDataFormatSupport2) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataFormatSupport2 other) Parameters Type Name Description D3D11FeatureDataFormatSupport2 other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataFormatSupport2, D3D11FeatureDataFormatSupport2) Compares two D3D11FeatureDataFormatSupport2 objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataFormatSupport2 left, D3D11FeatureDataFormatSupport2 right) Parameters Type Name Description D3D11FeatureDataFormatSupport2 left The left D3D11FeatureDataFormatSupport2 to compare. D3D11FeatureDataFormatSupport2 right The right D3D11FeatureDataFormatSupport2 to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataFormatSupport2, D3D11FeatureDataFormatSupport2) Compares two D3D11FeatureDataFormatSupport2 objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataFormatSupport2 left, D3D11FeatureDataFormatSupport2 right) Parameters Type Name Description D3D11FeatureDataFormatSupport2 left The left D3D11FeatureDataFormatSupport2 to compare. D3D11FeatureDataFormatSupport2 right The right D3D11FeatureDataFormatSupport2 to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.html",
    "title": "Struct D3D11FeatureDataD3D10XHardwareOptions",
    "keywords": "Struct D3D11FeatureDataD3D10XHardwareOptions Describes compute shader and raw and structured buffer support in the current graphics driver. Implements IEquatable < D3D11FeatureDataD3D10XHardwareOptions > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataD3D10XHardwareOptions : IEquatable<D3D11FeatureDataD3D10XHardwareOptions> Properties | Improve this Doc View Source IsComputeShadersPlusRawAndStructuredBuffersViaShader4XSupported Gets a value indicating whether compute shaders and raw and structured buffers are supported. Declaration public bool IsComputeShadersPlusRawAndStructuredBuffersViaShader4XSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataD3D10XHardwareOptions) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataD3D10XHardwareOptions other) Parameters Type Name Description D3D11FeatureDataD3D10XHardwareOptions other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataD3D10XHardwareOptions, D3D11FeatureDataD3D10XHardwareOptions) Compares two D3D11FeatureDataD3D10XHardwareOptions objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataD3D10XHardwareOptions left, D3D11FeatureDataD3D10XHardwareOptions right) Parameters Type Name Description D3D11FeatureDataD3D10XHardwareOptions left The left D3D11FeatureDataD3D10XHardwareOptions to compare. D3D11FeatureDataD3D10XHardwareOptions right The right D3D11FeatureDataD3D10XHardwareOptions to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataD3D10XHardwareOptions, D3D11FeatureDataD3D10XHardwareOptions) Compares two D3D11FeatureDataD3D10XHardwareOptions objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataD3D10XHardwareOptions left, D3D11FeatureDataD3D10XHardwareOptions right) Parameters Type Name Description D3D11FeatureDataD3D10XHardwareOptions left The left D3D11FeatureDataD3D10XHardwareOptions to compare. D3D11FeatureDataD3D10XHardwareOptions right The right D3D11FeatureDataD3D10XHardwareOptions to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.html",
    "title": "Struct D3D11FeatureDataArchitectureInfo",
    "keywords": "Struct D3D11FeatureDataArchitectureInfo Describes information about Direct3D 11.1 adapter architecture. Implements IEquatable < D3D11FeatureDataArchitectureInfo > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11FeatureDataArchitectureInfo : IEquatable<D3D11FeatureDataArchitectureInfo> Properties | Improve this Doc View Source IsTileBasedDeferredRendererSupported Gets a value indicating whether a rendering device batches rendering commands and performs multipass rendering into tiles or bins over a render area. Declaration public bool IsTileBasedDeferredRendererSupported { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(D3D11FeatureDataArchitectureInfo) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11FeatureDataArchitectureInfo other) Parameters Type Name Description D3D11FeatureDataArchitectureInfo other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11FeatureDataArchitectureInfo, D3D11FeatureDataArchitectureInfo) Compares two D3D11FeatureDataArchitectureInfo objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11FeatureDataArchitectureInfo left, D3D11FeatureDataArchitectureInfo right) Parameters Type Name Description D3D11FeatureDataArchitectureInfo left The left D3D11FeatureDataArchitectureInfo to compare. D3D11FeatureDataArchitectureInfo right The right D3D11FeatureDataArchitectureInfo to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11FeatureDataArchitectureInfo, D3D11FeatureDataArchitectureInfo) Compares two D3D11FeatureDataArchitectureInfo objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11FeatureDataArchitectureInfo left, D3D11FeatureDataArchitectureInfo right) Parameters Type Name Description D3D11FeatureDataArchitectureInfo left The left D3D11FeatureDataArchitectureInfo to compare. D3D11FeatureDataArchitectureInfo right The right D3D11FeatureDataArchitectureInfo to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Feature.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Feature.html",
    "title": "Enum D3D11Feature",
    "keywords": "Enum D3D11Feature Direct3D 11 feature options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11Feature Fields Name Description ArchitectureInfo Supports specific adapter architecture. D3D10XHardwareOptions Supports compute shaders and raw and structured buffers. D3D11Options Supports Direct3D 11.1 feature options. D3D11Options1 Supports Direct3D 11.2 feature options. D3D9Options Supports Direct3D 9 feature options. D3D9Options1 Supports Direct3D 9 feature options, which includes the Direct3D 9 shadowing feature and instancing support. D3D9ShadowSupport Supports Direct3D 9 shadowing feature. D3D9SimpleInstancingSupport Supports Direct3D 11.2 instancing options. Doubles Supports the use of the double-precision shaders in HLSL. FormatSupport Supports the formats in D3D11FormatSupport . FormatSupport2 Supports the formats in D3D11FormatSupport2 . MarkerSupport Supports Direct3D 11.2 marker options. ShaderMinPrecisionSupport Supports minimum precision of shaders. Threading The driver supports multithreading."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Error.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Error.html",
    "title": "Class D3D11Error",
    "keywords": "Class D3D11Error D3D11 error codes. Inheritance Object D3D11Error Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public static class D3D11Error Fields | Improve this Doc View Source DeferredContextMapWithoutInitialDiscard The application's first call per command list to Map on a deferred context did not use D3D11_MAP_WRITE_DISCARD. Declaration public const int DeferredContextMapWithoutInitialDiscard = -2005139452 Field Value Type Description Int32 | Improve this Doc View Source FileNotFound The specified file was not found. Declaration public const int FileNotFound = -2005139454 Field Value Type Description Int32 | Improve this Doc View Source TooManyUniqueStateObjects The application has exceeded the maximum number of unique state objects per Direct3D device. The limit is 4096 for feature levels up to 11.1. Declaration public const int TooManyUniqueStateObjects = -2005139455 Field Value Type Description Int32 | Improve this Doc View Source TooManyUniqueViewObjects The application has exceeded the maximum number of unique view objects per Direct3D device. The limit is 2^20 for feature levels up to 11.1. Declaration public const int TooManyUniqueViewObjects = -2005139453 Field Value Type Description Int32"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.html",
    "title": "Enum D3D11DsvDimension",
    "keywords": "Enum D3D11DsvDimension Specifies how to access a resource used in a depth-stencil view. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11DsvDimension Fields Name Description Texture1D The resource will be accessed as a 1D texture. Texture1DArray The resource will be accessed as an array of 1D textures. Texture2D The resource will be accessed as a 2D texture. Texture2DArray The resource will be accessed as an array of 2D textures. Texture2DMs The resource will be accessed as a 2D texture with multisampling. Texture2DMsArray The resource will be accessed as an array of 2D textures with multisampling. Unknown No value."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DriverType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DriverType.html",
    "title": "Enum D3D11DriverType",
    "keywords": "Enum D3D11DriverType Driver type options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11DriverType Fields Name Description Hardware A hardware driver, which implements Direct3D features in hardware. This is the primary driver that you should use in your Direct3D applications because it provides the best performance. A hardware driver uses hardware acceleration (on supported hardware) but can also use software for parts of the pipeline that are not supported in hardware. This driver type is often referred to as a hardware abstraction layer or HAL. Null A NULL driver, which is a reference driver without render capability. This driver is commonly used for debugging non-rendering API calls, it is not appropriate for retail applications. Reference A reference driver, which is a software implementation that supports every Direct3D feature. A reference driver is designed for accuracy rather than speed and as a result is slow but accurate. The rasterizer portion of the driver does make use of special CPU instructions whenever it can, but it is not intended for retail applications; use it only for feature testing, demonstration of functionality, debugging, or verifying bugs in other drivers. Software A software driver, which is a driver implemented completely in software. The software implementation is not intended for a high-performance application due to its very slow performance. Unknown The driver type is unknown. Warp A WARP driver, which is a high-performance software rasterizer."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DomainShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DomainShader.html",
    "title": "Class D3D11DomainShader",
    "keywords": "Class D3D11DomainShader A domain shader interface manages an executable program (a domain shader) that controls the domain shader stage. Inheritance Object D3D11DeviceChild D3D11DomainShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11DomainShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceContextType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DeviceContextType.html",
    "title": "Enum D3D11DeviceContextType",
    "keywords": "Enum D3D11DeviceContextType Device context options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11DeviceContextType Fields Name Description Deferred The device context is a deferred context. Immediate The device context is an immediate context."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.html",
    "title": "Struct D3D11DepthStencilOperationDesc",
    "keywords": "Struct D3D11DepthStencilOperationDesc Stencil operations that can be performed based on the results of stencil test. Implements IEquatable < D3D11DepthStencilOperationDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11DepthStencilOperationDesc : IEquatable<D3D11DepthStencilOperationDesc> Properties | Improve this Doc View Source StencilDepthFailOperation Gets or sets the stencil operation to perform when stencil testing passes and depth testing fails. Declaration public D3D11StencilOperation StencilDepthFailOperation { get; set; } Property Value Type Description D3D11StencilOperation | Improve this Doc View Source StencilFailOperation Gets or sets the stencil operation to perform when stencil testing fails. Declaration public D3D11StencilOperation StencilFailOperation { get; set; } Property Value Type Description D3D11StencilOperation | Improve this Doc View Source StencilFunction Gets or sets a function that compares stencil data against existing stencil data. Declaration public D3D11ComparisonFunction StencilFunction { get; set; } Property Value Type Description D3D11ComparisonFunction | Improve this Doc View Source StencilPassOperation Gets or sets the stencil operation to perform when stencil testing and depth testing both pass. Declaration public D3D11StencilOperation StencilPassOperation { get; set; } Property Value Type Description D3D11StencilOperation Methods | Improve this Doc View Source Equals(D3D11DepthStencilOperationDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11DepthStencilOperationDesc other) Parameters Type Name Description D3D11DepthStencilOperationDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11DepthStencilOperationDesc, D3D11DepthStencilOperationDesc) Compares two D3D11DepthStencilOperationDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11DepthStencilOperationDesc left, D3D11DepthStencilOperationDesc right) Parameters Type Name Description D3D11DepthStencilOperationDesc left The left D3D11DepthStencilOperationDesc to compare. D3D11DepthStencilOperationDesc right The right D3D11DepthStencilOperationDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11DepthStencilOperationDesc, D3D11DepthStencilOperationDesc) Compares two D3D11DepthStencilOperationDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11DepthStencilOperationDesc left, D3D11DepthStencilOperationDesc right) Parameters Type Name Description D3D11DepthStencilOperationDesc left The left D3D11DepthStencilOperationDesc to compare. D3D11DepthStencilOperationDesc right The right D3D11DepthStencilOperationDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.html",
    "title": "Struct D3D11DepthStencilDesc",
    "keywords": "Struct D3D11DepthStencilDesc Describes depth-stencil state. Implements IEquatable < D3D11DepthStencilDesc > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11DepthStencilDesc : IEquatable<D3D11DepthStencilDesc> Constructors | Improve this Doc View Source D3D11DepthStencilDesc(Boolean, D3D11DepthWriteMask, D3D11ComparisonFunction, Boolean, Byte, Byte, D3D11StencilOperation, D3D11StencilOperation, D3D11StencilOperation, D3D11ComparisonFunction, D3D11StencilOperation, D3D11StencilOperation, D3D11StencilOperation, D3D11ComparisonFunction) Initializes a new instance of the D3D11DepthStencilDesc struct. Declaration public D3D11DepthStencilDesc(bool isDepthEnabled, D3D11DepthWriteMask depthWriteMask, D3D11ComparisonFunction depthFunction, bool isStencilEnabled, byte stencilReadMask, byte stencilWriteMask, D3D11StencilOperation frontStencilFailOperation, D3D11StencilOperation frontStencilDepthFailOperation, D3D11StencilOperation frontStencilPassOperation, D3D11ComparisonFunction frontStencilFunction, D3D11StencilOperation backStencilFailOperation, D3D11StencilOperation backStencilDepthFailOperation, D3D11StencilOperation backStencilPassOperation, D3D11ComparisonFunction backStencilFunction) Parameters Type Name Description Boolean isDepthEnabled Enable depth testing. D3D11DepthWriteMask depthWriteMask Identify a portion of the depth-stencil buffer that can be modified by depth data. D3D11ComparisonFunction depthFunction A function that compares depth data against existing depth data. Boolean isStencilEnabled Enable stencil testing. Byte stencilReadMask Identify a portion of the depth-stencil buffer for reading stencil data. Byte stencilWriteMask Identify a portion of the depth-stencil buffer for writing stencil data. D3D11StencilOperation frontStencilFailOperation The stencil operation to perform when stencil testing fails for pixels whose surface normal is facing towards the camera. D3D11StencilOperation frontStencilDepthFailOperation The stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing towards the camera. D3D11StencilOperation frontStencilPassOperation The stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing towards the camera. D3D11ComparisonFunction frontStencilFunction A function that compares stencil data against existing stencil data for pixels whose surface normal is facing towards the camera. D3D11StencilOperation backStencilFailOperation The stencil operation to perform when stencil testing fails for pixels whose surface normal is facing away from the camera. D3D11StencilOperation backStencilDepthFailOperation The stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing away from the camera. D3D11StencilOperation backStencilPassOperation The stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing away from the camera. D3D11ComparisonFunction backStencilFunction A function that compares stencil data against existing stencil data for pixels whose surface normal is facing away from the camera. Properties | Improve this Doc View Source BackFace Gets or sets a value indicating how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera. Declaration public D3D11DepthStencilOperationDesc BackFace { get; set; } Property Value Type Description D3D11DepthStencilOperationDesc | Improve this Doc View Source Default Gets default depth-stencil-state values Declaration public static D3D11DepthStencilDesc Default { get; } Property Value Type Description D3D11DepthStencilDesc | Improve this Doc View Source DepthFunction Gets or sets a function that compares depth data against existing depth data. Declaration public D3D11ComparisonFunction DepthFunction { get; set; } Property Value Type Description D3D11ComparisonFunction | Improve this Doc View Source DepthWriteMask Gets or sets a portion of the depth-stencil buffer that can be modified by depth data. Declaration public D3D11DepthWriteMask DepthWriteMask { get; set; } Property Value Type Description D3D11DepthWriteMask | Improve this Doc View Source FrontFace Gets or sets a value indicating how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera. Declaration public D3D11DepthStencilOperationDesc FrontFace { get; set; } Property Value Type Description D3D11DepthStencilOperationDesc | Improve this Doc View Source IsDepthEnabled Gets or sets a value indicating whether depth testing is enabled. Declaration public bool IsDepthEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsStencilEnabled Gets or sets a value indicating whether stencil testing is enabled. Declaration public bool IsStencilEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source StencilReadMask Gets or sets a portion of the depth-stencil buffer for reading stencil data. Declaration public byte StencilReadMask { get; set; } Property Value Type Description Byte | Improve this Doc View Source StencilWriteMask Gets or sets a portion of the depth-stencil buffer for writing stencil data. Declaration public byte StencilWriteMask { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(D3D11DepthStencilDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11DepthStencilDesc other) Parameters Type Name Description D3D11DepthStencilDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11DepthStencilDesc, D3D11DepthStencilDesc) Compares two D3D11DepthStencilDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11DepthStencilDesc left, D3D11DepthStencilDesc right) Parameters Type Name Description D3D11DepthStencilDesc left The left D3D11DepthStencilDesc to compare. D3D11DepthStencilDesc right The right D3D11DepthStencilDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11DepthStencilDesc, D3D11DepthStencilDesc) Compares two D3D11DepthStencilDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11DepthStencilDesc left, D3D11DepthStencilDesc right) Parameters Type Name Description D3D11DepthStencilDesc left The left D3D11DepthStencilDesc to compare. D3D11DepthStencilDesc right The right D3D11DepthStencilDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CullMode.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CullMode.html",
    "title": "Enum D3D11CullMode",
    "keywords": "Enum D3D11CullMode Indicates triangles facing a particular direction are not drawn. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11CullMode Fields Name Description Back Do not draw triangles that are back-facing. Front Do not draw triangles that are front-facing. None Always draw all triangles. Unspecified Unspecified mode."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.html",
    "title": "Enum D3D11CreateDeviceOptions",
    "keywords": "Enum D3D11CreateDeviceOptions Describes parameters that are used to create a device. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11CreateDeviceOptions Fields Name Description BgraSupport Required for Direct2D interoperability with Direct3D resources. Debug Creates a device that supports the debug layer. Debuggable Causes the device and driver to keep information that you can use for shader debugging. The exact impact from this flag will vary from driver to driver. DisableGpuTimeout Use this flag if the device will produce GPU workloads that take more than two seconds to complete, and you want the operating system to allow them to successfully finish. None No option. PreventAlteringLayerSettingsFromRegistry Causes the Direct3D runtime to ignore registry settings that turn on the debug layer. PreventInternalThreadingOptimizations Prevents multiple threads from being created. SingleThreaded Use this flag if your application will only call methods of Direct3D 11 interfaces from a single thread. By default, the D3D11Device object is thread-safe. SwitchToRef This flag is not supported in Direct3D 11. VideoSupport Forces the creation of the Direct3D device to fail if the display driver is not implemented to the WDDM."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions.html",
    "title": "Enum D3D11CpuAccessOptions",
    "keywords": "Enum D3D11CpuAccessOptions Specifies the types of CPU access allowed for a resource. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11CpuAccessOptions Fields Name Description None No option. Read The resource is to be mappable so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage. Write The resource is to be mappable so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CounterType.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CounterType.html",
    "title": "Enum D3D11CounterType",
    "keywords": "Enum D3D11CounterType Options for performance counters. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11CounterType Fields Name Description DeviceDependent0 Define a performance counter that is dependent on the hardware device. None No option."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.html",
    "title": "Struct D3D11BufferRtv",
    "keywords": "Struct D3D11BufferRtv Specifies the elements in a buffer resource to use in a render-target view. Implements IEquatable < D3D11BufferRtv > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public struct D3D11BufferRtv : IEquatable<D3D11BufferRtv> Properties | Improve this Doc View Source ElementOffset Gets or sets the offset of the first element in the view to access, relative to element 0. Declaration public uint ElementOffset { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source ElementWidth Gets or sets the width of each element (in bytes). This can be determined from the format stored in the render-target-view description. Declaration public uint ElementWidth { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source FirstElement Gets or sets the number of bytes between the beginning of the buffer and the first element to access. Declaration public uint FirstElement { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source NumElements Gets or sets the total number of elements in the view. Declaration public uint NumElements { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D3D11BufferRtv) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D3D11BufferRtv other) Parameters Type Name Description D3D11BufferRtv other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D3D11BufferRtv, D3D11BufferRtv) Compares two D3D11BufferRtv objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D3D11BufferRtv left, D3D11BufferRtv right) Parameters Type Name Description D3D11BufferRtv left The left D3D11BufferRtv to compare. D3D11BufferRtv right The right D3D11BufferRtv to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D3D11BufferRtv, D3D11BufferRtv) Compares two D3D11BufferRtv objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D3D11BufferRtv left, D3D11BufferRtv right) Parameters Type Name Description D3D11BufferRtv left The left D3D11BufferRtv to compare. D3D11BufferRtv right The right D3D11BufferRtv to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions.html",
    "title": "Enum D3D11BufferExSrvOptions",
    "keywords": "Enum D3D11BufferExSrvOptions Identifies how to view a buffer resource. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11BufferExSrvOptions Fields Name Description None No option. Raw View the buffer as raw."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11BindOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11BindOptions.html",
    "title": "Enum D3D11BindOptions",
    "keywords": "Enum D3D11BindOptions Identifies how to bind a resource to the pipeline. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11BindOptions Fields Name Description ConstantBuffer Bind a buffer as a constant buffer to a shader stage; this flag may NOT be combined with any other bind flag. Decoder Set this flag to indicate that a 2D texture is used to receive output from the decoder API. DepthStencil Bind a texture as a depth-stencil target for the output-merger stage. IndexBuffer Bind a buffer as an index buffer to the input-assembler stage. None No option. RenderTarget Bind a texture as a render target for the output-merger stage. ShaderResource Bind a buffer or texture to a shader stage; this flag cannot be used with the WriteNoOverwrite flag. StreamOutput Bind an output buffer for the stream-output stage. UnorderedAccess Bind an unordered access resource. VertexBuffer Bind a buffer as a vertex buffer to the input-assembler stage. VideoEncoder Set this flag to indicate that a 2D texture is used to receive input from the video encoder API."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Asynchronous.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Asynchronous.html",
    "title": "Class D3D11Asynchronous",
    "keywords": "Class D3D11Asynchronous This interface encapsulates methods for retrieving data from the GPU asynchronously. Inheritance Object D3D11DeviceChild D3D11Asynchronous D3D11Counter D3D11Predicate D3D11Query Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.Handle D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public abstract class D3D11Asynchronous : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source DataSize Gets the size of the data (in bytes) that is output when calling GetData . Declaration public uint DataSize { get; } Property Value Type Description UInt32 Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions.html",
    "title": "Enum D3D11AsyncGetDataOptions",
    "keywords": "Enum D3D11AsyncGetDataOptions Optional flags that control the behavior of GetData. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11AsyncGetDataOptions Fields Name Description DoNotFlush Do not flush the command buffer. This can potentially cause an infinite loop. None No option."
  },
  "api/JeremyAnsel.DirectX.D3D10.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.html",
    "title": "Namespace JeremyAnsel.DirectX.D3D10",
    "keywords": "Namespace JeremyAnsel.DirectX.D3D10 Classes D3D10Device1 The device interface represents a virtual adapter for Direct3D 10.1; it is used to perform rendering and create Direct3D resources. D3D10Error D3D10 error codes. D3D10Utils Utility methods. Interfaces ID3D10Releasable Defines a method to release the managed reference to the COM interface. Enums D3D10CreateDeviceOptions Device creation options. D3D10DriverType The device-driver type. D3D10FeatureLevel The version of hardware acceleration requested."
  },
  "api/JeremyAnsel.DirectX.D3D10.ID3D10Releasable.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.ID3D10Releasable.html",
    "title": "Interface ID3D10Releasable",
    "keywords": "Interface ID3D10Releasable Defines a method to release the managed reference to the COM interface. Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public interface ID3D10Releasable Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources. Declaration void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM interface. Declaration void Release()"
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10Utils.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10Utils.html",
    "title": "Class D3D10Utils",
    "keywords": "Class D3D10Utils Utility methods. Inheritance Object D3D10Utils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public static class D3D10Utils Methods | Improve this Doc View Source DisposeAndNull<T>(ref T) Immediately releases the unmanaged resources. Declaration public static void DisposeAndNull<T>(ref T o) where T : class, ID3D10Releasable Parameters Type Name Description T o The object. Type Parameters Name Description T A releasable type. | Improve this Doc View Source ReleaseAndNull<T>(ref T) Releases the managed reference to the COM interface. Declaration public static void ReleaseAndNull<T>(ref T o) where T : class, ID3D10Releasable Parameters Type Name Description T o The COM interface. Type Parameters Name Description T A releasable type."
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10FeatureLevel.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10FeatureLevel.html",
    "title": "Enum D3D10FeatureLevel",
    "keywords": "Enum D3D10FeatureLevel The version of hardware acceleration requested. Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public enum D3D10FeatureLevel Fields Name Description FeatureLevel100 The hardware supports Direct3D 10.0 features. FeatureLevel101 The hardware supports Direct3D 10.1 features. FeatureLevel91 The hardware supports 9.1 feature level. FeatureLevel92 The hardware supports 9.2 feature level. FeatureLevel93 The hardware supports 9.3 feature level."
  },
  "api/JeremyAnsel.DirectX.D3D10.D3D10Error.html": {
    "href": "api/JeremyAnsel.DirectX.D3D10.D3D10Error.html",
    "title": "Class D3D10Error",
    "keywords": "Class D3D10Error D3D10 error codes. Inheritance Object D3D10Error Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D10 Assembly : JeremyAnsel.DirectX.D3D10.dll Syntax public static class D3D10Error Fields | Improve this Doc View Source FileNotFound The specified file was not found. Declaration public const int FileNotFound = -2005336062 Field Value Type Description Int32 | Improve this Doc View Source TooManyUniqueStateObjects The application has exceeded the maximum number of unique state objects per Direct3D device. The limit is 4096 for feature levels up to 11.1. Declaration public const int TooManyUniqueStateObjects = -2005336063 Field Value Type Description Int32"
  },
  "api/JeremyAnsel.DirectX.D2D1.ID2D1Releasable.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.ID2D1Releasable.html",
    "title": "Interface ID2D1Releasable",
    "keywords": "Interface ID2D1Releasable Defines a method to release the managed reference to the COM interface. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public interface ID2D1Releasable Methods | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources. Declaration void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM interface. Declaration void Release()"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1WindowStates.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1WindowStates.html",
    "title": "Enum D2D1WindowStates",
    "keywords": "Enum D2D1WindowStates Describes whether a window is occluded. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1WindowStates Fields Name Description None The window is not occluded. Occluded The window is occluded."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Vector4F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Vector4F.html",
    "title": "Struct D2D1Vector4F",
    "keywords": "Struct D2D1Vector4F A vector of 4 FLOAT values (x, y, z, w). Implements IEquatable < D2D1Vector4F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Vector4F : IEquatable<D2D1Vector4F> Constructors | Improve this Doc View Source D2D1Vector4F(Single, Single, Single, Single) Initializes a new instance of the D2D1Vector4F struct. Declaration public D2D1Vector4F(float x, float y, float z, float w) Parameters Type Name Description Single x The x value of the vector. Single y The y value of the vector. Single z The z value of the vector. Single w The w value of the vector. Properties | Improve this Doc View Source W Gets or sets the w value of the vector. Declaration public float W { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x value of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y value of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z value of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Vector4F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Vector4F other) Parameters Type Name Description D2D1Vector4F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Vector4F, D2D1Vector4F) Compares two D2D1Vector4F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Vector4F left, D2D1Vector4F right) Parameters Type Name Description D2D1Vector4F left The left D2D1Vector4F to compare. D2D1Vector4F right The right D2D1Vector4F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Vector4F, D2D1Vector4F) Compares two D2D1Vector4F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Vector4F left, D2D1Vector4F right) Parameters Type Name Description D2D1Vector4F left The left D2D1Vector4F to compare. D2D1Vector4F right The right D2D1Vector4F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Vector3F.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Vector3F.html",
    "title": "Struct D2D1Vector3F",
    "keywords": "Struct D2D1Vector3F A vector of 3 FLOAT values (x, y, z). Implements IEquatable < D2D1Vector3F > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Vector3F : IEquatable<D2D1Vector3F> Constructors | Improve this Doc View Source D2D1Vector3F(Single, Single, Single) Initializes a new instance of the D2D1Vector3F struct. Declaration public D2D1Vector3F(float x, float y, float z) Parameters Type Name Description Single x The x value of the vector. Single y The y value of the vector. Single z The z value of the vector. Properties | Improve this Doc View Source X Gets or sets the x value of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y value of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z value of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1Vector3F) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Vector3F other) Parameters Type Name Description D2D1Vector3F other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Vector3F, D2D1Vector3F) Compares two D2D1Vector3F objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Vector3F left, D2D1Vector3F right) Parameters Type Name Description D2D1Vector3F left The left D2D1Vector3F to compare. D2D1Vector3F right The right D2D1Vector3F to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Vector3F, D2D1Vector3F) Compares two D2D1Vector3F objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Vector3F left, D2D1Vector3F right) Parameters Type Name Description D2D1Vector3F left The left D2D1Vector3F to compare. D2D1Vector3F right The right D2D1Vector3F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1TextAntialiasMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1TextAntialiasMode.html",
    "title": "Enum D2D1TextAntialiasMode",
    "keywords": "Enum D2D1TextAntialiasMode Describes the antialiasing mode used for drawing text. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1TextAntialiasMode Fields Name Description Aliased Render text aliased. ClearType Render text using ClearType. Default Render text using the current system setting. Grayscale Render text using gray-scale."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1TessellationSink.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1TessellationSink.html",
    "title": "Class D2D1TessellationSink",
    "keywords": "Class D2D1TessellationSink Populates an D2D1Mesh object with triangles. Inheritance Object D2D1TessellationSink Implements IDisposable ID2D1Releasable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1TessellationSink : IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public object Handle { get; } Property Value Type Description Object Methods | Improve this Doc View Source AddTriangles(D2D1Triangle[]) Copies the specified triangles to the sink. Declaration public void AddTriangles(D2D1Triangle[] triangles) Parameters Type Name Description D2D1Triangle [] triangles An array of D2D1Triangle structures that describe the triangles to add to the sink. | Improve this Doc View Source Close() Closes the sink and returns its error status. Declaration public void Close() | Improve this Doc View Source Dispose() Immediately releases the unmanaged resources used by the D2D1TessellationSink object. Declaration public void Dispose() | Improve this Doc View Source Release() Releases the managed reference to the COM D2D1 interface. Declaration public void Release() | Improve this Doc View Source ToBoolean() Gets a boolean indicating if the handle is not null. Declaration public bool ToBoolean() Returns Type Description Boolean A boolean Operators | Improve this Doc View Source Implicit(D2D1TessellationSink to Boolean) Gets a boolean indicating if the handle is not null. Declaration public static implicit operator bool (D2D1TessellationSink value) Parameters Type Name Description D2D1TessellationSink value A D2D1 object. Returns Type Description Boolean A boolean Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RectF.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RectF.html",
    "title": "Struct D2D1RectF",
    "keywords": "Struct D2D1RectF Represents a rectangle defined by the coordinates of the upper-left corner (left, top) and the coordinates of the lower-right corner (right, bottom). Implements IEquatable < D2D1RectF > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1RectF : IEquatable<D2D1RectF> Constructors | Improve this Doc View Source D2D1RectF(Single, Single, Single, Single) Initializes a new instance of the D2D1RectF struct. Declaration public D2D1RectF(float left, float top, float right, float bottom) Parameters Type Name Description Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of the rectangle. Declaration public float Bottom { get; set; } Property Value Type Description Single | Improve this Doc View Source Infinite Gets an infinite rectangle. Declaration public static D2D1RectF Infinite { get; } Property Value Type Description D2D1RectF | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of the rectangle. Declaration public float Left { get; set; } Property Value Type Description Single | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of the rectangle. Declaration public float Right { get; set; } Property Value Type Description Single | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of the rectangle. Declaration public float Top { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1RectF) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1RectF other) Parameters Type Name Description D2D1RectF other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1RectF, D2D1RectF) Compares two D2D1RectF objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1RectF left, D2D1RectF right) Parameters Type Name Description D2D1RectF left The left D2D1RectF to compare. D2D1RectF right The right D2D1RectF to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1RectF, D2D1RectF) Compares two D2D1RectF objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1RectF left, D2D1RectF right) Parameters Type Name Description D2D1RectF left The left D2D1RectF to compare. D2D1RectF right The right D2D1Vector4F to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RectangleGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RectangleGeometry.html",
    "title": "Class D2D1RectangleGeometry",
    "keywords": "Class D2D1RectangleGeometry Describes a two-dimensional rectangle. Inheritance Object D2D1Resource D2D1Geometry D2D1RectangleGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1RectangleGeometry : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source Rect Gets the rectangle that describes the rectangle geometry's dimensions. Declaration public D2D1RectF Rect { get; } Property Value Type Description D2D1RectF Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Point2U.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Point2U.html",
    "title": "Struct D2D1Point2U",
    "keywords": "Struct D2D1Point2U Represents an x-coordinate and y-coordinate pair in two-dimensional space. Implements IEquatable < D2D1Point2U > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Point2U : IEquatable<D2D1Point2U> Constructors | Improve this Doc View Source D2D1Point2U(UInt32, UInt32) Initializes a new instance of the D2D1Point2U struct. Declaration public D2D1Point2U(uint x, uint y) Parameters Type Name Description UInt32 x The x-coordinate of the point. UInt32 y The y-coordinate of the point. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public uint X { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public uint Y { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D2D1Point2U) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Point2U other) Parameters Type Name Description D2D1Point2U other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Point2U, D2D1Point2U) Compares two D2D1Point2U objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Point2U left, D2D1Point2U right) Parameters Type Name Description D2D1Point2U left The left D2D1Point2U to compare. D2D1Point2U right The right D2D1Point2U to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Point2U, D2D1Point2U) Compares two D2D1Point2U objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Point2U left, D2D1Point2U right) Parameters Type Name Description D2D1Point2U left The left D2D1Point2U to compare. D2D1Point2U right The right D2D1Point2U to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1Point2L.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1Point2L.html",
    "title": "Struct D2D1Point2L",
    "keywords": "Struct D2D1Point2L Represents an x-coordinate and y-coordinate pair in two-dimensional space. Implements IEquatable < D2D1Point2L > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1Point2L : IEquatable<D2D1Point2L> Constructors | Improve this Doc View Source D2D1Point2L(Int32, Int32) Initializes a new instance of the D2D1Point2L struct. Declaration public D2D1Point2L(int x, int y) Parameters Type Name Description Int32 x The x-coordinate of the point. Int32 y The y-coordinate of the point. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public int Y { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(D2D1Point2L) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1Point2L other) Parameters Type Name Description D2D1Point2L other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1Point2L, D2D1Point2L) Compares two D2D1Point2L objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1Point2L left, D2D1Point2L right) Parameters Type Name Description D2D1Point2L left The left D2D1Point2L to compare. D2D1Point2L right The right D2D1Point2L to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1Point2L, D2D1Point2L) Compares two D2D1Point2L objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1Point2L left, D2D1Point2L right) Parameters Type Name Description D2D1Point2L left The left D2D1Point2L to compare. D2D1Point2L right The right D2D1Point2L to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1KnownColor.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1KnownColor.html",
    "title": "Enum D2D1KnownColor",
    "keywords": "Enum D2D1KnownColor Defines a set of constants that represents known colors and provides convenience methods for instantiating different colors. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1KnownColor : uint Fields Name Description AliceBlue The Alice Blue color. AntiqueWhite The Antique White color. Aqua The Aqua color. Aquamarine The Aquamarine color. Azure The Azure color. Beige The Beige color. Bisque The Bisque color. Black The Black color. BlanchedAlmond The Blanched Almond color. Blue The Blue color. BlueViolet The Blue Violet color. Brown The Brown color. BurlyWood The Burly Wood color. CadetBlue the Cadet Blue color. Chartreuse The Chartreuse color. Chocolate The Chocolate color. Coral The Coral color. CornflowerBlue The Cornflower Blue color. Cornsilk The Cornsilk color. Crimson The Crimson color. Cyan The Cyan color. DarkBlue The Dark Blue color. DarkCyan The Dark Cyan color. DarkGoldenrod The Dark Goldenrod color. DarkGray The Dark Gray color. DarkGreen The Dark Green color. DarkKhaki The Dark Khaki color. DarkMagenta The Dark Magenta color. DarkOliveGreen The Dark Olive Green color. DarkOrange The Dark Orange color. DarkOrchid The Dark Orchid color. DarkRed The Dark Red color. DarkSalmon The Dark Salmon color. DarkSeaGreen The Dark Sea Green color. DarkSlateBlue The Dark Slate Blue color. DarkSlateGray The Dark Slate Gray color. DarkTurquoise The Dark Turquoise color. DarkViolet The Dark Violet color. DeepPink The Deep Pink color. DeepSkyBlue The Deep Sky Blue color. DimGray The Dim Gray color. DodgerBlue The Dodger Blue color. Firebrick The Firebrick color. FloralWhite The Floral White color. ForestGreen The Forest Green color. Fuchsia The Fuchsia color. Gainsboro The Gainsboro color. GhostWhite The Ghost White color. Gold The Gold color. Goldenrod The Goldenrod color. Gray The Gray color. Green The Green color. GreenYellow The Green Yellow color. Honeydew The Honeydew color. HotPink The Hot Pink color. IndianRed The Indian Red color. Indigo The Indigo color. Ivory The Ivory color. Khaki The Khaki color. Lavender The Lavender color. LavenderBlush The Lavender Blush color. LawnGreen The Lawn Green color. LemonChiffon The Lemon Chiffon color. LightBlue The Light Blue color. LightCoral The Light Coral color. LightCyan The Light Cyan color. LightGoldenrodYellow The Light Goldenrod Yellow color. LightGray The Light Gray color. LightGreen The Light Green color. LightPink The Light Pink color. LightSalmon The Light Salmon color. LightSeaGreen The Light Sea Green color. LightSkyBlue The Light Sky Blue color. LightSlateGray The Light Slate Gray color. LightSteelBlue The Light Steel Blue color. LightYellow The Light Yellow color. Lime The Lime color. LimeGreen The Lime Green color. Linen The Linen color. Magenta The Magenta color. Maroon The Maroon color. MediumAquamarine The Medium Aquamarine color. MediumBlue The Medium Blue color. MediumOrchid The Medium Orchid color. MediumPurple The Medium Purple color. MediumSeaGreen The Medium Sea Green color. MediumSlateBlue The Medium Slate Blue color. MediumSpringGreen The Medium Spring Green color. MediumTurquoise The Medium Turquoise color. MediumVioletRed The Medium Violet Red color. MidnightBlue The Midnight Blue color. MintCream The Mint Cream color. MistyRose The Misty Rose color. Moccasin The Moccasin color. NavajoWhite The Navajo White color. Navy The Navy color. OldLace The Old Lace color. Olive The Olive color. OliveDrab The Olive Drab color. Orange The Orange color. OrangeRed The Orange Red color. Orchid The Orchid color. PaleGoldenrod The Pale Goldenrod color. PaleGreen The Pale Green color. PaleTurquoise The Pale Turquoise color. PaleVioletRed The Pale Violet Red color. PapayaWhip The Papaya Whip color. PeachPuff The Peach Puff color. Peru The Peru color. Pink The Pink color. Plum The Plum color. PowderBlue The Powder Blue color. Purple The Purple color. Red The Red color. RosyBrown The Rosy Brown color. RoyalBlue The Royal Blue color. SaddleBrown The Saddle Brown color. Salmon The Salmon color. SandyBrown The Sandy Brown color. SeaGreen The Sea Green color. SeaShell The Sea Shell color. Sienna The Sienna color. Silver The Silver color. SkyBlue The Sky Blue color. SlateBlue The Slate Blue color. SlateGray The Slate Gray color. Snow The Snow color. SpringGreen The Spring Green color. SteelBlue The Steel Blue color. Tan The Tan color. Teal The Teal color. Thistle The Thistle color. Tomato The Tomato color. Turquoise The Turquoise color. Violet The Violet color. Wheat The Wheat color. White The White color. WhiteSmoke The White Smoke color. Yellow The Yellow color. YellowGreen The Yellow Green color."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11Constants.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11Constants.html",
    "title": "Class D3D11Constants",
    "keywords": "Class D3D11Constants Constants generated from the D3D11 hardware spec. Inheritance Object D3D11Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public static class D3D11Constants Fields | Improve this Doc View Source ArrayAxisAddressRangeBitCount Array Axis Address Range Bit Count. Declaration public const uint ArrayAxisAddressRangeBitCount = 9U Field Value Type Description UInt32 | Improve this Doc View Source ClipOrCullDistanceCull Clip Or Cull Distance Cull. Declaration public const uint ClipOrCullDistanceCull = 8U Field Value Type Description UInt32 | Improve this Doc View Source ClipOrCullDistanceElementCount Clip Or Cull Distance Element Count. Declaration public const uint ClipOrCullDistanceElementCount = 2U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucker13MaxBytesTgsmWritablePerThread Compute Shader 4X Bucker 13 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucker13MaxBytesTgsmWritablePerThread = 48U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket00MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 00 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket00MaxBytesTgsmWritablePerThread = 256U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket00MaxNumThreadsPerGroup Compute Shader 4X Bucket 00 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket00MaxNumThreadsPerGroup = 64U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket01MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 01 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket01MaxBytesTgsmWritablePerThread = 240U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket01MaxNumThreadsPerGroup Compute Shader 4X Bucket 01 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket01MaxNumThreadsPerGroup = 68U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket02MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 02 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket02MaxBytesTgsmWritablePerThread = 224U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket02MaxNumThreadsPerGroup Compute Shader 4X Bucket 02 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket02MaxNumThreadsPerGroup = 72U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket03MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 03 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket03MaxBytesTgsmWritablePerThread = 208U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket03MaxNumThreadsPerGroup Compute Shader 4X Bucket 03 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket03MaxNumThreadsPerGroup = 76U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket04MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 04 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket04MaxBytesTgsmWritablePerThread = 192U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket04MaxNumThreadsPerGroup Compute Shader 4X Bucket 04 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket04MaxNumThreadsPerGroup = 84U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket05MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 05 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket05MaxBytesTgsmWritablePerThread = 176U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket05MaxNumThreadsPerGroup Compute Shader 4X Bucket 05 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket05MaxNumThreadsPerGroup = 92U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket06MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 06 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket06MaxBytesTgsmWritablePerThread = 160U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket06MaxNumThreadsPerGroup Compute Shader 4X Bucket 06 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket06MaxNumThreadsPerGroup = 100U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket07MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 07 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket07MaxBytesTgsmWritablePerThread = 144U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket07MaxNumThreadsPerGroup Compute Shader 4X Bucket 07 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket07MaxNumThreadsPerGroup = 112U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket08MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 08 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket08MaxBytesTgsmWritablePerThread = 128U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket08MaxNumThreadsPerGroup Compute Shader 4X Bucket 08 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket08MaxNumThreadsPerGroup = 128U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket09MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 09 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket09MaxBytesTgsmWritablePerThread = 112U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket09MaxNumThreadsPerGroup Compute Shader 4X Bucket 09 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket09MaxNumThreadsPerGroup = 144U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket10MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 10 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket10MaxBytesTgsmWritablePerThread = 96U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket10MaxNumThreadsPerGroup Compute Shader 4X Bucket 10 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket10MaxNumThreadsPerGroup = 168U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket11MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 11 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket11MaxBytesTgsmWritablePerThread = 80U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket11MaxNumThreadsPerGroup Compute Shader 4X Bucket 11 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket11MaxNumThreadsPerGroup = 204U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket12MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 12 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket12MaxBytesTgsmWritablePerThread = 64U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket12MaxThreadsPerGroup Compute Shader 4X Bucket 12 Max Threads Per Group. Declaration public const uint ComputeShader4XBucket12MaxThreadsPerGroup = 256U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket13MaxNumThreadsPerGroup Compute Shader 4X Bucket 13 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket13MaxNumThreadsPerGroup = 340U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket14MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 14 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket14MaxBytesTgsmWritablePerThread = 32U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket14MaxNumThreadsPerGroup Compute Shader 4X Bucket 14 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket14MaxNumThreadsPerGroup = 512U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket15MaxBytesTgsmWritablePerThread Compute Shader 4X Bucket 15 Max Bytes Tgsm Writable Per Thread. Declaration public const uint ComputeShader4XBucket15MaxBytesTgsmWritablePerThread = 16U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XBucket15MaxNumThreadsPerGroup Compute Shader 4X Bucket 15 Max Num Threads Per Group. Declaration public const uint ComputeShader4XBucket15MaxNumThreadsPerGroup = 768U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XDispatchMaxThreadGroupsInZDimension Compute Shader 4X Dispatch Max Thread Groups In Z Dimension. Declaration public const uint ComputeShader4XDispatchMaxThreadGroupsInZDimension = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XRawUavByteAlignment Compute Shader 4X Raw UAV Byte Alignment. Declaration public const uint ComputeShader4XRawUavByteAlignment = 256U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XThreadGroupMaxThreadsPerGroup Compute Shader 4X Thread Group Max Threads Per Group. Declaration public const uint ComputeShader4XThreadGroupMaxThreadsPerGroup = 768U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XThreadGroupMaxX Compute Shader 4X Thread Group Max X. Declaration public const uint ComputeShader4XThreadGroupMaxX = 768U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XThreadGroupMaxY Compute Shader 4X Thread Group Max Y. Declaration public const uint ComputeShader4XThreadGroupMaxY = 768U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShader4XUavRegisterCount Compute Shader 4X UAV Register Count. Declaration public const uint ComputeShader4XUavRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferApiSlotCount Compute Shader Constant Buffer Api Slot Count. Declaration public const uint ComputeShaderConstantBufferApiSlotCount = 14U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferComponentBitCount Compute Shader Constant Buffer Component Bit Count. Declaration public const uint ComputeShaderConstantBufferComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferComponents Compute Shader Constant Buffer Components. Declaration public const uint ComputeShaderConstantBufferComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferHardwareSlotCount Compute Shader Constant Buffer Hardware Slot Count. Declaration public const uint ComputeShaderConstantBufferHardwareSlotCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferPartialUpdateExtentsByteAlignment Compute Shader Constant Buffer Partial Update Extents Byte Alignment. Declaration public const uint ComputeShaderConstantBufferPartialUpdateExtentsByteAlignment = 16U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferRegisterComponents Compute Shader Constant Buffer Register Components. Declaration public const uint ComputeShaderConstantBufferRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferRegisterCount Compute Shader Constant Buffer Register Count. Declaration public const uint ComputeShaderConstantBufferRegisterCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferRegisterReadPorts Compute Shader Constant Buffer Register Read Ports. Declaration public const uint ComputeShaderConstantBufferRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderConstantBufferRegisterReadsPerInstance Compute Shader Constant Buffer Register Reads Per Instance. Declaration public const uint ComputeShaderConstantBufferRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderDispatchMaxThreadGroupsPerDimension Compute Shader Dispatch Max Thread Groups Per Dimension. Declaration public const uint ComputeShaderDispatchMaxThreadGroupsPerDimension = 65535U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderFlowControlNestingLimit Compute Shader Flow Control Nesting Limit. Declaration public const uint ComputeShaderFlowControlNestingLimit = 64U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderImmediateConstantBufferRegisterComponents Compute Shader Immediate Constant Buffer Register Components. Declaration public const uint ComputeShaderImmediateConstantBufferRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderImmediateConstantBufferRegisterCount Compute Shader Immediate Constant Buffer Register Count. Declaration public const uint ComputeShaderImmediateConstantBufferRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderImmediateConstantBufferRegisterReadPorts Compute Shader Immediate Constant Buffer Register Read Ports. Declaration public const uint ComputeShaderImmediateConstantBufferRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderImmediateConstantBufferRegisterReadsPerInstance Compute Shader Immediate Constant Buffer Register Reads Per Instance. Declaration public const uint ComputeShaderImmediateConstantBufferRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderImmediateValueComponentBitCount Compute Shader Immediate Value Component Bit Count. Declaration public const uint ComputeShaderImmediateValueComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderInputResourceRegisterComponents Compute Shader Input Resource Register Components. Declaration public const uint ComputeShaderInputResourceRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderInputResourceRegisterCount Compute Shader Input Resource Register Count. Declaration public const uint ComputeShaderInputResourceRegisterCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderInputResourceRegisterReadPorts Compute Shader Input Resource Register Read Ports. Declaration public const uint ComputeShaderInputResourceRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderInputResourceRegisterReadsPerInstance Compute Shader Input Resource Register Reads Per Instance. Declaration public const uint ComputeShaderInputResourceRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderInputResourceSlotCount Compute Shader Input Resource Slot Count. Declaration public const uint ComputeShaderInputResourceSlotCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSamplerRegisterComponents Compute Shader Sampler Register Components. Declaration public const uint ComputeShaderSamplerRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSamplerRegisterCount Compute Shader Sampler Register Count. Declaration public const uint ComputeShaderSamplerRegisterCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSamplerRegisterReadPorts Compute Shader Sampler Register Read Ports. Declaration public const uint ComputeShaderSamplerRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSamplerRegisterReadsPerInstance Compute Shader Sampler Register Reads Per Instance. Declaration public const uint ComputeShaderSamplerRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSamplerSlotCount Compute Shader Sampler Slot Count. Declaration public const uint ComputeShaderSamplerSlotCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderSubroutineNestingLimit Compute Shader Subroutine Nesting Limit. Declaration public const uint ComputeShaderSubroutineNestingLimit = 32U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTempRegisterComponentBitCount Compute Shader Temp Register Component Bit Count. Declaration public const uint ComputeShaderTempRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTempRegisterComponents Compute Shader Temp Register Components. Declaration public const uint ComputeShaderTempRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTempRegisterCount Compute Shader Temp Register Count. Declaration public const uint ComputeShaderTempRegisterCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTempRegisterReadPorts Compute Shader Temp Register Read Ports. Declaration public const uint ComputeShaderTempRegisterReadPorts = 3U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTempRegisterReadsPerInstance Compute Shader Temp Register Reads Per Instance. Declaration public const uint ComputeShaderTempRegisterReadsPerInstance = 3U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTexCoordRangeReductionMax Compute Shader Tex Coord Range Reduction Max. Declaration public const int ComputeShaderTexCoordRangeReductionMax = 10 Field Value Type Description Int32 | Improve this Doc View Source ComputeShaderTexCoordRangeReductionMin Compute Shader Tex Coord Range Reduction Min. Declaration public const int ComputeShaderTexCoordRangeReductionMin = -10 Field Value Type Description Int32 | Improve this Doc View Source ComputeShaderTexelOffsetMaxNegative Compute Shader Texel Offset Max Negative. Declaration public const int ComputeShaderTexelOffsetMaxNegative = -8 Field Value Type Description Int32 | Improve this Doc View Source ComputeShaderTexelOffsetMaxPositive Compute Shader Texel Offset Max Positive. Declaration public const int ComputeShaderTexelOffsetMaxPositive = 7 Field Value Type Description Int32 | Improve this Doc View Source ComputeShaderTgsmRegisterCount Compute Shader Tgsm Register Count. Declaration public const uint ComputeShaderTgsmRegisterCount = 8192U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTgsmRegisterReadsPerInstance Compute Shader Tgsm Register Reads Per Instance. Declaration public const uint ComputeShaderTgsmRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTgsmResourceRegisterComponents Compute Shader Tgsm Resource Register Components. Declaration public const uint ComputeShaderTgsmResourceRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderTgsmResourceRegisterReadPorts Compute Shader Tgsm Resource Register Read Ports. Declaration public const uint ComputeShaderTgsmResourceRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupIdRegisterComponents Compute Shader Thread Group Id Register Components. Declaration public const uint ComputeShaderThreadGroupIdRegisterComponents = 3U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupIdRegisterCount Compute Shader Thread Group Id Register Count. Declaration public const uint ComputeShaderThreadGroupIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMaxThreadsPerGroup Compute Shader Thread Group Max Threads Per Group. Declaration public const uint ComputeShaderThreadGroupMaxThreadsPerGroup = 1024U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMaxX Compute Shader Thread Group Max X. Declaration public const uint ComputeShaderThreadGroupMaxX = 1024U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMaxY Compute Shader Thread Group Max Y. Declaration public const uint ComputeShaderThreadGroupMaxY = 1024U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMaxZ Compute Shader Thread Group Max Z. Declaration public const uint ComputeShaderThreadGroupMaxZ = 64U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMinX Compute Shader Thread Group Min X. Declaration public const uint ComputeShaderThreadGroupMinX = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMinY Compute Shader Thread Group Min Y. Declaration public const uint ComputeShaderThreadGroupMinY = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadGroupMinZ Compute Shader Thread Group Min Z. Declaration public const uint ComputeShaderThreadGroupMinZ = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdInGroupFlattenedRegisterComponents Compute Shader Thread Id In Group Flattened Register Components. Declaration public const uint ComputeShaderThreadIdInGroupFlattenedRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdInGroupFlattenedRegisterCount Compute Shader Thread Id In Group Flattened Register Count. Declaration public const uint ComputeShaderThreadIdInGroupFlattenedRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdInGroupRegisterComponents Compute Shader Thread Id In Group Register Components. Declaration public const uint ComputeShaderThreadIdInGroupRegisterComponents = 3U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdInGroupRegisterCount Compute Shader Thread Id In Group Register Count. Declaration public const uint ComputeShaderThreadIdInGroupRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdRegisterComponents Compute Shader Thread Id Register Components. Declaration public const uint ComputeShaderThreadIdRegisterComponents = 3U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadIdRegisterCount Compute Shader Thread Id Register Count. Declaration public const uint ComputeShaderThreadIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source ComputeShaderThreadLocalTempRegisterPool Compute Shader Thread Local Temp Register Pool. Declaration public const uint ComputeShaderThreadLocalTempRegisterPool = 16384U Field Value Type Description UInt32 | Improve this Doc View Source D3D101DefaultSampleMask D3D10.1 Default Sample Mask. Declaration public const uint D3D101DefaultSampleMask = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D101Float16FusedToleranceInUlp D3D10.1 Float16 Fused Tolerance In Ulp. Declaration public const float D3D101Float16FusedToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source D3D101Float32ToIntegerToleranceInUlp D3D10.1 Float32 To Integer Tolerance In Ulp. Declaration public const float D3D101Float32ToIntegerToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source D3D101GeometryShaderInputRegisterCount D3D10.1 Geometry Shader Input Register Count. Declaration public const uint D3D101GeometryShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101InputAssemblerVertexInputResourceSlotCount D3D10.1 Input Assembler Vertex Input Resource Slot Count. Declaration public const uint D3D101InputAssemblerVertexInputResourceSlotCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101InputAssemblerVertexInputStructureElementCount D3D10.1 Input Assembler Vertex Input Structure Element Count. Declaration public const uint D3D101InputAssemblerVertexInputStructureElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101InputAssemblerVertexInputStructureElementsComponents D3D10.1 Input Assembler Vertex Input Structure Elements Components. Declaration public const uint D3D101InputAssemblerVertexInputStructureElementsComponents = 128U Field Value Type Description UInt32 | Improve this Doc View Source D3D101PixelShaderOutputMaskRegisterComponentBitCount D3D10.1 Pixel Shader Output Mask Register Component BitCount. Declaration public const uint D3D101PixelShaderOutputMaskRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101PixelShaderOutputMaskRegisterComponents D3D10.1 Pixel Shader Output Mask Register Components. Declaration public const uint D3D101PixelShaderOutputMaskRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D101PixelShaderOutputMaskRegisterCount D3D10.1 Pixel Shader Output Mask Register Count. Declaration public const uint D3D101PixelShaderOutputMaskRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StandardVertexElementCount D3D10.1 Standard Vertex Element Count. Declaration public const uint D3D101StandardVertexElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StreamOutputBufferMaxStrideInBytes D3D10.1 Stream Output Buffer Max Stride In Bytes. Declaration public const uint D3D101StreamOutputBufferMaxStrideInBytes = 2048U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StreamOutputBufferMaxWriteWindowInBytes D3D10.1 Stream Output Buffer Max Write Window In Bytes. Declaration public const uint D3D101StreamOutputBufferMaxWriteWindowInBytes = 256U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StreamOutputBufferSlotCount D3D10.1 Stream Output Buffer Slot Count. Declaration public const uint D3D101StreamOutputBufferSlotCount = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StreamOutputMultipleBufferElementsPerBuffer D3D10.1 Stream Output Multiple Buffer Elements Per Buffer. Declaration public const uint D3D101StreamOutputMultipleBufferElementsPerBuffer = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D101StreamOutputSingleBufferComponentLimit D3D10.1 Stream Output Single Buffer Component Limit. Declaration public const uint D3D101StreamOutputSingleBufferComponentLimit = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D101SubpixelFractionalBitCount D3D10.1 Subpixel Fractional Bit Count. Declaration public const uint D3D101SubpixelFractionalBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D101VertexShaderInputRegisterCount D3D10.1 Vertex Shader Input Register Count. Declaration public const uint D3D101VertexShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D101VertexShaderOutputRegisterCount D3D10.1 Vertex Shader Output Register Count. Declaration public const uint D3D101VertexShaderOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ArrayAxisAddressRangeBitCount D3D10 Array Axis Address Range Bit Count. Declaration public const uint D3D10ArrayAxisAddressRangeBitCount = 9U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ClipOrCullDistanceCount D3D10 Clip Or Cull Distance Count. Declaration public const uint D3D10ClipOrCullDistanceCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ClipOrCullDistanceElementCount D3D10 Clip Or Cull Distance Element Count. Declaration public const uint D3D10ClipOrCullDistanceElementCount = 2U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderBufferComponentBitCount D3D10 Compute Shader Buffer Component Bit Count. Declaration public const uint D3D10ComputeShaderBufferComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferApiSlotCount D3D10 Compute Shader Constant Buffer Api Slot Count. Declaration public const uint D3D10ComputeShaderConstantBufferApiSlotCount = 14U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferComponents D3D10 Compute Shader Constant Buffer Components. Declaration public const uint D3D10ComputeShaderConstantBufferComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferHardwareSlotCount D3D10 Compute Shader Constant Buffer Hardware Slot Count. Declaration public const uint D3D10ComputeShaderConstantBufferHardwareSlotCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferRegisterComponents D3D10 Compute Shader Constant Buffer Register Components. Declaration public const uint D3D10ComputeShaderConstantBufferRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferRegisterCount D3D10 Compute Shader Constant Buffer Register Count. Declaration public const uint D3D10ComputeShaderConstantBufferRegisterCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferRegisterReadPorts D3D10 Compute Shader Constant Buffer Register Read Ports. Declaration public const uint D3D10ComputeShaderConstantBufferRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderConstantBufferRegisterReadsPerInstance D3D10 Compute Shader Constant Buffer Register Reads Per Instance. Declaration public const uint D3D10ComputeShaderConstantBufferRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderFlowControlNestingLimit D3D10 Compute Shader Flow Control Nesting Limit. Declaration public const uint D3D10ComputeShaderFlowControlNestingLimit = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderImmediateConstantBufferRegisterComponents D3D10 Compute Shader Immediate Constant Buffer Register Components. Declaration public const uint D3D10ComputeShaderImmediateConstantBufferRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderImmediateConstantBufferRegisterCount D3D10 Compute Shader Immediate Constant Buffer Register Count. Declaration public const uint D3D10ComputeShaderImmediateConstantBufferRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderImmediateConstantBufferRegisterReadPorts D3D10 Compute Shader Immediate Constant Buffer Register Read Ports. Declaration public const uint D3D10ComputeShaderImmediateConstantBufferRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderImmediateConstantBufferRegisterReadsPerInstance D3D10 Compute Shader Immediate Constant Buffer Register Reads Per Instance. Declaration public const uint D3D10ComputeShaderImmediateConstantBufferRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderImmediateValueComponentBitCount D3D10 Compute Shader Immediate Value Component Bit Count. Declaration public const uint D3D10ComputeShaderImmediateValueComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderInputResourceRegisterComponents D3D10 Compute Shader Input Resource Register Components. Declaration public const uint D3D10ComputeShaderInputResourceRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderInputResourceRegisterCount D3D10 Compute Shader Input Resource Register Count. Declaration public const uint D3D10ComputeShaderInputResourceRegisterCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderInputResourceRegisterReadPorts D3D10 Compute Shader Input Resource Register Read Ports. Declaration public const uint D3D10ComputeShaderInputResourceRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderInputResourceRegisterReadsPerInstance D3D10 Compute Shader Input Resource Register Reads Per Instance. Declaration public const uint D3D10ComputeShaderInputResourceRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderInputResourceSlotCount D3D10 Compute Shader Input Resource Slot Count. Declaration public const uint D3D10ComputeShaderInputResourceSlotCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSamplerRegisterComponents D3D10 Compute Shader Sampler Register Components. Declaration public const uint D3D10ComputeShaderSamplerRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSamplerRegisterCount D3D10 Compute Shader Sampler Register Count. Declaration public const uint D3D10ComputeShaderSamplerRegisterCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSamplerRegisterReadPorts D3D10 Compute Shader Sampler Register Read Ports. Declaration public const uint D3D10ComputeShaderSamplerRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSamplerRegisterReadsPerInstance D3D10 Compute Shader Sampler Register Reads Per Instance. Declaration public const uint D3D10ComputeShaderSamplerRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSamplerSlotCount D3D10 Compute Shader Sampler Slot Count. Declaration public const uint D3D10ComputeShaderSamplerSlotCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderSubroutineNestingLimit D3D10 Compute Shader Subroutine Nesting Limit. Declaration public const uint D3D10ComputeShaderSubroutineNestingLimit = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTempRegisterComponentBitCount D3D10 Compute Shader Temp Register Component Bit Count. Declaration public const uint D3D10ComputeShaderTempRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTempRegisterComponents D3D10 Compute Shader Temp Register Components. Declaration public const uint D3D10ComputeShaderTempRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTempRegisterCount D3D10 Compute Shader Temp Register Count. Declaration public const uint D3D10ComputeShaderTempRegisterCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTempRegisterReadPorts D3D10 Compute Shader Temp Register Read Ports. Declaration public const uint D3D10ComputeShaderTempRegisterReadPorts = 3U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTempRegisterReadsPerInstance D3D10 Compute Shader Temp Register Reads Per Instance. Declaration public const uint D3D10ComputeShaderTempRegisterReadsPerInstance = 3U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ComputeShaderTexCoordRangeReductionMax D3D10 Compute Shader Tex Coord Range Reduction Max. Declaration public const int D3D10ComputeShaderTexCoordRangeReductionMax = 10 Field Value Type Description Int32 | Improve this Doc View Source D3D10ComputeShaderTexCoordRangeReductionMin D3D10 Compute Shader Tex Coord Range Reduction Min. Declaration public const int D3D10ComputeShaderTexCoordRangeReductionMin = -10 Field Value Type Description Int32 | Improve this Doc View Source D3D10ComputeShaderTexelOffsetMaxNegative D3D10 Compute Shader Texel Offset Max Negative. Declaration public const int D3D10ComputeShaderTexelOffsetMaxNegative = -8 Field Value Type Description Int32 | Improve this Doc View Source D3D10ComputeShaderTexelOffsetMaxPositive D3D10 Compute Shader Texel Offset Max Positive. Declaration public const int D3D10ComputeShaderTexelOffsetMaxPositive = 7 Field Value Type Description Int32 | Improve this Doc View Source D3D10DefaultBlendFactorAlpha D3D10 Default Blend Factor Alpha. Declaration public const float D3D10DefaultBlendFactorAlpha = 1F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultBlendFactorBlue D3D10 Default Blend Factor Blue. Declaration public const float D3D10DefaultBlendFactorBlue = 1F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultBlendFactorGreen D3D10 Default Blend Factor Green. Declaration public const float D3D10DefaultBlendFactorGreen = 1F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultBlendFactorRed D3D10 Default Blend Factor Red. Declaration public const float D3D10DefaultBlendFactorRed = 1F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultBorderColorComponent D3D10 Default Border Color Component. Declaration public const float D3D10DefaultBorderColorComponent = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultDepthBias D3D10 Default Depth Bias. Declaration public const uint D3D10DefaultDepthBias = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultDepthBiasClamp D3D10 Default Depth Bias Clamp. Declaration public const float D3D10DefaultDepthBiasClamp = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultMaxAnisotropy D3D10 Default Max Anisotropy. Declaration public const uint D3D10DefaultMaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultMipLodBias D3D10 Default Mip Lod Bias. Declaration public const float D3D10DefaultMipLodBias = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultRenderTargetArrayIndex D3D10 Default Render Target Array Index. Declaration public const uint D3D10DefaultRenderTargetArrayIndex = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultSampleMask D3D10 Default Sample Mask. Declaration public const uint D3D10DefaultSampleMask = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultScissorEndX D3D10 Default Scissor End X. Declaration public const uint D3D10DefaultScissorEndX = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultScissorEndY D3D10 Default Scissor End Y. Declaration public const uint D3D10DefaultScissorEndY = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultScissorStartX D3D10 Default Scissor Start X. Declaration public const uint D3D10DefaultScissorStartX = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultScissorStartY D3D10 Default Scissor Start Y. Declaration public const uint D3D10DefaultScissorStartY = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultSlopeScaledDepthBias D3D10 Default Slope Scaled Depth Bias. Declaration public const float D3D10DefaultSlopeScaledDepthBias = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultStencilReadMask D3D10 Default Stencil Read Mask. Declaration public const uint D3D10DefaultStencilReadMask = 255U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultStencilReference D3D10 Default Stencil Reference. Declaration public const uint D3D10DefaultStencilReference = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultStencilWriteMask D3D10 Default Stencil Write Mask. Declaration public const uint D3D10DefaultStencilWriteMask = 255U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultViewportAndScissorRectIndex D3D10 Default Viewport And Scissor Rect Index. Declaration public const uint D3D10DefaultViewportAndScissorRectIndex = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultViewportHeight D3D10 Default Viewport Height. Declaration public const uint D3D10DefaultViewportHeight = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultViewportMaxDepth D3D10 Default Viewport Max Depth. Declaration public const float D3D10DefaultViewportMaxDepth = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultViewportMinDepth D3D10 Default Viewport Min Depth. Declaration public const float D3D10DefaultViewportMinDepth = 0F Field Value Type Description Single | Improve this Doc View Source D3D10DefaultViewportTopLeftX D3D10 Default Viewport Top Left X. Declaration public const uint D3D10DefaultViewportTopLeftX = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultViewportTopLeftY D3D10 Default Viewport Top Left Y. Declaration public const uint D3D10DefaultViewportTopLeftY = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10DefaultViewportWidth D3D10 Default Viewport Width. Declaration public const uint D3D10DefaultViewportWidth = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10Float16FusedToleranceInUlp D3D10 Float16 Fused Tolerance In Ulp. Declaration public const float D3D10Float16FusedToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source D3D10Float32Max D3D10 Float32 Max. Declaration public const float D3D10Float32Max = 3.40282347E+38F Field Value Type Description Single | Improve this Doc View Source D3D10Float32ToIntegerToleranceInUlp D3D10 Float32 To Integer Tolerance In Ulp. Declaration public const float D3D10Float32ToIntegerToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToIntInstructionMaxInput D3D10 Float To Int Instruction Max Input. Declaration public const float D3D10FloatToIntInstructionMaxInput = 2.14748365E+09F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToIntInstructionMinInput D3D10 Float To Int Instruction Min Input. Declaration public const float D3D10FloatToIntInstructionMinInput = -2.14748365E+09F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbExponentDenominator D3D10 Float To Srgb Exponent Denominator. Declaration public const float D3D10FloatToSrgbExponentDenominator = 2.4F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbExponentNumerator D3D10 Float To Srgb Exponent Numerator. Declaration public const float D3D10FloatToSrgbExponentNumerator = 1F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbOffset D3D10 Float To Srgb Offset. Declaration public const float D3D10FloatToSrgbOffset = 0.055F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbScale1 D3D10 Float To Srgb Scale 1. Declaration public const float D3D10FloatToSrgbScale1 = 12.92F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbScale2 D3D10 Float To Srgb Scale 2. Declaration public const float D3D10FloatToSrgbScale2 = 1.055F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToSrgbThreshold D3D10 Float To Srgb Threshold. Declaration public const float D3D10FloatToSrgbThreshold = 0.0031308F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToUIntInstructionMaxInput D3D10 Float To UInt Instruction Max Input. Declaration public const float D3D10FloatToUIntInstructionMaxInput = 4.2949673E+09F Field Value Type Description Single | Improve this Doc View Source D3D10FloatToUIntInstructionMinInput D3D10 Float To UInt Instruction Min Input. Declaration public const float D3D10FloatToUIntInstructionMinInput = 0F Field Value Type Description Single | Improve this Doc View Source D3D10GeometryShaderInputPrimConstRegisterComponentBitCount D3D10 Geometry Shader Input Prim Const Register Component Bit Count. Declaration public const uint D3D10GeometryShaderInputPrimConstRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputPrimConstRegisterComponents D3D10 Geometry Shader Input Prim Const Register Components. Declaration public const uint D3D10GeometryShaderInputPrimConstRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputPrimConstRegisterCount D3D10 Geometry Shader Input Prim Const Register Count. Declaration public const uint D3D10GeometryShaderInputPrimConstRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputPrimConstRegisterReadPorts D3D10 Geometry Shader Input Prim Const Register Read Ports. Declaration public const uint D3D10GeometryShaderInputPrimConstRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputPrimConstRegisterReadsPerInstance D3D10 Geometry Shader Input Prim Const Register Reads Per Instance. Declaration public const uint D3D10GeometryShaderInputPrimConstRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterComponentBitCount D3D10 Geometry Shader Input Register Component Bit Count. Declaration public const uint D3D10GeometryShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterComponents D3D10 Geometry Shader Input Register Components. Declaration public const uint D3D10GeometryShaderInputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterCount D3D10 Geometry Shader Input Register Count. Declaration public const uint D3D10GeometryShaderInputRegisterCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterReadPorts D3D10 Geometry Shader Input Register Read Ports. Declaration public const uint D3D10GeometryShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterReadsPerInstance D3D10 Geometry Shader Input Register Reads Per Instance. Declaration public const uint D3D10GeometryShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderInputRegisterVertices D3D10 Geometry Shader Input Register Vertices. Declaration public const uint D3D10GeometryShaderInputRegisterVertices = 6U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderOutputElements D3D10 Geometry Shader Output Elements. Declaration public const uint D3D10GeometryShaderOutputElements = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderOutputRegisterComponentBitCount D3D10 Geometry Shader Output Register Component Bit Count. Declaration public const uint D3D10GeometryShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderOutputRegisterComponents D3D10 Geometry Shader Output Register Components. Declaration public const uint D3D10GeometryShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10GeometryShaderOutputRegisterCount D3D10 Geometry Shader Output Register Count. Declaration public const uint D3D10GeometryShaderOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10IndexStripCutValue16Bit D3D10 Index Strip Cut Value 16-Bit. Declaration public const uint D3D10IndexStripCutValue16Bit = 65535U Field Value Type Description UInt32 | Improve this Doc View Source D3D10IndexStripCutValue32Bit D3D10 Index Strip Cut Value 32-Bit. Declaration public const uint D3D10IndexStripCutValue32Bit = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10IndexStripCutValue8Bit D3D10 Index Strip Cut Value 8-Bit. Declaration public const uint D3D10IndexStripCutValue8Bit = 255U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerDefaultIndexBufferOffsetInBytes D3D10 Input Assembler Default Index Buffer Offset In Bytes. Declaration public const uint D3D10InputAssemblerDefaultIndexBufferOffsetInBytes = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerDefaultPrimitiveTopology D3D10 Input Assembler Default Primitive Topology. Declaration public const uint D3D10InputAssemblerDefaultPrimitiveTopology = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerDefaultVertexBufferOffsetInBytes D3D10 Input Assembler Default Vertex Buffer Offset In Bytes. Declaration public const uint D3D10InputAssemblerDefaultVertexBufferOffsetInBytes = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerIndexInputResourceSlotCount D3D10 Input Assembler Index Input Resource Slot Count. Declaration public const uint D3D10InputAssemblerIndexInputResourceSlotCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerInstanceIdBitCount D3D10 Input Assembler Instance Id Bit Count. Declaration public const uint D3D10InputAssemblerInstanceIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerIntegerArithmeticBitCount D3D10 Input Assembler Integer Arithmetic Bit Count. Declaration public const uint D3D10InputAssemblerIntegerArithmeticBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerPrimitiveIdBitCount D3D10 Input Assembler Primitive Id Bit Count. Declaration public const uint D3D10InputAssemblerPrimitiveIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerVertexIdBitCount D3D10 Input Assembler Vertex Id Bit Count. Declaration public const uint D3D10InputAssemblerVertexIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerVertexInputResourceSlotCount D3D10 Input Assembler Vertex Input Resource Slot Count. Declaration public const uint D3D10InputAssemblerVertexInputResourceSlotCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerVertexInputStructureElementCount D3D10 Input Assembler Vertex Input Structure Element Count. Declaration public const uint D3D10InputAssemblerVertexInputStructureElementCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10InputAssemblerVertexInputStructureElementsComponents D3D10 Input Assembler Vertex Input Structure Elements Components. Declaration public const uint D3D10InputAssemblerVertexInputStructureElementsComponents = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D10IntegerDivideByZeroQuotient D3D10 Integer Divide By Zero Quotient. Declaration public const uint D3D10IntegerDivideByZeroQuotient = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10IntegerDivideByZeroRemainder D3D10 Integer Divide By Zero Remainder. Declaration public const uint D3D10IntegerDivideByZeroRemainder = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10LinearGamma D3D10 Linear Gamma. Declaration public const float D3D10LinearGamma = 1F Field Value Type Description Single | Improve this Doc View Source D3D10MaxAnisotropy D3D10 Max Anisotropy. Declaration public const uint D3D10MaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MaxBorderColorComponent D3D10 Max Border Color Component. Declaration public const float D3D10MaxBorderColorComponent = 1F Field Value Type Description Single | Improve this Doc View Source D3D10MaxDepth D3D10 Max Depth. Declaration public const float D3D10MaxDepth = 1F Field Value Type Description Single | Improve this Doc View Source D3D10MaxMultisampleSampleCount D3D10 Max Multisample Sample Count. Declaration public const uint D3D10MaxMultisampleSampleCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MaxPositionValue D3D10 Max Position Value. Declaration public const float D3D10MaxPositionValue = 3.40282358E+34F Field Value Type Description Single | Improve this Doc View Source D3D10MaxTextureDimension2ToExp D3D10 Max Texture Dimension 2 To Exp. Declaration public const uint D3D10MaxTextureDimension2ToExp = 17U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MinBorderColorComponent D3D10 Min Border Color Component. Declaration public const float D3D10MinBorderColorComponent = 0F Field Value Type Description Single | Improve this Doc View Source D3D10MinDepth D3D10 Min Depth. Declaration public const float D3D10MinDepth = 0F Field Value Type Description Single | Improve this Doc View Source D3D10MinMaxAnisotropy D3D10 Min Max Anisotropy. Declaration public const uint D3D10MinMaxAnisotropy = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MipLodBiasMax D3D10 Mip Lod Bias Max. Declaration public const float D3D10MipLodBiasMax = 15.99F Field Value Type Description Single | Improve this Doc View Source D3D10MipLodBiasMin D3D10 Mip Lod Bias Min. Declaration public const float D3D10MipLodBiasMin = -16F Field Value Type Description Single | Improve this Doc View Source D3D10MipLodFractionalBitCount D3D10 Mip Lod Fractional Bit Count. Declaration public const uint D3D10MipLodFractionalBitCount = 6U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MipLodRangeBitCount D3D10 Mip Lod Range Bit Count. Declaration public const uint D3D10MipLodRangeBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D10MultisampleAntialiasLineWidth D3D10 Multisample Antialias Line Width. Declaration public const float D3D10MultisampleAntialiasLineWidth = 1.4F Field Value Type Description Single | Improve this Doc View Source D3D10NonSampleFetchOutOfRangeAccessResult D3D10 Non Sample Fetch Out Of Range Access Result. Declaration public const uint D3D10NonSampleFetchOutOfRangeAccessResult = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelAddressRangeBitCount D3D10 Pixel Address Range Bit Count. Declaration public const uint D3D10PixelAddressRangeBitCount = 13U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderFrontFacingDefaultValue D3D10 Pixel Shader Front Facing Default Value. Declaration public const uint D3D10PixelShaderFrontFacingDefaultValue = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderFrontFacingFalseValue D3D10 Pixel Shader Front Facing False Value. Declaration public const uint D3D10PixelShaderFrontFacingFalseValue = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderFrontFacingTrueValue D3D10 Pixel Shader Front Facing True Value. Declaration public const uint D3D10PixelShaderFrontFacingTrueValue = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderInputRegisterComponentBitCount D3D10 Pixel Shader Input Register Component Bit Count. Declaration public const uint D3D10PixelShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderInputRegisterCount D3D10 Pixel Shader Input Register Count. Declaration public const uint D3D10PixelShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderInputRegisterReadPorts D3D10 Pixel Shader Input Register Read Ports. Declaration public const uint D3D10PixelShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderInputRegisterReadsPerInstance D3D10 Pixel Shader Input Register Reads Per Instance. Declaration public const uint D3D10PixelShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderLegacyPixelCenterFractionalComponent D3D10 Pixel Shader Legacy Pixel Center Fractional Component. Declaration public const float D3D10PixelShaderLegacyPixelCenterFractionalComponent = 0F Field Value Type Description Single | Improve this Doc View Source D3D10PixelShaderOutputDepthRegisterComponentBitCount D3D10 Pixel Shader Output Depth Register Component Bit Count. Declaration public const uint D3D10PixelShaderOutputDepthRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderOutputDepthRegisterComponents D3D10 Pixel Shader Output Depth Register Components. Declaration public const uint D3D10PixelShaderOutputDepthRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderOutputDepthRegisterCount D3D10 Pixel Shader Output Depth Register Count. Declaration public const uint D3D10PixelShaderOutputDepthRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderOutputRegisterComponentBitCount D3D10 Pixel Shader Output Register Component Bit Count. Declaration public const uint D3D10PixelShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderOutputRegisterComponents D3D10 Pixel Shader Output Register Components. Declaration public const uint D3D10PixelShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderOutputRegisterCount D3D10 Pixel Shader Output Register Count. Declaration public const uint D3D10PixelShaderOutputRegisterCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PixelShaderPixelCenterFractionalComponent D3D10 Pixel Shader Pixel Center Fractional Component. Declaration public const float D3D10PixelShaderPixelCenterFractionalComponent = 0.5F Field Value Type Description Single | Improve this Doc View Source D3D10PixelShaderRegisterComponents D3D10 Pixel Shader Register Components. Declaration public const uint D3D10PixelShaderRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10PreScissorPixelAddressRangeBitCount D3D10 Pre Scissor Pixel Address Range Bit Count. Declaration public const uint D3D10PreScissorPixelAddressRangeBitCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqBlendObjectCountPerContext D3D10 Req Blend Object Count Per Context. Declaration public const uint D3D10ReqBlendObjectCountPerContext = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqBufferResourceTexelCount2ToExp D3D10 Req Buffer Resource Texel Count 2 To Exp. Declaration public const uint D3D10ReqBufferResourceTexelCount2ToExp = 27U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqConstantBufferElementCount D3D10 Req Constant Buffer Element Count. Declaration public const uint D3D10ReqConstantBufferElementCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqDepthStencilObjectCountPerContext D3D10 Req Depth Stencil Object Count Per Context. Declaration public const uint D3D10ReqDepthStencilObjectCountPerContext = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqDrawIndexedIndexCount2ToExp D3D10 Req Draw Indexed Index Count 2 To Exp. Declaration public const uint D3D10ReqDrawIndexedIndexCount2ToExp = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqDrawVertexCount2ToExp D3D10 Req Draw Vertex Count 2 To Exp. Declaration public const uint D3D10ReqDrawVertexCount2ToExp = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqFilteringHardwareAddressableResourceDimension D3D10 Req Filtering Hardware Addressable Resource Dimension. Declaration public const uint D3D10ReqFilteringHardwareAddressableResourceDimension = 8192U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqGeometryShaderInvocation32BitOutputComponentLimit D3D10 Req Geometry Shader Invocation 32-Bit Output Component Limit. Declaration public const uint D3D10ReqGeometryShaderInvocation32BitOutputComponentLimit = 1024U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqImmediateConstantBufferElementCount D3D10 Req Immediate Constant Buffer Element Count. Declaration public const uint D3D10ReqImmediateConstantBufferElementCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqMaxAnisotropy D3D10 Req Max Anisotropy. Declaration public const uint D3D10ReqMaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqMipLevels D3D10 Req Mip Levels. Declaration public const uint D3D10ReqMipLevels = 14U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqMultiElementStructureSizeInBytes D3D10 Req Multi Element Structure Size In Bytes. Declaration public const uint D3D10ReqMultiElementStructureSizeInBytes = 2048U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqRasterizerObjectCountPerContext D3D10 Req Rasterizer Object Count Per Context. Declaration public const uint D3D10ReqRasterizerObjectCountPerContext = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqRenderToBufferWindowWidth D3D10 Req Render To Buffer Window Width. Declaration public const uint D3D10ReqRenderToBufferWindowWidth = 8192U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqResourceSizeInMegabytes D3D10 Req Resource Size In Megabytes. Declaration public const uint D3D10ReqResourceSizeInMegabytes = 128U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqResourceViewCountPerContext2ToExp D3D10 Req Resource View Count Per Context 2 To Exp. Declaration public const uint D3D10ReqResourceViewCountPerContext2ToExp = 20U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqSamplerObjectCountPerContext D3D10 Req Sampler Object Count Per Context. Declaration public const uint D3D10ReqSamplerObjectCountPerContext = 4096U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTexture1DArrayAxisDimension D3D10 Req Texture 1D Array Axis Dimension. Declaration public const uint D3D10ReqTexture1DArrayAxisDimension = 512U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTexture1DDimension D3D10 Req Texture 1D Dimension. Declaration public const uint D3D10ReqTexture1DDimension = 8192U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTexture2DArrayAxisDimension D3D10 Req Texture 2D Array Axis Dimension. Declaration public const uint D3D10ReqTexture2DArrayAxisDimension = 512U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTexture2DDimension D3D10 Req Texture 2D Dimension. Declaration public const uint D3D10ReqTexture2DDimension = 8192U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTexture3DDimension D3D10 Req Texture 3D Dimension. Declaration public const uint D3D10ReqTexture3DDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ReqTextureCubeDimension D3D10 Req Texture Cube Dimension. Declaration public const uint D3D10ReqTextureCubeDimension = 8192U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ResinfoInstructionMissingComponentRetval D3D10 Resinfo Instruction Missing Component Retval. Declaration public const uint D3D10ResinfoInstructionMissingComponentRetval = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ShiftInstructionPadValue D3D10 Shift Instruction Pad Value. Declaration public const uint D3D10ShiftInstructionPadValue = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ShiftInstructionShiftValueBitCount D3D10 Shift Instruction Shift Value Bit Count. Declaration public const uint D3D10ShiftInstructionShiftValueBitCount = 5U Field Value Type Description UInt32 | Improve this Doc View Source D3D10SimultaneousRenderTargetCount D3D10 Simultaneous Render Target Count. Declaration public const uint D3D10SimultaneousRenderTargetCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D10SrgbGamma D3D10 Srgb Gamma. Declaration public const float D3D10SrgbGamma = 2.2F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatDenominator1 D3D10 Srgb To Float Denominator 1. Declaration public const float D3D10SrgbToFloatDenominator1 = 12.92F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatDenominator2 D3D10 Srgb To Float Denominator 2. Declaration public const float D3D10SrgbToFloatDenominator2 = 1.055F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatExponent D3D10 Srgb To Float Exponent. Declaration public const float D3D10SrgbToFloatExponent = 2.4F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatOffset D3D10 Srgb To Float Offset. Declaration public const float D3D10SrgbToFloatOffset = 0.055F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatThreshold D3D10 Srgb To Float Threshold. Declaration public const float D3D10SrgbToFloatThreshold = 0.04045F Field Value Type Description Single | Improve this Doc View Source D3D10SrgbToFloatToleranceInUlp D3D10 Srgb To Float Tolerance In Ulp. Declaration public const float D3D10SrgbToFloatToleranceInUlp = 0.5F Field Value Type Description Single | Improve this Doc View Source D3D10StandardComponentBitCount D3D10 Standard Component Bit Count. Declaration public const uint D3D10StandardComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardComponentBitCountDoubled D3D10 Standard Component Bit Count Doubled. Declaration public const uint D3D10StandardComponentBitCountDoubled = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardMaximumElementAlignmentByteMultiple D3D10 Standard Maximum Element Alignment Byte Multiple. Declaration public const uint D3D10StandardMaximumElementAlignmentByteMultiple = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardPixelComponentCount D3D10 Standard Pixel Component Count. Declaration public const uint D3D10StandardPixelComponentCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardPixelElementCount D3D10 Standard Pixel Element Count. Declaration public const uint D3D10StandardPixelElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardVectorSize D3D10 Standard Vector Size. Declaration public const uint D3D10StandardVectorSize = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardVertexElementCount D3D10 Standard Vertex Element Count. Declaration public const uint D3D10StandardVertexElementCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StandardVertexTotalComponentCount D3D10 Standard Vertex Total Component Count. Declaration public const uint D3D10StandardVertexTotalComponentCount = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputBufferMaxStrideInBytes D3D10 Stream Output Buffer Max Stride In Bytes. Declaration public const uint D3D10StreamOutputBufferMaxStrideInBytes = 2048U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputBufferMaxWriteWindowInBytes D3D10 Stream Output Buffer Max Write Window In Bytes. Declaration public const uint D3D10StreamOutputBufferMaxWriteWindowInBytes = 256U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputBufferSlotCount D3D10 Stream Output Buffer Slot Count. Declaration public const uint D3D10StreamOutputBufferSlotCount = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputDdiRegisterIndexDenotingGap D3D10 Stream Output Ddi Register Index Denoting Gap. Declaration public const uint D3D10StreamOutputDdiRegisterIndexDenotingGap = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputMultipleBufferElementsPerBuffer D3D10 Stream Output Multiple Buffer Elements Per Buffer. Declaration public const uint D3D10StreamOutputMultipleBufferElementsPerBuffer = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10StreamOutputSingleBufferComponentLimit D3D10 Stream Output Single Buffer Component Limit. Declaration public const uint D3D10StreamOutputSingleBufferComponentLimit = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D10SubpixelFractionalBitCount D3D10 Subpixel Fractional Bit Count. Declaration public const uint D3D10SubpixelFractionalBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source D3D10SubtexelFractionalBitCount D3D10 Subtexel Fractional Bit Count. Declaration public const uint D3D10SubtexelFractionalBitCount = 6U Field Value Type Description UInt32 | Improve this Doc View Source D3D10TexelAddressRangeBitCount D3D10 Texel Address Range Bit Count. Declaration public const uint D3D10TexelAddressRangeBitCount = 18U Field Value Type Description UInt32 | Improve this Doc View Source D3D10UnboundMemoryAccessResult D3D10 Unbound Memory Access Result. Declaration public const uint D3D10UnboundMemoryAccessResult = 0U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderInputRegisterComponentBitCount D3D10 Vertex Shader Input Register Component Bit Count. Declaration public const uint D3D10VertexShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderInputRegisterComponents D3D10 Vertex Shader Input Register Components. Declaration public const uint D3D10VertexShaderInputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderInputRegisterCount D3D10 Vertex Shader Input Register Count. Declaration public const uint D3D10VertexShaderInputRegisterCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderInputRegisterReadPorts D3D10 Vertex Shader Input Register Read Ports. Declaration public const uint D3D10VertexShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderInputRegisterReadsPerInstance D3D10 Vertex Shader Input Register Reads Per Instance. Declaration public const uint D3D10VertexShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderOutputRegisterComponentBitCount D3D10 Vertex Shader Output Register Component Bit Count. Declaration public const uint D3D10VertexShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderOutputRegisterComponents D3D10 Vertex Shader Output Register Components. Declaration public const uint D3D10VertexShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source D3D10VertexShaderOutputRegisterCount D3D10 Vertex Shader Output Register Count. Declaration public const uint D3D10VertexShaderOutputRegisterCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ViewportAndScissorRectMaxIndex D3D10 Viewport And Scissor Rect Max Index. Declaration public const uint D3D10ViewportAndScissorRectMaxIndex = 15U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ViewportAndScissorRectObjectCountPerPipeline D3D10 Viewport And Scissor Rect Object Count Per Pipeline. Declaration public const uint D3D10ViewportAndScissorRectObjectCountPerPipeline = 16U Field Value Type Description UInt32 | Improve this Doc View Source D3D10ViewportBoundsMax D3D10 Viewport Bounds Max. Declaration public const int D3D10ViewportBoundsMax = 16383 Field Value Type Description Int32 | Improve this Doc View Source D3D10ViewportBoundsMin D3D10 Viewport Bounds Min. Declaration public const int D3D10ViewportBoundsMin = -16384 Field Value Type Description Int32 | Improve this Doc View Source D3D10WhqlContextCountForResourceLimit D3D10 WHQL Context Count For Resource Limit. Declaration public const uint D3D10WhqlContextCountForResourceLimit = 10U Field Value Type Description UInt32 | Improve this Doc View Source D3D10WhqlDrawIndexedIndexCount2ToExp D3D10 WHQL Draw Indexed Index Count 2 To Exp. Declaration public const uint D3D10WhqlDrawIndexedIndexCount2ToExp = 25U Field Value Type Description UInt32 | Improve this Doc View Source D3D10WhqlDrawVertexCount2ToExp D3D10 WHQL Draw Vertex Count 2 To Exp. Declaration public const uint D3D10WhqlDrawVertexCount2ToExp = 25U Field Value Type Description UInt32 | Improve this Doc View Source D3D111UnorderedAccessViewSlotCount D3D11.1 Unordered Access View Slot Count. Declaration public const uint D3D111UnorderedAccessViewSlotCount = 64U Field Value Type Description UInt32 | Improve this Doc View Source D3D112TiledResourceTileSizeInBytes D3D11.2 Tiled Resource Tile Size In Bytes. Declaration public const uint D3D112TiledResourceTileSizeInBytes = 65536U Field Value Type Description UInt32 | Improve this Doc View Source DefaultBlendFactorAlpha Default Blend Factor Alpha. Declaration public const float DefaultBlendFactorAlpha = 1F Field Value Type Description Single | Improve this Doc View Source DefaultBlendFactorBlue Default Blend Factor Blue. Declaration public const float DefaultBlendFactorBlue = 1F Field Value Type Description Single | Improve this Doc View Source DefaultBlendFactorGreen Default Blend Factor Green. Declaration public const float DefaultBlendFactorGreen = 1F Field Value Type Description Single | Improve this Doc View Source DefaultBlendFactorRed Default Blend Factor Red Declaration public const float DefaultBlendFactorRed = 1F Field Value Type Description Single | Improve this Doc View Source DefaultBorderColorComponent Default Border Color Component. Declaration public const float DefaultBorderColorComponent = 0F Field Value Type Description Single | Improve this Doc View Source DefaultDepthBias Default Depth Bias. Declaration public const uint DefaultDepthBias = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultDepthBiasClamp Default Depth Bias Clamp. Declaration public const float DefaultDepthBiasClamp = 0F Field Value Type Description Single | Improve this Doc View Source DefaultMaxAnisotropy Default Max Anisotropy. Declaration public const uint DefaultMaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source DefaultMipLodBias Default Mip Lod Bias. Declaration public const float DefaultMipLodBias = 0F Field Value Type Description Single | Improve this Doc View Source DefaultRenderTargetArrayIndex Default Render Target Array Index. Declaration public const uint DefaultRenderTargetArrayIndex = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultSampleMask Default Sample Mask. Declaration public const uint DefaultSampleMask = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source DefaultScissorEndX Default Scissor End X. Declaration public const uint DefaultScissorEndX = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultScissorEndY Default Scissor End Y. Declaration public const uint DefaultScissorEndY = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultScissorStartX Default Scissor Start X. Declaration public const uint DefaultScissorStartX = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultScissorStartY Default Scissor Start Y. Declaration public const uint DefaultScissorStartY = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultSlopeScaledDepthBias Default Slope Scaled Depth Bias. Declaration public const float DefaultSlopeScaledDepthBias = 0F Field Value Type Description Single | Improve this Doc View Source DefaultStencilReadMask Default Stencil Read Mask. Declaration public const uint DefaultStencilReadMask = 255U Field Value Type Description UInt32 | Improve this Doc View Source DefaultStencilReference Default Stencil Reference. Declaration public const uint DefaultStencilReference = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultStencilWriteMask Default Stencil Write Mask. Declaration public const uint DefaultStencilWriteMask = 255U Field Value Type Description UInt32 | Improve this Doc View Source DefaultViewportAndScissorRectIndex Default Viewport And Scissor Rect Index. Declaration public const uint DefaultViewportAndScissorRectIndex = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultViewportHeight Default Viewport Height. Declaration public const uint DefaultViewportHeight = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultViewportMaxDepth Default Viewport Max Depth. Declaration public const float DefaultViewportMaxDepth = 0F Field Value Type Description Single | Improve this Doc View Source DefaultViewportMinDepth Default Viewport Min Depth. Declaration public const float DefaultViewportMinDepth = 0F Field Value Type Description Single | Improve this Doc View Source DefaultViewportTopLeftX Default Viewport Top Left X. Declaration public const uint DefaultViewportTopLeftX = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultViewportTopLeftY Default Viewport Top Left Y. Declaration public const uint DefaultViewportTopLeftY = 0U Field Value Type Description UInt32 | Improve this Doc View Source DefaultViewportWidth Default Viewport Width. Declaration public const uint DefaultViewportWidth = 0U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointRegisterComponentBitCount Domain Shader Input Control Point Register Component Bit Count. Declaration public const uint DomainShaderInputControlPointRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointRegisterComponents Domain Shader Input Control Point Register Components. Declaration public const uint DomainShaderInputControlPointRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointRegisterCount Domain Shader Input Control Point Register Count. Declaration public const uint DomainShaderInputControlPointRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointRegisterReadPorts Domain Shader Input Control Point Register Read Ports. Declaration public const uint DomainShaderInputControlPointRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointRegisterReadsPerInstance Domain Shader Input Control Point Register Reads Per Instance. Declaration public const uint DomainShaderInputControlPointRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputControlPointsMaxTotalScalars Domain Shader Input Control Points Max Total Scalars. Declaration public const uint DomainShaderInputControlPointsMaxTotalScalars = 3968U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputDomainPointRegisterComponentBitCount Domain Shader Input Domain Point Register Component Bit Count. Declaration public const uint DomainShaderInputDomainPointRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputDomainPointRegisterComponents Domain Shader Input Domain Point Register Components. Declaration public const uint DomainShaderInputDomainPointRegisterComponents = 3U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputDomainPointRegisterCount Domain Shader Input Domain Point Register Count. Declaration public const uint DomainShaderInputDomainPointRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputDomainPointRegisterReadPorts Domain Shader Input Domain Point Register Read Ports. Declaration public const uint DomainShaderInputDomainPointRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputDomainPointRegisterReadsPerInstance Domain Shader Input Domain Point Register Reads Per Instance. Declaration public const uint DomainShaderInputDomainPointRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPatchConstantRegisterBitCount Domain Shader Input Patch Constant Register Bit Count. Declaration public const uint DomainShaderInputPatchConstantRegisterBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPatchConstantRegisterComponents Domain Shader Input Patch Constant Register Components. Declaration public const uint DomainShaderInputPatchConstantRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPatchConstantRegisterCount Domain Shader Input Patch Constant Register Count. Declaration public const uint DomainShaderInputPatchConstantRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPatchConstantRegisterReadPorts Domain Shader Input Patch Constant Register Read Ports. Declaration public const uint DomainShaderInputPatchConstantRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPatchConstantRegisterReadsPerInstance Domain Shader Input Patch Constant Register Reads Per Instance. Declaration public const uint DomainShaderInputPatchConstantRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPrimitiveIdRegisterBitCount Domain Shader Input Primitive Id Register Bit Count. Declaration public const uint DomainShaderInputPrimitiveIdRegisterBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPrimitiveIdRegisterComponents Domain Shader Input Primitive Id Register Components. Declaration public const uint DomainShaderInputPrimitiveIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPrimitiveIdRegisterCount Domain Shader Input Primitive Id Register Count. Declaration public const uint DomainShaderInputPrimitiveIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPrimitiveIdRegisterReadPorts Domain Shader Input Primitive Id Register Read Ports. Declaration public const uint DomainShaderInputPrimitiveIdRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderInputPrimitiveIdRegisterReadsPerInstance Domain Shader Input Primitive Id Register Reads Per Instance. Declaration public const uint DomainShaderInputPrimitiveIdRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderOutputRegisterComponentBitCount Domain Shader Output Register Component Bit Count. Declaration public const uint DomainShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderOutputRegisterComponents Domain Shader Output Register Components. Declaration public const uint DomainShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source DomainShaderOutputRegisterCount Domain Shader Output Register Count. Declaration public const uint DomainShaderOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91DefaultMaxAnisotropy Feature Level 9.1 Default Max Anisotropy. Declaration public const uint FeatureLevel91DefaultMaxAnisotropy = 2U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91InputAssemblerPrimitiveMaxCount Feature Level 9.1 Input Assembler Primitive Max Count. Declaration public const uint FeatureLevel91InputAssemblerPrimitiveMaxCount = 65535U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91MaxTextureRepeat Feature Level 9.1 Max Texture Repeat. Declaration public const uint FeatureLevel91MaxTextureRepeat = 128U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91ReqTexture1DDimension Feature Level 9.1 Req Texture 1D Dimension. Declaration public const uint FeatureLevel91ReqTexture1DDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91ReqTexture2DDimension Feature Level 9.1 Req Texture 2D Dimension. Declaration public const uint FeatureLevel91ReqTexture2DDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91ReqTexture3DDimension Feature Level 9.1 Req Texture 3D Dimension. Declaration public const uint FeatureLevel91ReqTexture3DDimension = 256U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91ReqTextureCubeDimension Feature Level 9.1 Req Texture Cube Dimension. Declaration public const uint FeatureLevel91ReqTextureCubeDimension = 512U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel91SimultaneousRenderTargetCount Feature Level 9.1 Simultaneous Render Target Count. Declaration public const uint FeatureLevel91SimultaneousRenderTargetCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel92InputAssemblerPrimitiveMaxCount Feature Level 9.2 Input Assembler Primitive Max Count. Declaration public const uint FeatureLevel92InputAssemblerPrimitiveMaxCount = 1048575U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel92MaxTextureRepeat Feature Level 9.2 Max Texture Repeat. Declaration public const uint FeatureLevel92MaxTextureRepeat = 2048U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel93MaxTextureRepeat Feature Level 9.3 Max Texture Repeat. Declaration public const uint FeatureLevel93MaxTextureRepeat = 8192U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel93ReqTexture1DDimension Feature Level 9.3 Req Texture 1D Dimension. Declaration public const uint FeatureLevel93ReqTexture1DDimension = 4096U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel93ReqTexture2DDimension Feature Level 9.3 Req Texture 2D Dimension. Declaration public const uint FeatureLevel93ReqTexture2DDimension = 4096U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel93ReqTextureCubeDimension Feature Level 9.3 Req Texture Cube Dimension. Declaration public const uint FeatureLevel93ReqTextureCubeDimension = 4096U Field Value Type Description UInt32 | Improve this Doc View Source FeatureLevel93SimultaneousRenderTargetCount Feature Level 9.3 Simultaneous Render Target Count. Declaration public const uint FeatureLevel93SimultaneousRenderTargetCount = 4U Field Value Type Description UInt32 | Improve this Doc View Source Float16FusedToleranceInUlp Float16 Fused Tolerance In Ulp. Declaration public const float Float16FusedToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source Float32Max Float32 Max. Declaration public const float Float32Max = 3.40282347E+38F Field Value Type Description Single | Improve this Doc View Source Float32ToIntegerToleranceInUlp Float32 To Integer Tolerance In Ulp. Declaration public const float Float32ToIntegerToleranceInUlp = 0.6F Field Value Type Description Single | Improve this Doc View Source FloatToIntInstructionMaxInput Float To Int Instruction Max Input. Declaration public const float FloatToIntInstructionMaxInput = 2.14748365E+09F Field Value Type Description Single | Improve this Doc View Source FloatToIntInstructionMinInput Float To Int Instruction Min Input. Declaration public const float FloatToIntInstructionMinInput = -2.14748365E+09F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbExponentDenominator Float To Srgb Exponent Denominator. Declaration public const float FloatToSrgbExponentDenominator = 2.4F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbExponentNumerator Float To Srgb Exponent Numerator. Declaration public const float FloatToSrgbExponentNumerator = 1F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbOffset Float To Srgb Offset. Declaration public const float FloatToSrgbOffset = 0.055F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbScale1 Float To Srgb Scale 1. Declaration public const float FloatToSrgbScale1 = 12.92F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbScale2 Float To Srgb Scale 2. Declaration public const float FloatToSrgbScale2 = 1.055F Field Value Type Description Single | Improve this Doc View Source FloatToSrgbThreshold Float To Srgb Threshold. Declaration public const float FloatToSrgbThreshold = 0.0031308F Field Value Type Description Single | Improve this Doc View Source FloatToUIntInstructionMaxInput Float To UInt Instruction Max Input. Declaration public const float FloatToUIntInstructionMaxInput = 4.2949673E+09F Field Value Type Description Single | Improve this Doc View Source FloatToUIntInstructionMinInput Float To UInt Instruction Min Input. Declaration public const float FloatToUIntInstructionMinInput = 0F Field Value Type Description Single | Improve this Doc View Source GeometryShaderInputInstanceIdReadPorts Geometry Shader Input Instance Id Read Ports. Declaration public const uint GeometryShaderInputInstanceIdReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputInstanceIdReadsPerInstance Geometry Shader Input Instance Id Reads Per Instance. Declaration public const uint GeometryShaderInputInstanceIdReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputInstanceIdRegisterComponentBitCount Geometry Shader Input Instance Id Register Component Bit Count. Declaration public const uint GeometryShaderInputInstanceIdRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputInstanceIdRegisterComponents Geometry Shader Input Instance Id Register Components. Declaration public const uint GeometryShaderInputInstanceIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputInstanceIdRegisterCount Geometry Shader Input Instance Id Register Count. Declaration public const uint GeometryShaderInputInstanceIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputPrimConstRegisterComponentBitCount Geometry Shader Input Prim Const Register Component Bit Count. Declaration public const uint GeometryShaderInputPrimConstRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputPrimConstRegisterComponents Geometry Shader Input Prim Const Register Components. Declaration public const uint GeometryShaderInputPrimConstRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputPrimConstRegisterCount Geometry Shader Input Prim Const Register Count. Declaration public const uint GeometryShaderInputPrimConstRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputPrimConstRegisterReadPorts Geometry Shader Input Prim Const Register Read Ports. Declaration public const uint GeometryShaderInputPrimConstRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputPrimConstRegisterReadsPerInstance Geometry Shader Input Prim Const Register Reads Per Instance. Declaration public const uint GeometryShaderInputPrimConstRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterComponentBitCount Geometry Shader Input Register Component Bit Count. Declaration public const uint GeometryShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterComponents Geometry Shader Input Register Components. Declaration public const uint GeometryShaderInputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterCount Geometry Shader Input Register Count. Declaration public const uint GeometryShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterReadPorts Geometry Shader Input Register Read Ports. Declaration public const uint GeometryShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterReadsPerInstance Geometry Shader Input Register Reads Per Instance. Declaration public const uint GeometryShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderInputRegisterVertices Geometry Shader Input Register Vertices. Declaration public const uint GeometryShaderInputRegisterVertices = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderMaxInstanceCount Geometry Shader Max Instance Count. Declaration public const uint GeometryShaderMaxInstanceCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderMaxOutputVertexCountAcrossInstances Geometry Shader Max Output Vertex Count Across Instances. Declaration public const uint GeometryShaderMaxOutputVertexCountAcrossInstances = 1024U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderOutputElements Geometry Shader Output Elements. Declaration public const uint GeometryShaderOutputElements = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderOutputRegisterComponentBitCount Geometry Shader Output Register Component Bit Count. Declaration public const uint GeometryShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderOutputRegisterComponents Geometry Shader Output Register Components. Declaration public const uint GeometryShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source GeometryShaderOutputRegisterCount Geometry Shader Output Register Count. Declaration public const uint GeometryShaderOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointPhaseInputRegisterCount Hull Shader Control Point Phase Input Register Count. Declaration public const uint HullShaderControlPointPhaseInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointPhaseOutputRegisterCount Hull Shader Control Point Phase Output Register Count. Declaration public const uint HullShaderControlPointPhaseOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointRegisterComponentBitCount Hull Shader Control Point Register Component Bit Count. Declaration public const uint HullShaderControlPointRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointRegisterComponents Hull Shader Control Point Register Components. Declaration public const uint HullShaderControlPointRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointRegisterReadPorts Hull Shader Control Point Register Read Ports. Declaration public const uint HullShaderControlPointRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderControlPointRegisterReadsPerInstance Hull Shader Control Point Register Reads Per Instance. Declaration public const uint HullShaderControlPointRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderForkPhaseInstanceCountUpperBound Hull Shader Fork Phase Instance Count Upper Bound. Declaration public const uint HullShaderForkPhaseInstanceCountUpperBound = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputForkInstanceIdRegisterComponentBitCount Hull Shader Input Fork Instance Id Register Component Bit Count. Declaration public const uint HullShaderInputForkInstanceIdRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputForkInstanceIdRegisterComponents Hull Shader Input Fork Instance Id Register Components. Declaration public const uint HullShaderInputForkInstanceIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputForkInstanceIdRegisterCount Hull Shader Input Fork Instance Id Register Count. Declaration public const uint HullShaderInputForkInstanceIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputForkInstanceIdRegisterReadPorts Hull Shader Input Fork Instance Id Register Read Ports. Declaration public const uint HullShaderInputForkInstanceIdRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputForkInstanceIdRegisterReadsPerInstance Hull Shader Input Fork Instance Id Register Reads Per Instance. Declaration public const uint HullShaderInputForkInstanceIdRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputJoinInstanceIdRegisterComponentBitCount Hull Shader Input Join Instance Id Register Component Bit Count. Declaration public const uint HullShaderInputJoinInstanceIdRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputJoinInstanceIdRegisterComponents Hull Shader Input Join Instance Id Register Components. Declaration public const uint HullShaderInputJoinInstanceIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputJoinInstanceIdRegisterCount Hull Shader Input Join Instance Id Register Count. Declaration public const uint HullShaderInputJoinInstanceIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputJoinInstanceIdRegisterReadPorts Hull Shader Input Join Instance Id Register Read Ports. Declaration public const uint HullShaderInputJoinInstanceIdRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputJoinInstanceIdRegisterReadsPerInstance Hull Shader Input Join Instance Id Register Reads Per Instance. Declaration public const uint HullShaderInputJoinInstanceIdRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputPrimitiveIdRegisterComponentBitCount Hull Shader Input Primitive Id Register Component Bit Count. Declaration public const uint HullShaderInputPrimitiveIdRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputPrimitiveIdRegisterComponents Hull Shader Input Primitive Id Register Components. Declaration public const uint HullShaderInputPrimitiveIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputPrimitiveIdRegisterCount Hull Shader Input Primitive Id Register Count. Declaration public const uint HullShaderInputPrimitiveIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputPrimitiveIdRegisterReadPorts Hull Shader Input Primitive Id Register Read Ports. Declaration public const uint HullShaderInputPrimitiveIdRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderInputPrimitiveIdRegisterReadsPerInstance Hull Shader Input Primitive Id Register Reads Per Instance. Declaration public const uint HullShaderInputPrimitiveIdRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderJoinPhaseInstanceCountUpperBound Hull Shader Join Phase Instance Count Upper Bound. Declaration public const uint HullShaderJoinPhaseInstanceCountUpperBound = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderMaxTessellationFactorLowerBound Hull Shader Max Tessellation Factor Lower Bound. Declaration public const float HullShaderMaxTessellationFactorLowerBound = 1F Field Value Type Description Single | Improve this Doc View Source HullShaderMaxTessellationFactorUpperBound Hull Shader Max Tessellation Factor Upper Bound. Declaration public const float HullShaderMaxTessellationFactorUpperBound = 64F Field Value Type Description Single | Improve this Doc View Source HullShaderOutputControlPointIdRegisterComponentBitCount Hull Shader Output Control Point Id Register Component Bit Count. Declaration public const uint HullShaderOutputControlPointIdRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputControlPointIdRegisterComponents Hull Shader Output Control Point Id Register Components. Declaration public const uint HullShaderOutputControlPointIdRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputControlPointIdRegisterCount Hull Shader Output Control Point Id Register Count. Declaration public const uint HullShaderOutputControlPointIdRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputControlPointIdRegisterReadPorts Hull Shader Output Control Point Id Register Read Ports. Declaration public const uint HullShaderOutputControlPointIdRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputControlPointIdRegisterReadsPerInstance Hull Shader Output Control Point Id Register Reads Per Instance. Declaration public const uint HullShaderOutputControlPointIdRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputControlPointsMaxTotalScalars Hull Shader Output Control Points Max Total Scalars. Declaration public const uint HullShaderOutputControlPointsMaxTotalScalars = 3968U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterComponentBitCount Hull Shader Output Patch Constant Register Component Bit Count. Declaration public const uint HullShaderOutputPatchConstantRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterComponents Hull Shader Output Patch Constant Register Components. Declaration public const uint HullShaderOutputPatchConstantRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterCount Hull Shader Output Patch Constant Register Count. Declaration public const uint HullShaderOutputPatchConstantRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterReadPorts Hull Shader Output Patch Constant Register Read Ports. Declaration public const uint HullShaderOutputPatchConstantRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterReadsPerInstance Hull Shader Output Patch Constant Register Reads Per Instance. Declaration public const uint HullShaderOutputPatchConstantRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source HullShaderOutputPatchConstantRegisterScalarComponents Hull Shader Output Patch Constant Register Scalar Components. Declaration public const uint HullShaderOutputPatchConstantRegisterScalarComponents = 128U Field Value Type Description UInt32 | Improve this Doc View Source IndexStripCutValue16Bit Index Strip Cut Value 16-Bit. Declaration public const uint IndexStripCutValue16Bit = 65535U Field Value Type Description UInt32 | Improve this Doc View Source IndexStripCutValue32Bit Index Strip Cut Value 32-Bit. Declaration public const uint IndexStripCutValue32Bit = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source IndexStripCutValue8Bit Index Strip Cut Value 8-Bit. Declaration public const uint IndexStripCutValue8Bit = 255U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerDefaultIndexBufferOffsetInBytes Input Assembler Default Index Buffer Offset In Bytes. Declaration public const uint InputAssemblerDefaultIndexBufferOffsetInBytes = 0U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerDefaultPrimitiveTopology Input Assembler Default Primitive Topology. Declaration public const uint InputAssemblerDefaultPrimitiveTopology = 0U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerDefaultVertexBufferOffsetInBytes Input Assembler Default Vertex Buffer Offset In Bytes. Declaration public const uint InputAssemblerDefaultVertexBufferOffsetInBytes = 0U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerIndexInputResourceSlotCount Input Assembler Index Input Resource Slot Count. Declaration public const uint InputAssemblerIndexInputResourceSlotCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerInstanceIdBitCount Input Assembler Instance Id Bit Count. Declaration public const uint InputAssemblerInstanceIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerIntegerArithmeticBitCount Input Assembler Integer Arithmetic Bit Count. Declaration public const uint InputAssemblerIntegerArithmeticBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerPatchMaxControlPointCount Input Assembler Patch Max Control Point Count. Declaration public const uint InputAssemblerPatchMaxControlPointCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerPrimitiveIdBitCount Input Assembler Primitive Id Bit Count. Declaration public const uint InputAssemblerPrimitiveIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerVertexIdBitCount Input Assembler Vertex Id Bit Count. Declaration public const uint InputAssemblerVertexIdBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerVertexInputResourceSlotCount Input Assembler Vertex Input Resource Slot Count. Declaration public const uint InputAssemblerVertexInputResourceSlotCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerVertexInputStructureElementCount Input Assembler Vertex Input Structure Element Count. Declaration public const uint InputAssemblerVertexInputStructureElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source InputAssemblerVertexInputStructureElementsComponents Input Assembler Vertex Input Structure Elements Components. Declaration public const uint InputAssemblerVertexInputStructureElementsComponents = 128U Field Value Type Description UInt32 | Improve this Doc View Source IntegerDivideByZeroQuotient Integer Divide By Zero Quotient. Declaration public const uint IntegerDivideByZeroQuotient = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source IntegerDivideByZeroRemainder Integer Divide By Zero Remainder. Declaration public const uint IntegerDivideByZeroRemainder = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source KeepRenderTargetsAndDepthStencil Keep Render Targets And Depth Stencil. Declaration public const uint KeepRenderTargetsAndDepthStencil = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source KeepUnorderedAccessViews Keep Unordered Access Views. Declaration public const uint KeepUnorderedAccessViews = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source LinearGamma Linear Gamma. Declaration public const float LinearGamma = 1F Field Value Type Description Single | Improve this Doc View Source MajorVersion Major Version. Declaration public const uint MajorVersion = 11U Field Value Type Description UInt32 | Improve this Doc View Source MaxAnisotropy Max Anisotropy. Declaration public const uint MaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source MaxBorderColorComponent Max Border Color Component. Declaration public const float MaxBorderColorComponent = 1F Field Value Type Description Single | Improve this Doc View Source MaxDepth Max Depth. Declaration public const float MaxDepth = 1F Field Value Type Description Single | Improve this Doc View Source MaxMultisampleSampleCount Max Multisample Sample Count. Declaration public const uint MaxMultisampleSampleCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source MaxPositionValue Max Position Value. Declaration public const float MaxPositionValue = 3.40282358E+34F Field Value Type Description Single | Improve this Doc View Source MaxTextureDimension2ToExp Max Texture Dimension 2 To Exp. Declaration public const uint MaxTextureDimension2ToExp = 17U Field Value Type Description UInt32 | Improve this Doc View Source MinBorderColorComponent Min Border Color Component. Declaration public const float MinBorderColorComponent = 0F Field Value Type Description Single | Improve this Doc View Source MinDepth Min Depth. Declaration public const float MinDepth = 0F Field Value Type Description Single | Improve this Doc View Source MinMaxAnisotropy Min Max Anisotropy. Declaration public const uint MinMaxAnisotropy = 0U Field Value Type Description UInt32 | Improve this Doc View Source MinorVersion Minor Version. Declaration public const uint MinorVersion = 0U Field Value Type Description UInt32 | Improve this Doc View Source MipLodBiasMax Mip Lod Bias Max. Declaration public const float MipLodBiasMax = 15.99F Field Value Type Description Single | Improve this Doc View Source MipLodBiasMin Mip Lod Bias Min. Declaration public const float MipLodBiasMin = -16F Field Value Type Description Single | Improve this Doc View Source MipLodFractionalBitCount Mip Lod Fractional Bit Count. Declaration public const uint MipLodFractionalBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source MipLodRangeBitCount Mip Lod Range Bit Count. Declaration public const uint MipLodRangeBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source MultisampleAntialiasLineWidth Multisample Antialias Line Width. Declaration public const float MultisampleAntialiasLineWidth = 1.4F Field Value Type Description Single | Improve this Doc View Source NonSampleFetchOutOfRangeAccessResult Non Sample Fetch Out Of Range Access Result. Declaration public const uint NonSampleFetchOutOfRangeAccessResult = 0U Field Value Type Description UInt32 | Improve this Doc View Source PixelAddressRangeBitCount Pixel Address Range Bit Count. Declaration public const uint PixelAddressRangeBitCount = 15U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderComputeShaderUavRegisterComponents Pixel Shader Compute Shader UAV Register Components. Declaration public const uint PixelShaderComputeShaderUavRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderComputeShaderUavRegisterCount Pixel Shader Compute Shader UAV Register Count. Declaration public const uint PixelShaderComputeShaderUavRegisterCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderComputeShaderUavRegisterReadPorts Pixel Shader Compute Shader UAV Register Read Ports. Declaration public const uint PixelShaderComputeShaderUavRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderComputeShaderUavRegisterReadsPerInstance Pixel Shader Compute Shader UAV Register Reads Per Instance. Declaration public const uint PixelShaderComputeShaderUavRegisterReadsPerInstance = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderFrontFacingDefaultValue Pixel Shader Front Facing Default Value. Declaration public const uint PixelShaderFrontFacingDefaultValue = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderFrontFacingFalseValue Pixel Shader Front Facing False Value. Declaration public const uint PixelShaderFrontFacingFalseValue = 0U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderFrontFacingTrueValue Pixel Shader Front Facing True Value. Declaration public const uint PixelShaderFrontFacingTrueValue = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderInputRegisterComponentBitCount Pixel Shader Input Register Component Bit Count. Declaration public const uint PixelShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderInputRegisterComponents Pixel Shader Input Register Components. Declaration public const uint PixelShaderInputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderInputRegisterCount Pixel Shader Input Register Count. Declaration public const uint PixelShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderInputRegisterReadPorts Pixel Shader Input Register Read Ports. Declaration public const uint PixelShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderInputRegisterReadsPerInstance Pixel Shader Input Register Reads Per Instance. Declaration public const uint PixelShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderLegacyPixelCenterFractionalComponent Pixel Shader Legacy Pixel Center Fractional Component. Declaration public const float PixelShaderLegacyPixelCenterFractionalComponent = 0F Field Value Type Description Single | Improve this Doc View Source PixelShaderOutputDepthRegisterComponentBitCount Pixel Shader Output Depth Register Component Bit Count. Declaration public const uint PixelShaderOutputDepthRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputDepthRegisterComponents Pixel Shader Output Depth Register Components. Declaration public const uint PixelShaderOutputDepthRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputDepthRegisterCount Pixel Shader Output Depth Register Count. Declaration public const uint PixelShaderOutputDepthRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputMaskRegisterComponentBitCount Pixel Shader Output Mask Register Component Bit Count. Declaration public const uint PixelShaderOutputMaskRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputMaskRegisterComponents Pixel Shader Output Mask Register Components. Declaration public const uint PixelShaderOutputMaskRegisterComponents = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputMaskRegisterCount Pixel Shader Output Mask Register Count. Declaration public const uint PixelShaderOutputMaskRegisterCount = 1U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputRegisterComponentBitCount Pixel Shader Output Register Component Bit Count. Declaration public const uint PixelShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputRegisterComponents Pixel Shader Output Register Components. Declaration public const uint PixelShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderOutputRegisterCount Pixel Shader Output Register Count. Declaration public const uint PixelShaderOutputRegisterCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source PixelShaderPixelCenterFractionalComponent Pixel Shader Pixel Center Fractional Component. Declaration public const float PixelShaderPixelCenterFractionalComponent = 0.5F Field Value Type Description Single | Improve this Doc View Source PreScissorPixelAddressRangeBitCount Pre Scissor Pixel Address Range Bit Count. Declaration public const uint PreScissorPixelAddressRangeBitCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source RawUavSrvByteAlignment Raw UAV SRV Byte Alignment. Declaration public const uint RawUavSrvByteAlignment = 16U Field Value Type Description UInt32 | Improve this Doc View Source ReqBlendObjectCountPerDevice Req Blend Object Count Per Device. Declaration public const uint ReqBlendObjectCountPerDevice = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqBufferResourceTexelCount2ToExp Req Buffer Resource Texel Count 2 To Exp. Declaration public const uint ReqBufferResourceTexelCount2ToExp = 27U Field Value Type Description UInt32 | Improve this Doc View Source ReqConstantBufferElementCount Req Constant Buffer Element Count. Declaration public const uint ReqConstantBufferElementCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqDepthStencilObjectCountPerDevice Req Depth Stencil Object Count Per Device. Declaration public const uint ReqDepthStencilObjectCountPerDevice = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqDrawIndexedIndexCount2ToExp Req Draw Indexed Index Count 2 To Exp. Declaration public const uint ReqDrawIndexedIndexCount2ToExp = 32U Field Value Type Description UInt32 | Improve this Doc View Source ReqDrawVertexCount2ToExp Req Draw Vertex Count 2 To Exp. Declaration public const uint ReqDrawVertexCount2ToExp = 32U Field Value Type Description UInt32 | Improve this Doc View Source ReqFilteringHardwareAddressableResourceDimension Req Filtering Hardware Addressable Resource Dimension. Declaration public const uint ReqFilteringHardwareAddressableResourceDimension = 16384U Field Value Type Description UInt32 | Improve this Doc View Source ReqGeometryShaderInvocation32BitOutputComponentLimit Req Geometry Shader Invocation 32 Bit Output Component Limit. Declaration public const uint ReqGeometryShaderInvocation32BitOutputComponentLimit = 1024U Field Value Type Description UInt32 | Improve this Doc View Source ReqImmediateConstantBufferElementCount Req Immediate Constant Buffer Element Count. Declaration public const uint ReqImmediateConstantBufferElementCount = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqMaxAnisotropy Req Max Anisotropy. Declaration public const uint ReqMaxAnisotropy = 16U Field Value Type Description UInt32 | Improve this Doc View Source ReqMipLevels Req Mip Levels. Declaration public const uint ReqMipLevels = 15U Field Value Type Description UInt32 | Improve this Doc View Source ReqMultiElementStructureSizeInBytes Req Multi Element Structure Size In Bytes. Declaration public const uint ReqMultiElementStructureSizeInBytes = 2048U Field Value Type Description UInt32 | Improve this Doc View Source ReqRasterizerObjectCountPerDevice Req Rasterizer Object Count Per Device. Declaration public const uint ReqRasterizerObjectCountPerDevice = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqRenderToBufferWindowWidth Req Render To Buffer Window Width. Declaration public const uint ReqRenderToBufferWindowWidth = 16384U Field Value Type Description UInt32 | Improve this Doc View Source ReqResourceSizeInMegabytesExpressionATerm Req Resource Size In Megabytes Expression A Term. Declaration public const uint ReqResourceSizeInMegabytesExpressionATerm = 128U Field Value Type Description UInt32 | Improve this Doc View Source ReqResourceSizeInMegabytesExpressionBTerm Req Resource Size In Megabytes Expression B Term. Declaration public const float ReqResourceSizeInMegabytesExpressionBTerm = 0.25F Field Value Type Description Single | Improve this Doc View Source ReqResourceSizeInMegabytesExpressionCTerm Req Resource Size In Megabytes Expression C Term. Declaration public const uint ReqResourceSizeInMegabytesExpressionCTerm = 2048U Field Value Type Description UInt32 | Improve this Doc View Source ReqResourceViewCountPerDevice2ToExp Req Resource View Count Per Device 2 To Exp. Declaration public const uint ReqResourceViewCountPerDevice2ToExp = 20U Field Value Type Description UInt32 | Improve this Doc View Source ReqSamplerObjectCountPerDevice Req Sampler Object Count Per Device. Declaration public const uint ReqSamplerObjectCountPerDevice = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ReqTexture1DArrayAxisDimension Req Texture 1D Array Axis Dimension. Declaration public const uint ReqTexture1DArrayAxisDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source ReqTexture1DDimension Req Texture 1D Dimension. Declaration public const uint ReqTexture1DDimension = 16384U Field Value Type Description UInt32 | Improve this Doc View Source ReqTexture2DArrayAxisDimension Req Texture 2D Array Axis Dimension. Declaration public const uint ReqTexture2DArrayAxisDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source ReqTexture2DDimension Req Texture 2D Dimension. Declaration public const uint ReqTexture2DDimension = 16384U Field Value Type Description UInt32 | Improve this Doc View Source ReqTexture3DDimension Req Texture 3D Dimension. Declaration public const uint ReqTexture3DDimension = 2048U Field Value Type Description UInt32 | Improve this Doc View Source ReqTextureCubeDimension Req Texture Cube Dimension. Declaration public const uint ReqTextureCubeDimension = 16384U Field Value Type Description UInt32 | Improve this Doc View Source ResinfoInstructionMissingComponentRetval Resinfo Instruction Missing Component Retval. Declaration public const uint ResinfoInstructionMissingComponentRetval = 0U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMajorVersion Shader Major Version. Declaration public const uint ShaderMajorVersion = 5U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMaxInstances Shader Max Instances. Declaration public const uint ShaderMaxInstances = 65535U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMaxInterfaceCallSites Shader Max Interface Call Sites. Declaration public const uint ShaderMaxInterfaceCallSites = 4096U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMaxInterfaces Shader Max Interfaces. Declaration public const uint ShaderMaxInterfaces = 253U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMaxTypes Shader Max Types. Declaration public const uint ShaderMaxTypes = 65535U Field Value Type Description UInt32 | Improve this Doc View Source ShaderMinorVersion Shader Minor Version. Declaration public const uint ShaderMinorVersion = 0U Field Value Type Description UInt32 | Improve this Doc View Source ShiftInstructionPadValue Shift Instruction Pad Value. Declaration public const uint ShiftInstructionPadValue = 0U Field Value Type Description UInt32 | Improve this Doc View Source ShiftInstructionShiftValueBitCount Shift Instruction Shift Value Bit Count. Declaration public const uint ShiftInstructionShiftValueBitCount = 5U Field Value Type Description UInt32 | Improve this Doc View Source SimultaneousRenderTargetCount Simultaneous Render Target Count. Declaration public const uint SimultaneousRenderTargetCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source SpecDateDay Spec Date Day. Declaration public const uint SpecDateDay = 16U Field Value Type Description UInt32 | Improve this Doc View Source SpecDateMonth Spec Date Month. Declaration public const uint SpecDateMonth = 5U Field Value Type Description UInt32 | Improve this Doc View Source SpecDateYear Spec Date Year. Declaration public const uint SpecDateYear = 2011U Field Value Type Description UInt32 | Improve this Doc View Source SpecVersion Spec Version. Declaration public const float SpecVersion = 1.07F Field Value Type Description Single | Improve this Doc View Source SrgbGamma Srgb Gamma. Declaration public const float SrgbGamma = 2.2F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatDenominator1 Srgb To Float Denominator 1. Declaration public const float SrgbToFloatDenominator1 = 12.92F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatDenominator2 Srgb To Float Denominator 2. Declaration public const float SrgbToFloatDenominator2 = 1.055F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatExponent Srgb To Float Exponent. Declaration public const float SrgbToFloatExponent = 2.4F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatOffset Srgb To Float Offset. Declaration public const float SrgbToFloatOffset = 0.055F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatThreshold Srgb To Float Threshold. Declaration public const float SrgbToFloatThreshold = 0.04045F Field Value Type Description Single | Improve this Doc View Source SrgbToFloatToleranceInUlp Srgb To Float Tolerance In Ulp. Declaration public const float SrgbToFloatToleranceInUlp = 0.5F Field Value Type Description Single | Improve this Doc View Source StandardComponentBitCount Standard Component Bit Count. Declaration public const uint StandardComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source StandardComponentBitCountDoubled Standard Component Bit Count Doubled. Declaration public const uint StandardComponentBitCountDoubled = 64U Field Value Type Description UInt32 | Improve this Doc View Source StandardMaximumElementAlignmentByteMultiple Standard Maximum Element Alignment Byte Multiple. Declaration public const uint StandardMaximumElementAlignmentByteMultiple = 4U Field Value Type Description UInt32 | Improve this Doc View Source StandardPixelComponentCount Standard Pixel Component Count. Declaration public const uint StandardPixelComponentCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source StandardPixelElementCount Standard Pixel Element Count. Declaration public const uint StandardPixelElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source StandardVectorSize Standard Vector Size. Declaration public const uint StandardVectorSize = 4U Field Value Type Description UInt32 | Improve this Doc View Source StandardVertexElementCount Standard Vertex Element Count. Declaration public const uint StandardVertexElementCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source StandardVertexTotalComponentCount Standard Vertex Total Component Count. Declaration public const uint StandardVertexTotalComponentCount = 64U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputBufferMaxStrideInBytes Stream Output Buffer Max Stride In Bytes. Declaration public const uint StreamOutputBufferMaxStrideInBytes = 2048U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputBufferMaxWriteWindowInBytes Stream Output Buffer Max Write Window In Bytes. Declaration public const uint StreamOutputBufferMaxWriteWindowInBytes = 512U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputBufferSlotCount Stream Output Buffer Slot Count. Declaration public const uint StreamOutputBufferSlotCount = 4U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputDdiRegisterIndexDenotingGap Stream Output Ddi Register Index Denoting Gap. Declaration public const uint StreamOutputDdiRegisterIndexDenotingGap = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputNoRasterizedStream Stream Output No Rasterized Stream. Declaration public const uint StreamOutputNoRasterizedStream = 4294967295U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputOutputComponentCount Stream Output Output Component Count. Declaration public const uint StreamOutputOutputComponentCount = 128U Field Value Type Description UInt32 | Improve this Doc View Source StreamOutputStreamCount Stream Output Stream Count. Declaration public const uint StreamOutputStreamCount = 4U Field Value Type Description UInt32 | Improve this Doc View Source SubpixelFractionalBitCount Subpixel Fractional Bit Count. Declaration public const uint SubpixelFractionalBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source SubtexelFractionalBitCount Subtexel Fractional Bit Count. Declaration public const uint SubtexelFractionalBitCount = 8U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMaxEvenTessellationFactor Tesselator Max Even Tessellation Factor. Declaration public const uint TesselatorMaxEvenTessellationFactor = 64U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMaxIsolineDensityTessellationFactor Tesselator Max Isoline Density Tessellation Factor. Declaration public const uint TesselatorMaxIsolineDensityTessellationFactor = 64U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMaxOddTessellationFactor Tesselator Max Odd Tessellation Factor. Declaration public const uint TesselatorMaxOddTessellationFactor = 63U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMaxTessellationFactor Tesselator Max Tessellation Factor. Declaration public const uint TesselatorMaxTessellationFactor = 64U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMinEvenTessellationFactor Tesselator Min Even Tessellation Factor. Declaration public const uint TesselatorMinEvenTessellationFactor = 2U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMinIsolineDensityTessellationFactor Tesselator Min Isoline Density Tessellation Factor. Declaration public const uint TesselatorMinIsolineDensityTessellationFactor = 1U Field Value Type Description UInt32 | Improve this Doc View Source TesselatorMinOddTessellationFactor Tesselator Min Odd Tessellation Factor. Declaration public const uint TesselatorMinOddTessellationFactor = 1U Field Value Type Description UInt32 | Improve this Doc View Source TexelAddressRangeBitCount Texel Address Range Bit Count. Declaration public const uint TexelAddressRangeBitCount = 16U Field Value Type Description UInt32 | Improve this Doc View Source UnboundMemoryAccessResult Unbound Memory Access Result. Declaration public const uint UnboundMemoryAccessResult = 0U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderInputRegisterComponentBitCount Vertex Shader Input Register Component Bit Count. Declaration public const uint VertexShaderInputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderInputRegisterComponents Vertex Shader Input Register Components. Declaration public const uint VertexShaderInputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderInputRegisterCount Vertex Shader Input Register Count. Declaration public const uint VertexShaderInputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderInputRegisterReadPorts Vertex Shader Input Register Read Ports. Declaration public const uint VertexShaderInputRegisterReadPorts = 1U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderInputRegisterReadsPerInstance Vertex Shader Input Register Reads Per Instance. Declaration public const uint VertexShaderInputRegisterReadsPerInstance = 2U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderOutputRegisterComponentBitCount Vertex Shader Output Register Component Bit Count. Declaration public const uint VertexShaderOutputRegisterComponentBitCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderOutputRegisterComponents Vertex Shader Output Register Components. Declaration public const uint VertexShaderOutputRegisterComponents = 4U Field Value Type Description UInt32 | Improve this Doc View Source VertexShaderOutputRegisterCount Vertex Shader Output Register Count. Declaration public const uint VertexShaderOutputRegisterCount = 32U Field Value Type Description UInt32 | Improve this Doc View Source ViewportAndScissorRectMaxIndex Viewport And Scissor Rect Max Index. Declaration public const uint ViewportAndScissorRectMaxIndex = 15U Field Value Type Description UInt32 | Improve this Doc View Source ViewportAndScissorRectObjectCountPerPipeline Viewport And Scissor Rect Object Count Per Pipeline. Declaration public const uint ViewportAndScissorRectObjectCountPerPipeline = 16U Field Value Type Description UInt32 | Improve this Doc View Source ViewportBoundsMax Viewport Bounds Max. Declaration public const uint ViewportBoundsMax = 32767U Field Value Type Description UInt32 | Improve this Doc View Source ViewportBoundsMin Viewport Bounds Min. Declaration public const int ViewportBoundsMin = -32768 Field Value Type Description Int32 | Improve this Doc View Source WhqlContextCountForResourceLimit WHQL Context Count For Resource Limit. Declaration public const uint WhqlContextCountForResourceLimit = 10U Field Value Type Description UInt32 | Improve this Doc View Source WhqlDrawIndexedIndexCount2ToExp WHQL Draw Indexed Index Count 2 To Exp. Declaration public const uint WhqlDrawIndexedIndexCount2ToExp = 25U Field Value Type Description UInt32 | Improve this Doc View Source WhqlDrawVertexCount2ToExp WHQL Draw Vertex Count 2 To Exp. Declaration public const uint WhqlDrawVertexCount2ToExp = 25U Field Value Type Description UInt32"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ComputeShader.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ComputeShader.html",
    "title": "Class D3D11ComputeShader",
    "keywords": "Class D3D11ComputeShader A compute shader interface manages an executable program (a compute shader) that controls the compute shader stage. Inheritance Object D3D11DeviceChild D3D11ComputeShader Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11ComputeShader : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.html",
    "title": "Enum D3D11ComparisonFunction",
    "keywords": "Enum D3D11ComparisonFunction Comparison options. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public enum D3D11ComparisonFunction Fields Name Description Always Always pass the comparison. Equal If the source data is equal to the destination data, the comparison passes. Greater If the source data is greater than the destination data, the comparison passes. GreaterEqual If the source data is greater than or equal to the destination data, the comparison passes. Less If the source data is less than the destination data, the comparison passes. LessEqual If the source data is less than or equal to the destination data, the comparison passes. Never Never pass the comparison. None No value. NotEqual If the source data is not equal to the destination data, the comparison passes."
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11CommandList.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11CommandList.html",
    "title": "Class D3D11CommandList",
    "keywords": "Class D3D11CommandList Encapsulates a list of graphics commands for play back. Inheritance Object D3D11DeviceChild D3D11CommandList Implements IDisposable ID3D11Releasable Inherited Members D3D11DeviceChild.ToBoolean() D3D11DeviceChild.Dispose() D3D11DeviceChild.Release() D3D11DeviceChild.SetPrivateDataText(Guid, String) D3D11DeviceChild.GetPrivateDataText(Guid) D3D11DeviceChild.SetDebugName(String) D3D11DeviceChild.GetDebugName() D3D11DeviceChild.GetDevice() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax public sealed class D3D11CommandList : D3D11DeviceChild, IDisposable, ID3D11Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D3D11 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D3D11DeviceChild.Handle Implements System.IDisposable ID3D11Releasable"
  },
  "api/JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.html": {
    "href": "api/JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.html",
    "title": "Enum D3D11ColorWriteEnables",
    "keywords": "Enum D3D11ColorWriteEnables Identify which components of each pixel of a render target are writable during blending. Namespace : JeremyAnsel.DirectX.D3D11 Assembly : JeremyAnsel.DirectX.D3D11.dll Syntax [Flags] public enum D3D11ColorWriteEnables : byte Fields Name Description All Allow data to be stored in all components. Alpha Allow data to be stored in the alpha component. Blue Allow data to be stored in the blue component. Green Allow data to be stored in the green component. None No value. Red Allow data to be stored in the red component."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1TransformedGeometry.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1TransformedGeometry.html",
    "title": "Class D2D1TransformedGeometry",
    "keywords": "Class D2D1TransformedGeometry Represents a geometry that has been transformed. Inheritance Object D2D1Resource D2D1Geometry D2D1TransformedGeometry Implements IDisposable ID2D1Releasable Inherited Members D2D1Geometry.GetBounds() D2D1Geometry.GetBounds(D2D1Matrix3X2F) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle) D2D1Geometry.GetWidenedBounds(Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle) D2D1Geometry.StrokeContainsPoint(D2D1Point2F, Single, D2D1StrokeStyle, D2D1Matrix3X2F) D2D1Geometry.FillContainPoint(D2D1Point2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F, Single) D2D1Geometry.FillContainPoint(D2D1Point2F) D2D1Geometry.FillContainPoint(D2D1Point2F, D2D1Matrix3X2F) D2D1Geometry.CompareWithGeometry(D2D1Geometry, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F, Single) D2D1Geometry.CompareWithGeometry(D2D1Geometry) D2D1Geometry.CompareWithGeometry(D2D1Geometry, D2D1Matrix3X2F) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1SimplifiedGeometrySink) D2D1Geometry.Simplify(D2D1GeometrySimplificationOption, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Tessellate(Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, Single, D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1TessellationSink) D2D1Geometry.Tessellate(D2D1Matrix3X2F, D2D1TessellationSink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1SimplifiedGeometrySink) D2D1Geometry.CombineWithGeometry(D2D1Geometry, D2D1CombineMode, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1SimplifiedGeometrySink) D2D1Geometry.Outline(D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Geometry.ComputeArea(Single) D2D1Geometry.ComputeArea(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeArea() D2D1Geometry.ComputeArea(D2D1Matrix3X2F) D2D1Geometry.ComputeLength(Single) D2D1Geometry.ComputeLength(D2D1Matrix3X2F, Single) D2D1Geometry.ComputeLength() D2D1Geometry.ComputeLength(D2D1Matrix3X2F) D2D1Geometry.ComputePointAtLength(Single, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Point2F, D2D1Point2F) D2D1Geometry.ComputePointAtLength(Single, D2D1Matrix3X2F, D2D1Point2F, D2D1Point2F) D2D1Geometry.Widen(Single, D2D1StrokeStyle, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, Single, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1SimplifiedGeometrySink) D2D1Geometry.Widen(Single, D2D1StrokeStyle, D2D1Matrix3X2F, D2D1SimplifiedGeometrySink) D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1TransformedGeometry : D2D1Geometry, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source SourceGeometry Gets the source geometry of this transformed geometry object. Declaration public D2D1Geometry SourceGeometry { get; } Property Value Type Description D2D1Geometry | Improve this Doc View Source Transform Gets the matrix used to transform the D2D1TransformedGeometry object's source geometry. Declaration public D2D1Matrix3X2F Transform { get; } Property Value Type Description D2D1Matrix3X2F Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1StrokeStyle.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1StrokeStyle.html",
    "title": "Class D2D1StrokeStyle",
    "keywords": "Class D2D1StrokeStyle Describes the caps, miter limit, line join, and dash information for a stroke. Inheritance Object D2D1Resource D2D1StrokeStyle Implements IDisposable ID2D1Releasable Inherited Members D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1StrokeStyle : D2D1Resource, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source DashCap Gets a value that specifies how the ends of each dash are drawn. Declaration public D2D1CapStyle DashCap { get; } Property Value Type Description D2D1CapStyle | Improve this Doc View Source DashOffset Gets a value that specifies how far in the dash sequence the stroke will start. Declaration public float DashOffset { get; } Property Value Type Description Single | Improve this Doc View Source DashStyle Gets a value that describes the stroke's dash pattern. Declaration public D2D1DashStyle DashStyle { get; } Property Value Type Description D2D1DashStyle | Improve this Doc View Source EndCap Gets the type of shape used at the end of a stroke. Declaration public D2D1CapStyle EndCap { get; } Property Value Type Description D2D1CapStyle | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle | Improve this Doc View Source LineJoin Gets the type of joint used at the vertices of a shape's outline. Declaration public D2D1LineJoin LineJoin { get; } Property Value Type Description D2D1LineJoin | Improve this Doc View Source MiterLimit Gets the limit on the ratio of the miter length to half the stroke's thickness. Declaration public float MiterLimit { get; } Property Value Type Description Single | Improve this Doc View Source StartCap Gets the type of shape used at the beginning of a stroke. Declaration public D2D1CapStyle StartCap { get; } Property Value Type Description D2D1CapStyle Methods | Improve this Doc View Source GetDashes() Copies the dash pattern to the specified array. Declaration public float[] GetDashes() Returns Type Description Single [] An array that will receive the dash pattern. | Improve this Doc View Source GetDashesCount() Retrieves the number of entries in the dashes array. Declaration public uint GetDashesCount() Returns Type Description UInt32 The number of entries in the dashes array if the stroke is dashed; otherwise, 0. Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1SolidColorBrush.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1SolidColorBrush.html",
    "title": "Class D2D1SolidColorBrush",
    "keywords": "Class D2D1SolidColorBrush Paints an area with a solid color. Inheritance Object D2D1Resource D2D1Brush D2D1SolidColorBrush Implements IDisposable ID2D1Releasable Inherited Members D2D1Brush.Opacity D2D1Brush.Transform D2D1Resource.ToBoolean() D2D1Resource.Dispose() D2D1Resource.Release() D2D1Resource.GetFactory() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public sealed class D2D1SolidColorBrush : D2D1Brush, IDisposable, ID2D1Releasable Properties | Improve this Doc View Source Color Gets or sets the color of the solid color brush. Declaration public D2D1ColorF Color { get; set; } Property Value Type Description D2D1ColorF | Improve this Doc View Source Handle Gets an handle representing the D2D1 object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides D2D1Resource.Handle Implements System.IDisposable ID2D1Releasable"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1SizeU.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1SizeU.html",
    "title": "Struct D2D1SizeU",
    "keywords": "Struct D2D1SizeU Stores an ordered pair of integers, typically the width and height of a rectangle. Implements IEquatable < D2D1SizeU > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1SizeU : IEquatable<D2D1SizeU> Constructors | Improve this Doc View Source D2D1SizeU(UInt32, UInt32) Initializes a new instance of the D2D1SizeU struct. Declaration public D2D1SizeU(uint width, uint height) Parameters Type Name Description UInt32 width The horizontal component of this size. UInt32 height The vertical component of this size. Properties | Improve this Doc View Source Height Gets or sets the vertical component of this size. Declaration public uint Height { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Width Gets or sets the horizontal component of this size. Declaration public uint Width { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(D2D1SizeU) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1SizeU other) Parameters Type Name Description D2D1SizeU other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1SizeU, D2D1SizeU) Compares two D2D1SizeU objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1SizeU left, D2D1SizeU right) Parameters Type Name Description D2D1SizeU left The left D2D1SizeU to compare. D2D1SizeU right The right D2D1SizeU to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1SizeU, D2D1SizeU) Compares two D2D1SizeU objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1SizeU left, D2D1SizeU right) Parameters Type Name Description D2D1SizeU left The left D2D1SizeU to compare. D2D1SizeU right The right D2D1SizeU to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1SizeF.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1SizeF.html",
    "title": "Struct D2D1SizeF",
    "keywords": "Struct D2D1SizeF Stores an ordered pair of floats, typically the width and height of a rectangle. Implements IEquatable < D2D1SizeF > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public struct D2D1SizeF : IEquatable<D2D1SizeF> Constructors | Improve this Doc View Source D2D1SizeF(Single, Single) Initializes a new instance of the D2D1SizeF struct. Declaration public D2D1SizeF(float width, float height) Parameters Type Name Description Single width The horizontal component of this size. Single height The vertical component of this size. Properties | Improve this Doc View Source Height Gets or sets the vertical component of this size. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the horizontal component of this size. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(D2D1SizeF) Determines whether the specified object is equal to the current object. Declaration public bool Equals(D2D1SizeF other) Parameters Type Name Description D2D1SizeF other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(D2D1SizeF, D2D1SizeF) Compares two D2D1SizeF objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(D2D1SizeF left, D2D1SizeF right) Parameters Type Name Description D2D1SizeF left The left D2D1SizeF to compare. D2D1SizeF right The right D2D1SizeF to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(D2D1SizeF, D2D1SizeF) Compares two D2D1SizeF objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(D2D1SizeF left, D2D1SizeF right) Parameters Type Name Description D2D1SizeF left The left D2D1SizeF to compare. D2D1SizeF right The right D2D1SizeF to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetUsages.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1RenderTargetUsages.html",
    "title": "Enum D2D1RenderTargetUsages",
    "keywords": "Enum D2D1RenderTargetUsages Describes how a render target is remoted and whether it should be GDI-compatible. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax [Flags] public enum D2D1RenderTargetUsages Fields Name Description ForceBitmapRemoting The render target renders content locally and sends it to the terminal services client as a bitmap. GdiCompatible The render target can be used efficiently with GDI. None The render target attempts to use Direct3D command-stream remoting and uses bitmap remoting if stream remoting fails. The render target is not GDI-compatible."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1ArcSize.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1ArcSize.html",
    "title": "Enum D2D1ArcSize",
    "keywords": "Enum D2D1ArcSize Specifies whether an arc should be greater than 180 degrees. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1ArcSize Fields Name Description Large An arc's sweep should be 180 degrees or greater. Small An arc's sweep should be 180 degrees or less."
  },
  "api/JeremyAnsel.DirectX.D2D1.D2D1AntialiasMode.html": {
    "href": "api/JeremyAnsel.DirectX.D2D1.D2D1AntialiasMode.html",
    "title": "Enum D2D1AntialiasMode",
    "keywords": "Enum D2D1AntialiasMode Specifies how the edges of nontext primitives are rendered. Namespace : JeremyAnsel.DirectX.D2D1 Assembly : JeremyAnsel.DirectX.D2D1.dll Syntax public enum D2D1AntialiasMode Fields Name Description Aliased Each pixel is rendered if its pixel center is contained by the geometry. PerPrimitive The edges of each primitive are antialiased sequentially."
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphOffset.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphOffset.html",
    "title": "Struct DWriteGlyphOffset",
    "keywords": "Struct DWriteGlyphOffset Optional adjustment to a glyph's position. A glyph offset changes the position of a glyph without affecting the pen position. Offsets are in logical, pre-transform units. Implements IEquatable < DWriteGlyphOffset > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteGlyphOffset : IEquatable<DWriteGlyphOffset> Constructors | Improve this Doc View Source DWriteGlyphOffset(Single, Single) Initializes a new instance of the DWriteGlyphOffset struct. Declaration public DWriteGlyphOffset(float advanceOffset, float ascenderOffset) Parameters Type Name Description Single advanceOffset Offset in the advance direction of the run. Single ascenderOffset Offset in the ascent direction, i.e., the direction ascenders point. Properties | Improve this Doc View Source AdvanceOffset Gets or sets the offset in the advance direction of the run. A positive advance offset moves the glyph to the right (in pre-transform coordinates) if the run is left-to-right or to the left if the run is right-to-left. Declaration public float AdvanceOffset { get; set; } Property Value Type Description Single | Improve this Doc View Source AscenderOffset Gets or sets the offset in the ascent direction, i.e., the direction ascenders point. A positive ascender offset moves the glyph up (in pre-transform coordinates). Declaration public float AscenderOffset { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(DWriteGlyphOffset) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteGlyphOffset other) Parameters Type Name Description DWriteGlyphOffset other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteGlyphOffset, DWriteGlyphOffset) Compares two DWriteGlyphOffset objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteGlyphOffset left, DWriteGlyphOffset right) Parameters Type Name Description DWriteGlyphOffset left The left DWriteGlyphOffset to compare. DWriteGlyphOffset right The right DWriteGlyphOffset to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteGlyphOffset, DWriteGlyphOffset) Compares two DWriteGlyphOffset objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteGlyphOffset left, DWriteGlyphOffset right) Parameters Type Name Description DWriteGlyphOffset left The left DWriteGlyphOffset to compare. DWriteGlyphOffset right The right DWriteGlyphOffset to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphMetrics.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteGlyphMetrics.html",
    "title": "Struct DWriteGlyphMetrics",
    "keywords": "Struct DWriteGlyphMetrics The DWRITE_GLYPH_METRICS structure specifies the metrics of an individual glyph. The units depend on how the metrics are obtained. Implements IEquatable < DWriteGlyphMetrics > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public struct DWriteGlyphMetrics : IEquatable<DWriteGlyphMetrics> Properties | Improve this Doc View Source AdvanceHeight Gets the Y offset from the vertical origin of the current glyph to the vertical origin of the next glyph when writing vertically. (Note that the term \"origin\" by itself denotes the horizontal origin. The vertical origin is different. Its Y coordinate is specified by verticalOriginY value, and its X coordinate is half the advanceWidth to the right of the horizontal origin). Declaration public uint AdvanceHeight { get; } Property Value Type Description UInt32 | Improve this Doc View Source AdvanceWidth Gets the X offset from the origin of the current glyph to the origin of the next glyph when writing horizontally. Declaration public uint AdvanceWidth { get; } Property Value Type Description UInt32 | Improve this Doc View Source BottomSideBearing Gets the vertical distance from the black box's bottom edge to the advance height. Positive when the bottom edge of the black box is within the layout box. Negative when the bottom edge of black box overhangs the layout box. Declaration public int BottomSideBearing { get; } Property Value Type Description Int32 | Improve this Doc View Source LeftSideBearing Gets the X offset from the glyph origin to the left edge of the black box. The glyph origin is the current horizontal writing position. A negative value means the black box extends to the left of the origin (often true for lowercase italic 'f'). Declaration public int LeftSideBearing { get; } Property Value Type Description Int32 | Improve this Doc View Source RightSideBearing Gets the X offset from the right edge of the black box to the origin of the next glyph when writing horizontally. The value is negative when the right edge of the black box overhangs the layout box. Declaration public int RightSideBearing { get; } Property Value Type Description Int32 | Improve this Doc View Source TopSideBearing Gets the vertical offset from the vertical origin to the top of the black box. Thus, a positive value adds whitespace whereas a negative value means the glyph overhangs the top of the layout box. Declaration public int TopSideBearing { get; } Property Value Type Description Int32 | Improve this Doc View Source VerticalOriginY Gets the Y coordinate of a glyph's vertical origin, in the font's design coordinate system. The y coordinate of a glyph's vertical origin is the sum of the glyph's top side bearing and the top (i.e. yMax) of the glyph's bounding box. Declaration public int VerticalOriginY { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DWriteGlyphMetrics) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DWriteGlyphMetrics other) Parameters Type Name Description DWriteGlyphMetrics other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(DWriteGlyphMetrics, DWriteGlyphMetrics) Compares two DWriteGlyphMetrics objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DWriteGlyphMetrics left, DWriteGlyphMetrics right) Parameters Type Name Description DWriteGlyphMetrics left The left DWriteGlyphMetrics to compare. DWriteGlyphMetrics right The right DWriteGlyphMetrics to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DWriteGlyphMetrics, DWriteGlyphMetrics) Compares two DWriteGlyphMetrics objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DWriteGlyphMetrics left, DWriteGlyphMetrics right) Parameters Type Name Description DWriteGlyphMetrics left The left DWriteGlyphMetrics to compare. DWriteGlyphMetrics right The right DWriteGlyphMetrics to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.DWrite.DWriteFontWeight.html": {
    "href": "api/JeremyAnsel.DirectX.DWrite.DWriteFontWeight.html",
    "title": "Enum DWriteFontWeight",
    "keywords": "Enum DWriteFontWeight The font weight enumeration describes common values for degree of blackness or thickness of strokes of characters in a font. Font weight values less than 1 or greater than 999 are considered to be invalid, and they are rejected by font API functions. Namespace : JeremyAnsel.DirectX.DWrite Assembly : JeremyAnsel.DirectX.DWrite.dll Syntax public enum DWriteFontWeight Fields Name Description Black Predefined font weight : Black (900). Bold Predefined font weight : Bold (700). DemiBold Predefined font weight : Demi-bold (600). ExtraBlack Predefined font weight : Extra-black (950). ExtraBold Predefined font weight : Extra-bold (800). ExtraLight Predefined font weight : Extra-light (200). Heavy Predefined font weight : Heavy (900). Light Predefined font weight : Light (300). Medium Predefined font weight : Medium (500). Normal Predefined font weight : Normal (400). Regular Predefined font weight : Regular (400). SemiBold Predefined font weight : Semi-bold (600). SemiLight Predefined font weight : Semi-light (350). Thin Predefined font weight : Thin (100). UltraBlack Predefined font weight : Ultra-black (950). UltraBold Predefined font weight : Ultra-bold (800). UltraLight Predefined font weight : Ultra-light (200)."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSurface.html",
    "title": "Class DxgiSurface",
    "keywords": "Class DxgiSurface The IDXGISurface interface implements methods for image-data objects. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSurface Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSurface : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiSurface(Object) Initializes a new instance of the DxgiSurface class. Declaration public DxgiSurface(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDXGISurface interface. Fields | Improve this Doc View Source InterfaceGuid The interface GUID. Declaration public static readonly Guid InterfaceGuid Field Value Type Description Guid Properties | Improve this Doc View Source Description Gets a description of the surface. Declaration public DxgiSurfaceDesc Description { get; } Property Value Type Description DxgiSurfaceDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source Map(DxgiMapOptions) Get a pointer to the data contained in the surface, and deny GPU access to the surface. Declaration public DxgiMappedRect Map(DxgiMapOptions options) Parameters Type Name Description DxgiMapOptions options CPU read-write flags. These flags can be combined with a logical OR. Returns Type Description DxgiMappedRect The surface data. | Improve this Doc View Source Unmap() Invalidate the pointer to the surface retrieved by IDXGISurface::Map and re-enable GPU access to the resource. Declaration public void Unmap() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess.html",
    "title": "Enum DxgiSharedResourceAccess",
    "keywords": "Enum DxgiSharedResourceAccess The shared resource accesses options. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiSharedResourceAccess Fields Name Description Read Read access to the resource. Unspecified Unspecified access Write Write access to the resource."
  },
  "api/JeremyAnsel.DirectX.DXMath.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.html",
    "title": "Namespace JeremyAnsel.DirectX.DXMath",
    "keywords": "Namespace JeremyAnsel.DirectX.DXMath Classes XMColor The color functions provided by DirectXMath. XMKnownColor Constants for the standard color definitions. XMMath Constants and functions provided by XMMath. XMPlane The plane functions provided by DirectXMath. XMQuaternion The quaternion functions provided by DirectXMath. XMScalar The scalar functions provided by DirectXMath. XMVector2 The 2D vector functions provided by DirectXMath. XMVector3 The 3D vector functions provided by DirectXMath. XMVector4 The 4D vector functions provided by DirectXMath. Structs XMComparisonRecord A comparison value. XMFloat2 A 2D vector consisting of two single-precision floating-point values. XMFloat3 A 3D vector consisting of three single-precision floating-point values. XMFloat3X3 A 3*3 floating point matrix. XMFloat4 A 4D vector consisting of four single-precision floating-point values. XMFloat4X3 A 4*3 floating point matrix. XMFloat4X4 A 4*4 floating point matrix. XMInt2 A 2D vector where each component is a signed integer. XMInt3 A 3D vector where each component is a signed integer. XMInt4 A 4D vector where each component is a signed integer. XMMatrix Describes a 4*4 matrix. XMUInt2 A 2D vector where each component is an unsigned integer. XMUInt3 A 3D vector where each component is an unsigned integer. XMUInt4 A 4D vector where each component is an unsigned integer. XMVector A vector of four 32-bit floating-point or integer components. Enums XMPermutation Constants used as an element index with Permute(XMVector, XMVector, XMPermutation, XMPermutation, XMPermutation, XMPermutation) . XMSelection Constants used to construct a control vector used with Select(XMVector, XMVector, XMVector) . XMSwizzle Constants used as an element index with Swizzle(XMSwizzle, XMSwizzle, XMSwizzle, XMSwizzle) ."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMVector4.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMVector4.html",
    "title": "Class XMVector4",
    "keywords": "Class XMVector4 The 4D vector functions provided by DirectXMath. Inheritance Object XMVector4 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMVector4 Methods | Improve this Doc View Source AngleBetweenNormals(XMVector, XMVector) Compute the radian angle between two normalized 4D vectors. Declaration public static XMVector AngleBetweenNormals(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first normalized vector. XMVector n2 The second normalized vector. Returns Type Description XMVector Returns a vector. The radian angle between N1 and N2 is replicated to each of the components. | Improve this Doc View Source AngleBetweenNormalsEst(XMVector, XMVector) Estimates the radian angle between two normalized 4D vectors. Declaration public static XMVector AngleBetweenNormalsEst(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first normalized vector. XMVector n2 The second normalized vector. Returns Type Description XMVector Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components. | Improve this Doc View Source AngleBetweenVectors(XMVector, XMVector) Compute the radian angle between two 4D vectors. Declaration public static XMVector AngleBetweenVectors(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The radian angle between V1 and V2 is replicated to each of the components. | Improve this Doc View Source ClampLength(XMVector, Single, Single) Clamps the length of a 4D vector to a given range. Declaration public static XMVector ClampLength(XMVector v, float lengthMin, float lengthMax) Parameters Type Name Description XMVector v The vector. Single lengthMin The minimum clamp length. Single lengthMax The maximum clamp length. Returns Type Description XMVector Returns a 4D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source ClampLengthV(XMVector, XMVector, XMVector) Clamps the length of a 4D vector to a given range. Declaration public static XMVector ClampLengthV(XMVector v, XMVector lengthMin, XMVector lengthMax) Parameters Type Name Description XMVector v The vector. XMVector lengthMin A 4D vector, all of whose components are equal to the minimum clamp length. The components must be greater-than-or-equal to zero. XMVector lengthMax A 4D vector, all of whose components are equal to the maximum clamp length. The components must be greater-than-or-equal to zero. Returns Type Description XMVector Returns a 4D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source Cross(XMVector, XMVector, XMVector) Computes the 4D cross product. Declaration public static XMVector Cross(XMVector v1, XMVector v2, XMVector v3) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector v3 The third vector. Returns Type Description XMVector Returns the 4D cross product of V1, V2, and V3. | Improve this Doc View Source Dot(XMVector, XMVector) Computes the dot product between 4D vectors. Declaration public static XMVector Dot(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The dot product between V1 and V2 is replicated into each component. | Improve this Doc View Source Equal(XMVector, XMVector) Tests whether two 4D vectors are equal. Declaration public static bool Equal(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 4D vectors are equal and false otherwise. | Improve this Doc View Source EqualInt(XMVector, XMVector) Tests whether two 4D vectors are equal, treating each component as an unsigned integer. Declaration public static bool EqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 4D vectors are equal and false otherwise. | Improve this Doc View Source EqualIntR(XMVector, XMVector) Tests whether two 4D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison value. Declaration public static XMComparisonRecord EqualIntR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source EqualR(XMVector, XMVector) Tests whether two 4D vectors are equal. In addition, this function returns a comparison value. Declaration public static XMComparisonRecord EqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source Greater(XMVector, XMVector) Tests whether one 4D vector is greater than another 4D vector. Declaration public static bool Greater(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater than V2 and false otherwise. | Improve this Doc View Source GreaterOrEqual(XMVector, XMVector) Tests whether one 4D vector is greater-than-or-equal-to another 4D vector. Declaration public static bool GreaterOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater-than-or-equal-to V2 and false otherwise. | Improve this Doc View Source GreaterOrEqualR(XMVector, XMVector) Tests whether one 4D vector is greater-than-or-equal-to another 4D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterOrEqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source GreaterR(XMVector, XMVector) Tests whether one 4D vector is greater than another 4D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source InBounds(XMVector, XMVector) Tests whether the components of a 4D vector are within set bounds. Declaration public static bool InBounds(XMVector v, XMVector bounds) Parameters Type Name Description XMVector v The vector to test. XMVector bounds The vector that determines the bounds. Returns Type Description Boolean Returns true if all of the components of V are within the set bounds, and false otherwise. | Improve this Doc View Source IsInfinite(XMVector) Tests whether any component of a 4D vector is positive or negative infinity. Declaration public static bool IsInfinite(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is positive or negative infinity, and false otherwise. | Improve this Doc View Source IsNaN(XMVector) Tests whether any component of a 4D vector is a NaN. Declaration public static bool IsNaN(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is a NaN, and false otherwise. | Improve this Doc View Source Length(XMVector) Computes the length of a 4D vector. Declaration public static XMVector Length(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector. The length of V is replicated into each component. | Improve this Doc View Source LengthEst(XMVector) Estimates the length of a 4D vector. Declaration public static XMVector LengthEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the length of V. | Improve this Doc View Source LengthSquare(XMVector) Computes the square of the length of a 4D vector. Declaration public static XMVector LengthSquare(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector. The square of the length of V is replicated into each component. | Improve this Doc View Source Less(XMVector, XMVector) Tests whether one 4D vector is less than another 4D vector. Declaration public static bool Less(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less than V2 and false otherwise. | Improve this Doc View Source LessOrEqual(XMVector, XMVector) Tests whether one 4D vector is less-than-or-equal-to another 4D vector. Declaration public static bool LessOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less-than-or-equal-to V2, and false otherwise. | Improve this Doc View Source NearEqual(XMVector, XMVector, XMVector) Tests whether one 4D vector is near another 4D vector. Declaration public static bool NearEqual(XMVector v1, XMVector v2, XMVector epsilon) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector epsilon The tolerance value used for judging equality. Returns Type Description Boolean Returns true if V1 is near V2 and false otherwise. | Improve this Doc View Source Normalize(XMVector) Returns the normalized version of a 4D vector. Declaration public static XMVector Normalize(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns the normalized version of V. | Improve this Doc View Source NormalizeEst(XMVector) Estimates the normalized version of a 4D vector. Declaration public static XMVector NormalizeEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns an estimate of the normalized version of V. | Improve this Doc View Source NotEqual(XMVector, XMVector) Tests whether two 4D vectors are not equal. Declaration public static bool NotEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 4D vectors are not equal and false otherwise. | Improve this Doc View Source NotEqualInt(XMVector, XMVector) Test whether two 4D vectors are not equal, treating each component as an unsigned integer. Declaration public static bool NotEqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 4D vectors are not equal and false otherwise. | Improve this Doc View Source Orthogonal(XMVector) Computes a vector perpendicular to a 4D vector. Declaration public static XMVector Orthogonal(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns the 4D vector orthogonal to V. | Improve this Doc View Source ReciprocalLength(XMVector) Computes the reciprocal of the length of a 4D vector. Declaration public static XMVector ReciprocalLength(XMVector v) Parameters Type Name Description XMVector v he vector. Returns Type Description XMVector Returns the reciprocal of the length of V. | Improve this Doc View Source ReciprocalLengthEst(XMVector) Estimates the reciprocal of the length of a 4D vector. Declaration public static XMVector ReciprocalLengthEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the reciprocal of the length of V. | Improve this Doc View Source Reflect(XMVector, XMVector) Reflects an incident 4D vector across a 4D normal vector. Declaration public static XMVector Reflect(XMVector incident, XMVector normal) Parameters Type Name Description XMVector incident The incident vector to reflect. XMVector normal The normal vector to reflect the incident vector across. Returns Type Description XMVector Returns the reflected incident angle. | Improve this Doc View Source Refract(XMVector, XMVector, Single) Refracts an incident 4D vector across a 4D normal vector. Declaration public static XMVector Refract(XMVector incident, XMVector normal, float refractionIndex) Parameters Type Name Description XMVector incident The incident vector to refract. XMVector normal The normal vector to refract the incident vector through. Single refractionIndex The index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source RefractV(XMVector, XMVector, XMVector) Refracts an incident 4D vector across a 4D normal vector. Declaration public static XMVector RefractV(XMVector incident, XMVector normal, XMVector refractionIndex) Parameters Type Name Description XMVector incident The incident vector to refract. XMVector normal The normal vector to refract the incident vector through. XMVector refractionIndex A 4D vector, all of whose components are equal to the index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source Transform(XMVector, XMMatrix) Transforms a 4D vector by a matrix. Declaration public static XMVector Transform(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMVector3.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMVector3.html",
    "title": "Class XMVector3",
    "keywords": "Class XMVector3 The 3D vector functions provided by DirectXMath. Inheritance Object XMVector3 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMVector3 Methods | Improve this Doc View Source AngleBetweenNormals(XMVector, XMVector) Computes the radian angle between two normalized 3D vectors. Declaration public static XMVector AngleBetweenNormals(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first normalized vector. XMVector n2 The second normalized vector. Returns Type Description XMVector Returns a vector. The radian angle between N1 and N2 is replicated to each of the components. | Improve this Doc View Source AngleBetweenNormalsEst(XMVector, XMVector) Estimates the radian angle between two normalized 3D vectors. Declaration public static XMVector AngleBetweenNormalsEst(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first normalized vector. XMVector n2 The second normalized vector. Returns Type Description XMVector Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components. | Improve this Doc View Source AngleBetweenVectors(XMVector, XMVector) Computes the radian angle between two 3D vectors. Declaration public static XMVector AngleBetweenVectors(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The radian angle between V1 and V2 is replicated to each of the components. | Improve this Doc View Source ClampLength(XMVector, Single, Single) Clamps the length of a 3D vector to a given range. Declaration public static XMVector ClampLength(XMVector v, float lengthMin, float lengthMax) Parameters Type Name Description XMVector v The vector. Single lengthMin The minimum clamp length. Single lengthMax The maximum clamp length. Returns Type Description XMVector Returns a 3D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source ClampLengthV(XMVector, XMVector, XMVector) Clamps the length of a 3D vector to a given range. Declaration public static XMVector ClampLengthV(XMVector v, XMVector lengthMin, XMVector lengthMax) Parameters Type Name Description XMVector v The vector. XMVector lengthMin A 3D vector whose x, y, and z-components are equal to the minimum clamp length. The x, y, and z-components must be greater-than-or-equal to zero. XMVector lengthMax A 3D vector whose x, y, and z-components are equal to the maximum clamp length. The x, y, and z-components must be greater-than-or-equal to zero. Returns Type Description XMVector Returns a 3D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source ComponentsFromNormal(out XMVector, out XMVector, XMVector, XMVector) Using a reference normal vector, splits a 3D vector into components that are parallel and perpendicular to the normal. Declaration public static void ComponentsFromNormal(out XMVector parallel, out XMVector perpendicular, XMVector v, XMVector normal) Parameters Type Name Description XMVector parallel The component of V that is parallel to Normal. XMVector perpendicular The component of V that is perpendicular to Normal. XMVector v The vector to break into components. XMVector normal The reference normal vector. | Improve this Doc View Source Cross(XMVector, XMVector) Computes the cross product between two 3D vectors. Declaration public static XMVector Cross(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns the cross product of V1 and V2. | Improve this Doc View Source Dot(XMVector, XMVector) Computes the dot product between 3D vectors. Declaration public static XMVector Dot(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The dot product between V1 and V2 is replicated into each component. | Improve this Doc View Source Equal(XMVector, XMVector) Tests whether two 3D vectors are equal. Declaration public static bool Equal(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 3D vectors are equal and false otherwise. | Improve this Doc View Source EqualInt(XMVector, XMVector) Tests whether two 3D vectors are equal, treating each component as an unsigned integer. Declaration public static bool EqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 3D vectors are equal and false otherwise. | Improve this Doc View Source EqualIntR(XMVector, XMVector) Tests whether two 3D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison value. Declaration public static XMComparisonRecord EqualIntR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source EqualR(XMVector, XMVector) Tests whether two 3D vectors are equal. In addition, this function returns a comparison value. Declaration public static XMComparisonRecord EqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source Greater(XMVector, XMVector) Tests whether one 3D vector is greater than another 3D vector. Declaration public static bool Greater(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater than V2 and false otherwise. | Improve this Doc View Source GreaterOrEqual(XMVector, XMVector) Tests whether one 3D vector is greater-than-or-equal-to another 3D vector. Declaration public static bool GreaterOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater-than-or-equal-to V2 and false otherwise. | Improve this Doc View Source GreaterOrEqualR(XMVector, XMVector) Tests whether one 3D vector is greater-than-or-equal-to another 3D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterOrEqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source GreaterR(XMVector, XMVector) Tests whether one 3D vector is greater than another 3D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source InBounds(XMVector, XMVector) Tests whether the components of a 3D vector are within set bounds. Declaration public static bool InBounds(XMVector v, XMVector bounds) Parameters Type Name Description XMVector v The vector to test. XMVector bounds The vector that determines the bounds. Returns Type Description Boolean Returns true if both the x, y, and z-components of V are within the set bounds, and false otherwise. | Improve this Doc View Source InverseRotate(XMVector, XMVector) Rotates a 3D vector using the inverse of a quaternion. Declaration public static XMVector InverseRotate(XMVector v, XMVector rotationQuaternion) Parameters Type Name Description XMVector v The vector to rotate. XMVector rotationQuaternion The quaternion that describes the inverse of the rotation to apply to the vector. Returns Type Description XMVector Returns the rotated 3D vector. | Improve this Doc View Source IsInfinite(XMVector) Tests whether any component of a 3D vector is positive or negative infinity. Declaration public static bool IsInfinite(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is positive or negative infinity, and false otherwise. | Improve this Doc View Source IsNaN(XMVector) Tests whether any component of a 3D vector is a NaN. Declaration public static bool IsNaN(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is a NaN, and false otherwise. | Improve this Doc View Source Length(XMVector) Computes the length of a 3D vector. Declaration public static XMVector Length(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector. The length of V is replicated into each component. | Improve this Doc View Source LengthEst(XMVector) Estimates the length of a 3D vector. Declaration public static XMVector LengthEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the length of V. | Improve this Doc View Source LengthSquare(XMVector) Computes the square of the length of a 3D vector. Declaration public static XMVector LengthSquare(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector. The square of the length of V is replicated into each component. | Improve this Doc View Source Less(XMVector, XMVector) Tests whether one 3D vector is less than another 3D vector. Declaration public static bool Less(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The fist vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less than V2 and false otherwise. | Improve this Doc View Source LessOrEqual(XMVector, XMVector) Tests whether one 3D vector is less-than-or-equal-to another 3D vector. Declaration public static bool LessOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less-than-or-equal-to V2 and false otherwise. | Improve this Doc View Source LinePointDistance(XMVector, XMVector, XMVector) Computes the minimum distance between a line and a point. Declaration public static XMVector LinePointDistance(XMVector linePoint1, XMVector linePoint2, XMVector point) Parameters Type Name Description XMVector linePoint1 The first point on the line. XMVector linePoint2 The second point on the line. XMVector point The reference point. Returns Type Description XMVector Returns a vector. The minimum distance between the line and the point is replicated to each of the components. | Improve this Doc View Source NearEqual(XMVector, XMVector, XMVector) Tests whether one 3D vector is near another 3D vector. Declaration public static bool NearEqual(XMVector v1, XMVector v2, XMVector epsilon) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector epsilon Tolerance value used for judging equality. Returns Type Description Boolean Returns true if V1 is near V2 and false otherwise. | Improve this Doc View Source Normalize(XMVector) Returns the normalized version of a 3D vector. Declaration public static XMVector Normalize(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns the normalized version of V. | Improve this Doc View Source NormalizeEst(XMVector) Estimates the normalized version of a 3D vector. Declaration public static XMVector NormalizeEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns an estimate of the normalized version of V. | Improve this Doc View Source NotEqual(XMVector, XMVector) Tests whether two 3D vectors are not equal. Declaration public static bool NotEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 3D vectors are not equal and false otherwise. | Improve this Doc View Source NotEqualInt(XMVector, XMVector) Test whether two 3D vectors are not equal, treating each component as an unsigned integer. Declaration public static bool NotEqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 3D vectors are not equal and false otherwise. | Improve this Doc View Source Orthogonal(XMVector) Computes a vector perpendicular to a 3D vector. Declaration public static XMVector Orthogonal(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a 3D vector orthogonal to V. | Improve this Doc View Source Project(XMVector, Single, Single, Single, Single, Single, Single, XMMatrix, XMMatrix, XMMatrix) Project a 3D vector from object space into screen space. Declaration public static XMVector Project(XMVector v, float viewportX, float viewportY, float viewportWidth, float viewportHeight, float viewportMinZ, float viewportMaxZ, XMMatrix projection, XMMatrix view, XMMatrix world) Parameters Type Name Description XMVector v The vector in object space that will be projected into screen space. Single viewportX Pixel coordinate of the upper-left corner of the viewport. Unless you want to render to a subset of the surface, this parameter can be set to 0. Single viewportY Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this parameter can be set to 0. Single viewportWidth Width dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the width dimension of the render-target surface. Single viewportHeight Height dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the height dimension of the render-target surface. Single viewportMinZ Together with ViewportMaxZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0f. Clipping is performed after applying the projection matrix. Single viewportMaxZ Together with MinZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0f. Clipping is performed after applying the projection matrix. XMMatrix projection Projection matrix. XMMatrix view View matrix. XMMatrix world World matrix. Returns Type Description XMVector Returns a vector in screen space. | Improve this Doc View Source ReciprocalLength(XMVector) Computes the reciprocal of the length of a 3D vector. Declaration public static XMVector ReciprocalLength(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector. The reciprocal of the length of V is replicated into each of the returned vector's components. | Improve this Doc View Source ReciprocalLengthEst(XMVector) Estimates the reciprocal of the length of a 3D vector. Declaration public static XMVector ReciprocalLengthEst(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the reciprocal of the length of V. | Improve this Doc View Source Reflect(XMVector, XMVector) Reflects an incident 3D vector across a 3D normal vector. Declaration public static XMVector Reflect(XMVector incident, XMVector normal) Parameters Type Name Description XMVector incident The incident vector to reflect. XMVector normal The normal vector to reflect the incident vector across. Returns Type Description XMVector Returns the reflected incident angle. | Improve this Doc View Source Refract(XMVector, XMVector, Single) Refracts an incident 3D vector across a 3D normal vector. Declaration public static XMVector Refract(XMVector incident, XMVector normal, float refractionIndex) Parameters Type Name Description XMVector incident The incident vector to refract. XMVector normal The normal vector to refract the incident vector through. Single refractionIndex The index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source RefractV(XMVector, XMVector, XMVector) Refracts an incident 3D vector across a 3D normal vector. Declaration public static XMVector RefractV(XMVector incident, XMVector normal, XMVector refractionIndex) Parameters Type Name Description XMVector incident The incident vector to refract. XMVector normal The normal vector to refract the incident vector through. XMVector refractionIndex A vector whose x, y, and z-components are equal to the index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source Rotate(XMVector, XMVector) Rotates a 3D vector using a quaternion. Declaration public static XMVector Rotate(XMVector v, XMVector rotationQuaternion) Parameters Type Name Description XMVector v The vector to rotate. XMVector rotationQuaternion The quaternion that describes the rotation to apply to the vector. Returns Type Description XMVector The rotated 3D vector. | Improve this Doc View Source Transform(XMVector, XMMatrix) Transforms a 3D vector by a matrix. Declaration public static XMVector Transform(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector. | Improve this Doc View Source TransformCoord(XMVector, XMMatrix) Transforms a 3D vector by a given matrix, projecting the result back into w = 1. Declaration public static XMVector TransformCoord(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector. | Improve this Doc View Source TransformNormal(XMVector, XMMatrix) Transforms the 3D vector normal by the given matrix. Declaration public static XMVector TransformNormal(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The normal vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector. | Improve this Doc View Source Unproject(XMVector, Single, Single, Single, Single, Single, Single, XMMatrix, XMMatrix, XMMatrix) Projects a 3D vector from screen space into object space. Declaration public static XMVector Unproject(XMVector v, float viewportX, float viewportY, float viewportWidth, float viewportHeight, float viewportMinZ, float viewportMaxZ, XMMatrix projection, XMMatrix view, XMMatrix world) Parameters Type Name Description XMVector v The vector in screen space that will be projected into object space. Single viewportX Pixel coordinate of the upper-left corner of the viewport. Unless you want to render to a subset of the surface, this parameter can be set to 0. Single viewportY Pixel coordinate of the upper-left corner of the viewport on the render-target surface. Unless you want to render to a subset of the surface, this parameter can be set to 0. Single viewportWidth Width dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the width dimension of the render-target surface. Single viewportHeight Height dimension of the clip volume, in pixels. Unless you are rendering only to a subset of the surface, this parameter should be set to the height dimension of the render-target surface. Single viewportMinZ Together with ViewportMaxZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0f. Clipping is performed after applying the projection matrix. Single viewportMaxZ Together with MinZ, value describing the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0f. Clipping is performed after applying the projection matrix. XMMatrix projection Projection matrix. XMMatrix view View matrix. XMMatrix world World matrix. Returns Type Description XMVector Returns a vector in object space."
  },
  "api/JeremyAnsel.DirectX.DXMath.XMVector2.html": {
    "href": "api/JeremyAnsel.DirectX.DXMath.XMVector2.html",
    "title": "Class XMVector2",
    "keywords": "Class XMVector2 The 2D vector functions provided by DirectXMath. Inheritance Object XMVector2 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.DXMath Assembly : JeremyAnsel.DirectX.DXMath.dll Syntax public static class XMVector2 Methods | Improve this Doc View Source AngleBetweenNormals(XMVector, XMVector) Computes the radian angle between two normalized 2D vectors. Declaration public static XMVector AngleBetweenNormals(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first vector. XMVector n2 The second vector. Returns Type Description XMVector Returns a vector. The radian angle between N1 and N2 is replicated to each of the components. | Improve this Doc View Source AngleBetweenNormalsEst(XMVector, XMVector) Estimates the radian angle between two normalized 2D vectors. Declaration public static XMVector AngleBetweenNormalsEst(XMVector n1, XMVector n2) Parameters Type Name Description XMVector n1 The first vector. XMVector n2 The second vector. Returns Type Description XMVector Returns a vector. The estimate of the radian angle (between N1 and N2) is replicated to each of the components. | Improve this Doc View Source AngleBetweenVectors(XMVector, XMVector) Computes the radian angle between two 2D vectors. Declaration public static XMVector AngleBetweenVectors(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The radian angle between V1 and V2 is replicated to each of the components. | Improve this Doc View Source ClampLength(XMVector, Single, Single) Clamps the length of a 2D vector to a given range. Declaration public static XMVector ClampLength(XMVector v, float lengthMin, float lengthMax) Parameters Type Name Description XMVector v The 2D vector. Single lengthMin Minimum clamp length. Single lengthMax Maximum clamp length. Returns Type Description XMVector Returns a 2D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source ClampLengthV(XMVector, XMVector, XMVector) Clamps the length of a 2D vector to a given range. Declaration public static XMVector ClampLengthV(XMVector v, XMVector lengthMin, XMVector lengthMax) Parameters Type Name Description XMVector v The 2D vector to clamp. XMVector lengthMin The 2D vector whose x and y-components are both equal to the minimum clamp length. The x and y-components must be greater-than-or-equal to zero. XMVector lengthMax The 2D vector whose x and y-components are both equal to the maximum clamp length. The x and y-components must be greater-than-or-equal to zero. Returns Type Description XMVector Returns a 2D vector whose length is clamped to the specified minimum and maximum. | Improve this Doc View Source Cross(XMVector, XMVector) Computes the 2D cross product. Declaration public static XMVector Cross(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The 2D cross product is replicated into each component. | Improve this Doc View Source Dot(XMVector, XMVector) Computes the dot product between 2D vectors. Declaration public static XMVector Dot(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMVector Returns a vector. The dot product between V1 and V2 is replicated into each component. | Improve this Doc View Source Equal(XMVector, XMVector) Tests whether two 2D vectors are equal. Declaration public static bool Equal(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 2D vectors are equal and false otherwise. | Improve this Doc View Source EqualInt(XMVector, XMVector) Tests whether two 2D vectors are equal, treating each component as an unsigned integer. Declaration public static bool EqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 2D vectors are equal and false otherwise. | Improve this Doc View Source EqualIntR(XMVector, XMVector) Tests whether two 2D vectors are equal, treating each component as an unsigned integer. In addition, this function returns a comparison. Declaration public static XMComparisonRecord EqualIntR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source EqualR(XMVector, XMVector) Tests whether two 2D vectors are equal. In addition, this function returns a comparison value. Declaration public static XMComparisonRecord EqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source Greater(XMVector, XMVector) Tests whether one 2D vector is greater than another 2D vector. Declaration public static bool Greater(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater than V2, and false otherwise. See the remarks section. | Improve this Doc View Source GreaterOrEqual(XMVector, XMVector) Tests whether one 2D vector is greater-than-or-equal-to another 2D vector. Declaration public static bool GreaterOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is greater-than-or-equal-to V2, and false otherwise. | Improve this Doc View Source GreaterOrEqualR(XMVector, XMVector) Tests whether one 2D vector is greater-than-or-equal-to another 2D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterOrEqualR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source GreaterR(XMVector, XMVector) Tests whether one 2D vector is greater than another 2D vector and returns a comparison value. Declaration public static XMComparisonRecord GreaterR(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description XMComparisonRecord Returns a comparison value. | Improve this Doc View Source InBounds(XMVector, XMVector) Tests whether the components of a 2D vector are within set bounds. Declaration public static bool InBounds(XMVector v, XMVector bounds) Parameters Type Name Description XMVector v The 2D vector to test. XMVector bounds The 2D vector that determines the bounds. Returns Type Description Boolean Returns true if both the x and y-components of V are within the set bounds, and false otherwise. | Improve this Doc View Source IntersectLine(XMVector, XMVector, XMVector, XMVector) Finds the intersection of two lines. Declaration public static XMVector IntersectLine(XMVector line1Point1, XMVector line1Point2, XMVector line2Point1, XMVector line2Point2) Parameters Type Name Description XMVector line1Point1 2D vector describing the first point on the first line. XMVector line1Point2 2D vector describing a second point on the first line. XMVector line2Point1 2D vector describing the first point on the second line. XMVector line2Point2 2D vector describing a second point on the second line. Returns Type Description XMVector Returns the intersection point. If the lines are parallel, the returned vector will be a NaN. If the two lines are coincident, the returned vector will be positive infinity. | Improve this Doc View Source IsInfinite(XMVector) Tests whether any component of a 2D vector is positive or negative infinity. Declaration public static bool IsInfinite(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is positive or negative infinity, and false otherwise. | Improve this Doc View Source IsNaN(XMVector) Tests whether any component of a 2D vector is a NaN. Declaration public static bool IsNaN(XMVector v) Parameters Type Name Description XMVector v The vector. Returns Type Description Boolean Returns true if any component of V is a NaN, and false otherwise. | Improve this Doc View Source Length(XMVector) Computes the length of a 2D vector. Declaration public static XMVector Length(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns a vector. The length of V is replicated into each component. | Improve this Doc View Source LengthEst(XMVector) Estimates the length of a 2D vector. Declaration public static XMVector LengthEst(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the length of V. | Improve this Doc View Source LengthSquare(XMVector) Computes the square of the length of a 2D vector. Declaration public static XMVector LengthSquare(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns a vector. The square of the length of V is replicated into each component. | Improve this Doc View Source Less(XMVector, XMVector) Tests whether one 2D vector is less than another 2D vector. Declaration public static bool Less(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less than V2 and false otherwise. | Improve this Doc View Source LessOrEqual(XMVector, XMVector) Tests whether one 2D vector is less-than-or-equal-to another 2D vector. Declaration public static bool LessOrEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if V1 is less-than-or-equal to V2, and false otherwise. | Improve this Doc View Source LinePointDistance(XMVector, XMVector, XMVector) Computes the minimum distance between a line and a point. Declaration public static XMVector LinePointDistance(XMVector linePoint1, XMVector linePoint2, XMVector point) Parameters Type Name Description XMVector linePoint1 2D vector describing a first point on the line. XMVector linePoint2 2D vector describing a second point on the line. XMVector point 2D vector describing the reference point. Returns Type Description XMVector Returns a vector. The minimum distance between the line and the point is replicated to each of the components. | Improve this Doc View Source NearEqual(XMVector, XMVector, XMVector) Tests whether one 2D vector is near another 2D vector. Declaration public static bool NearEqual(XMVector v1, XMVector v2, XMVector epsilon) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. XMVector epsilon The tolerance value used for judging equality. Returns Type Description Boolean Returns true if the difference between components is less than Epsilon; returns false otherwise. | Improve this Doc View Source Normalize(XMVector) Returns the normalized version of a 2D vector. Declaration public static XMVector Normalize(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns the normalized version of V. | Improve this Doc View Source NormalizeEst(XMVector) Estimates the normalized version of a 2D vector. Declaration public static XMVector NormalizeEst(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns an estimate of the normalized version of V. | Improve this Doc View Source NotEqual(XMVector, XMVector) Tests whether two 2D vectors are not equal. Declaration public static bool NotEqual(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 2D vectors are not equal and false otherwise. | Improve this Doc View Source NotEqualInt(XMVector, XMVector) Test whether two vectors are not equal, treating each component as an unsigned integer. Declaration public static bool NotEqualInt(XMVector v1, XMVector v2) Parameters Type Name Description XMVector v1 The first vector. XMVector v2 The second vector. Returns Type Description Boolean Returns true if the 2D vectors are not equal and false otherwise. | Improve this Doc View Source Orthogonal(XMVector) Computes a vector perpendicular to a 2D vector. Declaration public static XMVector Orthogonal(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns the 2D vector orthogonal to V. | Improve this Doc View Source ReciprocalLength(XMVector) Computes the reciprocal of the length of a 2D vector. Declaration public static XMVector ReciprocalLength(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns the reciprocal of the length of V. | Improve this Doc View Source ReciprocalLengthEst(XMVector) Estimates the reciprocal of the length of a 2D vector. Declaration public static XMVector ReciprocalLengthEst(XMVector v) Parameters Type Name Description XMVector v The 2D vector. Returns Type Description XMVector Returns a vector, each of whose components are estimates of the reciprocal of the length of V. | Improve this Doc View Source Reflect(XMVector, XMVector) Reflects an incident 2D vector across a 2D normal vector. Declaration public static XMVector Reflect(XMVector incident, XMVector normal) Parameters Type Name Description XMVector incident The 2D incident vector to reflect. XMVector normal The 2D normal vector to reflect the incident vector across. Returns Type Description XMVector Returns the reflected incident angle. | Improve this Doc View Source Refract(XMVector, XMVector, Single) Refracts an incident 2D vector across a 2D normal vector. Declaration public static XMVector Refract(XMVector incident, XMVector normal, float refractionIndex) Parameters Type Name Description XMVector incident The 2D incident vector to refract. XMVector normal The 2D normal vector to refract the incident vector through. Single refractionIndex The index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source RefractV(XMVector, XMVector, XMVector) Refracts an incident 2D vector across a 2D normal vector. Declaration public static XMVector RefractV(XMVector incident, XMVector normal, XMVector refractionIndex) Parameters Type Name Description XMVector incident The 2D incident vector to refract. XMVector normal The 2D normal vector to refract the incident vector through. XMVector refractionIndex The 2D vector whose x and y-components are both equal to the index of refraction. Returns Type Description XMVector Returns the refracted incident vector. | Improve this Doc View Source Transform(XMVector, XMMatrix) Transforms a 2D vector by a matrix. Declaration public static XMVector Transform(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The 2D vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector. | Improve this Doc View Source TransformCoord(XMVector, XMMatrix) Transforms a 2D vector by a given matrix, projecting the result back into w = 1. Declaration public static XMVector TransformCoord(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The 2D vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector. | Improve this Doc View Source TransformNormal(XMVector, XMMatrix) Transforms the 2D vector normal by the given matrix. Declaration public static XMVector TransformNormal(XMVector v, XMMatrix m) Parameters Type Name Description XMVector v The 2D normal vector. XMMatrix m The transformation matrix. Returns Type Description XMVector Returns the transformed vector."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.html",
    "title": "Class DxgiSwapChain3",
    "keywords": "Class DxgiSwapChain3 Extends IDXGISwapChain1 with methods to support swap back buffer scaling and lower-latency swap chains. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiSwapChain3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiSwapChain3 : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source BackgroundColor Gets or sets the background color of the swap chain. Declaration public DxgiColorRgba BackgroundColor { get; set; } Property Value Type Description DxgiColorRgba | Improve this Doc View Source Description Gets a description of the swap chain. Declaration public DxgiSwapChainDesc1 Description { get; } Property Value Type Description DxgiSwapChainDesc1 | Improve this Doc View Source FrameStatistics Gets performance statistics about the last render frame. Declaration public DxgiFrameStatistics FrameStatistics { get; } Property Value Type Description DxgiFrameStatistics | Improve this Doc View Source FullscreenDescription Gets a description of a full-screen swap chain. Declaration public DxgiSwapChainFullscreenDesc FullscreenDescription { get; } Property Value Type Description DxgiSwapChainFullscreenDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source IsTemporaryMonoSupported Gets a value indicating whether a swap chain supports “temporary mono.” Declaration public bool IsTemporaryMonoSupported { get; } Property Value Type Description Boolean | Improve this Doc View Source LastPresentCount Gets the number of times that IDXGISwapChain::Present or IDXGISwapChain1::Present1 has been called. Declaration public uint LastPresentCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source MatrixTransform Gets or sets the transform matrix that will be applied to a composition swap chain upon the next present. Declaration public DxgiMatrix3x2F MatrixTransform { get; set; } Property Value Type Description DxgiMatrix3x2F | Improve this Doc View Source MaximumFrameLatency Gets or sets the number of frames that the swap chain is allowed to queue for rendering. Declaration public uint MaximumFrameLatency { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Rotation Gets or sets the rotation of the back buffers for the swap chain. Declaration public DxgiModeRotation Rotation { get; set; } Property Value Type Description DxgiModeRotation | Improve this Doc View Source WindowHandle Gets the underlying HWND for this swap-chain object. Declaration public IntPtr WindowHandle { get; } Property Value Type Description IntPtr Methods | Improve this Doc View Source GetBuffer(UInt32, Guid) Accesses one of the swap-chain's back buffers. Declaration public object GetBuffer(uint buffer, Guid riid) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Guid riid The type of interface used to manipulate the buffer. Returns Type Description Object A pointer to a back-buffer interface. | Improve this Doc View Source GetContainingOutput() Get the output (the display monitor) that contains the majority of the client area of the target window. Declaration public DxgiOutput3 GetContainingOutput() Returns Type Description DxgiOutput3 The output interface. | Improve this Doc View Source GetFullscreenState() Get the state associated with full-screen mode. Declaration public bool GetFullscreenState() Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetFullscreenState(out DxgiOutput3) Get the state associated with full-screen mode. Declaration public bool GetFullscreenState(out DxgiOutput3 target) Parameters Type Name Description DxgiOutput3 target The output target when the mode is full screen. Returns Type Description Boolean A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source GetRestrictToOutput() Gets the output (the display monitor) to which you can restrict the contents of a present operation. Declaration public DxgiOutput3 GetRestrictToOutput() Returns Type Description DxgiOutput3 The DXGIOutput3 interface for the restrict-to output. | Improve this Doc View Source GetSourceSize(out UInt32, out UInt32) Gets the source region used for the swap chain. Declaration public void GetSourceSize(out uint width, out uint height) Parameters Type Name Description UInt32 width The current width of the source region of the swap chain. This value can range from 1 to the overall width of the swap chain. UInt32 height The current height of the source region of the swap chain. This value can range from 1 to the overall height of the swap chain. | Improve this Doc View Source GetSurface(UInt32) Accesses one of the swap-chain's back buffers. Declaration public DxgiSurface3 GetSurface(uint buffer) Parameters Type Name Description UInt32 buffer A zero-based buffer index. Returns Type Description DxgiSurface3 A back-buffer surface. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions) Presents a frame on the display screen. Declaration public void Present(uint syncInterval, DxgiPresentOptions options) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options An integer value that contains swap-chain presentation options. | Improve this Doc View Source Present(UInt32, DxgiPresentOptions, DxgiRect[], DxgiRect, DxgiPoint) Presents a frame on the display screen. Declaration public void Present(uint syncInterval, DxgiPresentOptions options, DxgiRect[] dirtyRects, DxgiRect scrollRect, DxgiPoint scrollOffset) Parameters Type Name Description UInt32 syncInterval An integer that specifies how to synchronize presentation of a frame with the vertical blank. DxgiPresentOptions options An integer value that contains swap-chain presentation options. DxgiRect [] dirtyRects A list of updated rectangles that you update in the back buffer for the presented frame. DxgiRect scrollRect The rectangle of the previous frame from which the runtime bit-block transfers content. DxgiPoint scrollOffset The offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). | Improve this Doc View Source ResizeBuffers(UInt32, UInt32, UInt32, DxgiFormat, DxgiSwapChainOptions) Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized. Declaration public void ResizeBuffers(uint bufferCount, uint width, uint height, DxgiFormat format, DxgiSwapChainOptions options) Parameters Type Name Description UInt32 bufferCount The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. UInt32 width New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. UInt32 height New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. DxgiFormat format A DXGI_FORMAT -typed value for the new format of the back buffer. Set this value to DXGI_FORMAT_UNKNOWN to preserve the existing format of the back buffer. DxgiSwapChainOptions options The options for swap-chain behavior. | Improve this Doc View Source ResizeTarget(DxgiModeDesc) Resizes the output target. Declaration public void ResizeTarget(DxgiModeDesc targetParameters) Parameters Type Name Description DxgiModeDesc targetParameters A DXGI_MODE_DESC structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is DXGI_FORMAT_UNKNOWN , ResizeTarget uses the existing format. | Improve this Doc View Source SetFullscreenState(Boolean) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. | Improve this Doc View Source SetFullscreenState(Boolean, DxgiOutput3) Sets the display state to windowed or full screen. Declaration public void SetFullscreenState(bool fullscreen, DxgiOutput3 target) Parameters Type Name Description Boolean fullscreen A value indicating whether to set the display state to windowed or full screen. DxgiOutput3 target A pointer to an DXGIOutput3 interface for the output target that contains the swap chain. | Improve this Doc View Source SetSourceSize(UInt32, UInt32) Sets the source region to be used for the swap chain. Declaration public void SetSourceSize(uint width, uint height) Parameters Type Name Description UInt32 width Source width to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall width of the swap chain. UInt32 height Source height to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall height of the swap chain. Implements System.IDisposable IDxgiReleasable Extension Methods DxgiSwapChainExtensions.GetTexture2D(DxgiSwapChain3, UInt32)"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResource.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResource.html",
    "title": "Class DxgiResource",
    "keywords": "Class DxgiResource An IDXGIResource interface allows resource sharing and identifies the memory that a resource resides in. Inheritance Object DxgiObject DxgiDeviceSubObject DxgiResource Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiResource : DxgiDeviceSubObject, IDisposable, IDxgiReleasable Constructors | Improve this Doc View Source DxgiResource(Object) Initializes a new instance of the DxgiResource class. Declaration public DxgiResource(object resource) Parameters Type Name Description Object resource A resource interface which implements the IDxgiResource interface. Properties | Improve this Doc View Source EvictionPriority Gets or sets the eviction priority. Declaration public DxgiResourceEvictionPriority EvictionPriority { get; set; } Property Value Type Description DxgiResourceEvictionPriority | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source Usage Gets the expected resource usage. Declaration public DxgiUsages Usage { get; } Property Value Type Description DxgiUsages Methods | Improve this Doc View Source GetSharedHandle() Gets the handle to a shared resource. Declaration public IntPtr GetSharedHandle() Returns Type Description IntPtr A handle. Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiResidency.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiResidency.html",
    "title": "Enum DxgiResidency",
    "keywords": "Enum DxgiResidency Indicates the memory location of a resource. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public enum DxgiResidency Fields Name Description EvictedToDisk At least some of the resource has been paged out to the hard drive. FullyResident The resource is located in video memory. ResidentInSharedMemory At least some of the resource is located in CPU memory. Unspecified Not specified."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiRect.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiRect.html",
    "title": "Struct DxgiRect",
    "keywords": "Struct DxgiRect Defines the coordinates of the upper-left and lower-right corners of a rectangle. Implements IEquatable < DxgiRect > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiRect : IEquatable<DxgiRect> Constructors | Improve this Doc View Source DxgiRect(Int32, Int32, Int32, Int32) Initializes a new instance of the DxgiRect struct. Declaration public DxgiRect(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left The x-coordinate of the upper-left corner of a rectangle. Int32 top The y-coordinate of the upper-left corner of a rectangle. Int32 right The x-coordinate of the lower-right corner of a rectangle. Int32 bottom The y-coordinate of the lower-right corner of a rectangle. Properties | Improve this Doc View Source Bottom Gets or sets the y-coordinate of the lower-right corner of a rectangle. Declaration public int Bottom { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Left Gets or sets the x-coordinate of the upper-left corner of a rectangle. Declaration public int Left { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Right Gets or sets the x-coordinate of the lower-right corner of a rectangle. Declaration public int Right { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Top Gets or sets the y-coordinate of the upper-left corner of a rectangle. Declaration public int Top { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DxgiRect) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiRect other) Parameters Type Name Description DxgiRect other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiRect, DxgiRect) Compares two DxgiRect objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiRect left, DxgiRect right) Parameters Type Name Description DxgiRect left The left DxgiRect to compare. DxgiRect right The right DxgiRect to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiRect, DxgiRect) Compares two DxgiRect objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiRect left, DxgiRect right) Parameters Type Name Description DxgiRect left The left DxgiRect to compare. DxgiRect right The right DxgiRect to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiRational.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiRational.html",
    "title": "Struct DxgiRational",
    "keywords": "Struct DxgiRational Represents a rational number. Implements IEquatable < DxgiRational > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiRational : IEquatable<DxgiRational> Constructors | Improve this Doc View Source DxgiRational(UInt32, UInt32) Initializes a new instance of the DxgiRational struct. Declaration public DxgiRational(uint numerator, uint denominator) Parameters Type Name Description UInt32 numerator An unsigned integer value representing the top of the rational number. UInt32 denominator An unsigned integer value representing the bottom of the rational number. Properties | Improve this Doc View Source Denominator Gets an unsigned integer value representing the bottom of the rational number. Declaration public uint Denominator { get; } Property Value Type Description UInt32 | Improve this Doc View Source Numerator Gets an unsigned integer value representing the top of the rational number. Declaration public uint Numerator { get; } Property Value Type Description UInt32 Methods | Improve this Doc View Source Equals(DxgiRational) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiRational other) Parameters Type Name Description DxgiRational other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiRational, DxgiRational) Compares two DxgiRational objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiRational left, DxgiRational right) Parameters Type Name Description DxgiRational left The left DxgiRational to compare. DxgiRational right The right DxgiRational to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiRational, DxgiRational) Compares two DxgiRational objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiRational left, DxgiRational right) Parameters Type Name Description DxgiRational left The left DxgiRational to compare. DxgiRational right The right DxgiRational to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.html",
    "title": "Enum DxgiPresentOptions",
    "keywords": "Enum DxgiPresentOptions Options for presenting frames to the output. Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax [Flags] public enum DxgiPresentOptions Fields Name Description DoNotSequence Present a frame from the current buffer to the output. Use this flag so that the presentation can use vertical-blank synchronization instead of sequencing buffers in the chain in the usual manner. DoNotWait Specifies that the runtime will fail the presentation with the DXGI_ERROR_WAS_STILL_DRAWING error code if the calling thread is blocked; the runtime returns DXGI_ERROR_WAS_STILL_DRAWING instead of sleeping until the dependency is resolved. None Present a frame from each buffer (starting with the current buffer) to the output. Restart Specifies that the runtime will discard outstanding queued presents. RestrictToOutput Indicates that presentation content will be shown only on the particular output. The content will not be visible on other outputs. For example, if the user tries to relocate video content on another output, the video content will not be visible. StereoPreferRight Indicates that if the stereo present must be reduced to mono, right-eye viewing is used rather than left-eye viewing. StereoTemporaryMono Indicates that the presentation should use the left buffer as a mono buffer. Test Do not present the frame to the output. The status of the swap chain will be tested and appropriate errors returned. Test is intended for use only when switching from the idle state; do not use it to determine when to switch to the idle state because doing so can leave the swap chain unable to exit full-screen mode. UseDuration Must be set by media apps that are currently using a custom present duration (custom refresh rate)."
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiPoint.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiPoint.html",
    "title": "Struct DxgiPoint",
    "keywords": "Struct DxgiPoint Defines the x- and y- coordinates of a point. Implements IEquatable < DxgiPoint > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiPoint : IEquatable<DxgiPoint> Constructors | Improve this Doc View Source DxgiPoint(Int32, Int32) Initializes a new instance of the DxgiPoint struct. Declaration public DxgiPoint(int x, int y) Parameters Type Name Description Int32 x The x-coordinate of the point. Int32 y The y-coordinate of the point. Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public int Y { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(DxgiPoint) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiPoint other) Parameters Type Name Description DxgiPoint other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiPoint, DxgiPoint) Compares two DxgiPoint objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiPoint left, DxgiPoint right) Parameters Type Name Description DxgiPoint left The left DxgiPoint to compare. DxgiPoint right The right DxgiPoint to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiPoint, DxgiPoint) Compares two DxgiPoint objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiPoint left, DxgiPoint right) Parameters Type Name Description DxgiPoint left The left DxgiPoint to compare. DxgiPoint right The right DxgiPoint to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.html",
    "title": "Struct DxgiOutputDesc",
    "keywords": "Struct DxgiOutputDesc Describes an output or physical connection between the adapter (video card) and a device. Implements IEquatable < DxgiOutputDesc > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public struct DxgiOutputDesc : IEquatable<DxgiOutputDesc> Properties | Improve this Doc View Source DesktopCoordinates Gets a DxgiRect structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop. Declaration public DxgiRect DesktopCoordinates { get; } Property Value Type Description DxgiRect | Improve this Doc View Source DeviceName Gets a string that contains the name of the output device. Declaration public string DeviceName { get; } Property Value Type Description String | Improve this Doc View Source IsAttachedToDesktop Gets a value indicating whether the output is attached to the desktop. Declaration public bool IsAttachedToDesktop { get; } Property Value Type Description Boolean | Improve this Doc View Source Monitor Gets an handle that represents the display monitor. Declaration public IntPtr Monitor { get; } Property Value Type Description IntPtr | Improve this Doc View Source Rotation Gets a member of the DxgiModeRotation enumeration describing on how an image is rotated by the output. Declaration public DxgiModeRotation Rotation { get; } Property Value Type Description DxgiModeRotation Methods | Improve this Doc View Source Equals(DxgiOutputDesc) Determines whether the specified object is equal to the current object. Declaration public bool Equals(DxgiOutputDesc other) Parameters Type Name Description DxgiOutputDesc other The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DxgiOutputDesc, DxgiOutputDesc) Compares two DxgiOutputDesc objects. The result specifies whether the values of the two objects are equal. Declaration public static bool operator ==(DxgiOutputDesc left, DxgiOutputDesc right) Parameters Type Name Description DxgiOutputDesc left The left DxgiOutputDesc to compare. DxgiOutputDesc right The right DxgiOutputDesc to compare. Returns Type Description Boolean true if the values of left and right are equal; otherwise, false . | Improve this Doc View Source Inequality(DxgiOutputDesc, DxgiOutputDesc) Compares two DxgiOutputDesc objects. The result specifies whether the values of the two objects are unequal. Declaration public static bool operator !=(DxgiOutputDesc left, DxgiOutputDesc right) Parameters Type Name Description DxgiOutputDesc left The left DxgiOutputDesc to compare. DxgiOutputDesc right The right DxgiOutputDesc to compare. Returns Type Description Boolean true if the values of left and right differ; otherwise, false . Implements System.IEquatable<T>"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput3.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput3.html",
    "title": "Class DxgiOutput3",
    "keywords": "Class DxgiOutput3 Represents an adapter output (such as a monitor). The IDXGIOutput2 interface exposes a method to check for multi-plane overlay support on the primary output adapter. Inheritance Object DxgiObject DxgiOutput3 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiOutput3 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the output. Declaration public DxgiOutputDesc Description { get; } Property Value Type Description DxgiOutputDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle | Improve this Doc View Source SupportsOverlays Gets a value indicating whether the output adapter supports multi-plane overlay. Declaration public bool SupportsOverlays { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source FindClosestMatchingMode(DxgiModeDesc1, Object) Finds the display mode that most closely matches the requested display mode. Declaration public DxgiModeDesc1 FindClosestMatchingMode(DxgiModeDesc1 modeToMatch, object concernedDevice) Parameters Type Name Description DxgiModeDesc1 modeToMatch The desired display mode. Object concernedDevice The Direct3D device interface. If this parameter is null , only modes whose format matches that of modeToMatch will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. Returns Type Description DxgiModeDesc1 The mode that most closely matches modeToMatch . | Improve this Doc View Source GetDisplayModeList(DxgiFormat, DxgiEnumModes) Gets the display modes that match the requested format and other input options. Declaration public DxgiModeDesc1[] GetDisplayModeList(DxgiFormat format, DxgiEnumModes modes) Parameters Type Name Description DxgiFormat format The color format. DxgiEnumModes modes Options for modes to include. Returns Type Description DxgiModeDesc1 [] An array of DxgiModeDesc structure. | Improve this Doc View Source GetDisplaySurfaceData(DxgiResource3) Copies the display surface (front buffer) to a user-provided resource. Declaration public void GetDisplaySurfaceData(DxgiResource3 destination) Parameters Type Name Description DxgiResource3 destination A resource interface that represents the resource to which copies the display surface. | Improve this Doc View Source GetFrameStatistics() Gets statistics about recently rendered frames. Declaration public DxgiFrameStatistics GetFrameStatistics() Returns Type Description DxgiFrameStatistics The frame statistics. | Improve this Doc View Source WaitForVBlank() Halt a thread until the next vertical blank occurs. Declaration public void WaitForVBlank() Implements System.IDisposable IDxgiReleasable"
  },
  "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput2.html": {
    "href": "api/JeremyAnsel.DirectX.Dxgi.DxgiOutput2.html",
    "title": "Class DxgiOutput2",
    "keywords": "Class DxgiOutput2 An IDXGIOutput1 interface represents an adapter output (such as a monitor). Inheritance Object DxgiObject DxgiOutput2 Implements IDisposable IDxgiReleasable Inherited Members DxgiObject.ToBoolean() DxgiObject.Dispose() DxgiObject.Release() DxgiObject.SetPrivateDataText(Guid, String) DxgiObject.GetPrivateDataText(Guid) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : JeremyAnsel.DirectX.Dxgi Assembly : JeremyAnsel.DirectX.Dxgi.dll Syntax public sealed class DxgiOutput2 : DxgiObject, IDisposable, IDxgiReleasable Properties | Improve this Doc View Source Description Gets a description of the output. Declaration public DxgiOutputDesc Description { get; } Property Value Type Description DxgiOutputDesc | Improve this Doc View Source Handle Gets an handle representing the DXGI object interface. Declaration public override object Handle { get; } Property Value Type Description Object Overrides DxgiObject.Handle Methods | Improve this Doc View Source FindClosestMatchingMode(DxgiModeDesc1, Object) Finds the display mode that most closely matches the requested display mode. Declaration public DxgiModeDesc1 FindClosestMatchingMode(DxgiModeDesc1 modeToMatch, object concernedDevice) Parameters Type Name Description DxgiModeDesc1 modeToMatch The desired display mode. Object concernedDevice The Direct3D device interface. If this parameter is null , only modes whose format matches that of modeToMatch will be returned; otherwise, only those formats that are supported for scan-out by the device are returned. Returns Type Description DxgiModeDesc1 The mode that most closely matches modeToMatch . | Improve this Doc View Source GetDisplayModeList(DxgiFormat, DxgiEnumModes) Gets the display modes that match the requested format and other input options. Declaration public DxgiModeDesc1[] GetDisplayModeList(DxgiFormat format, DxgiEnumModes modes) Parameters Type Name Description DxgiFormat format The color format. DxgiEnumModes modes Options for modes to include. Returns Type Description DxgiModeDesc1 [] An array of DxgiModeDesc structure. | Improve this Doc View Source GetDisplaySurfaceData(DxgiResource2) Copies the display surface (front buffer) to a user-provided resource. Declaration public void GetDisplaySurfaceData(DxgiResource2 destination) Parameters Type Name Description DxgiResource2 destination A resource interface that represents the resource to which copies the display surface. | Improve this Doc View Source GetFrameStatistics() Gets statistics about recently rendered frames. Declaration public DxgiFrameStatistics GetFrameStatistics() Returns Type Description DxgiFrameStatistics The frame statistics. | Improve this Doc View Source WaitForVBlank() Halt a thread until the next vertical blank occurs. Declaration public void WaitForVBlank() Implements System.IDisposable IDxgiReleasable"
  }
}